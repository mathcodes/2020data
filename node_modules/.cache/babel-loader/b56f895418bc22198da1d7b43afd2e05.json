{"ast":null,"code":"import _toConsumableArray from\"/Users/jonchristie/Desktop/2020data/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/toConsumableArray\";import _objectSpread from\"/Users/jonchristie/Desktop/2020data/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread2\";import{getDataFromRegion,metricText,parseDate,simplifyName}from'./utils';import*as str from'./strings';import{plotSpecificTypes}from'./plot_types';import i18n from'../data/i18n.yml';import diseases from'../data/other_diseases_stats.yml';export var generatePlotData=function generatePlotData(params){return generatePlotDataFunc[params.plotSpecificType](params);};var metricColors={confirmedCount:'var(--primary-color-4)',deadCount:'var(--primary-color-10)',curedCount:'var(--primary-color-2)'};var metricColorsDark={confirmedCount:'var(--primary-color-4)',deadCount:'var(--lighter-grey)',curedCount:'var(--primary-color-2)'};var generatePlotDataTotal=function generatePlotDataTotal(_ref){var data=_ref.data,date=_ref.date,currentRegion=_ref.currentRegion,lang=_ref.lang,darkMode=_ref.darkMode,playing=_ref.playing,scale=_ref.scale,plotSpecificType=_ref.plotSpecificType,plotDetails=_ref.plotDetails,plotDates=_ref.plotDates,fullPlot=_ref.fullPlot;var fullData=arguments.length>1&&arguments[1]!==undefined?arguments[1]:false;var maxValue=0;var minValue=100000;var plotData=['deadCount','curedCount','confirmedCount'].map(function(metric){var counts=getDataFromRegion(data,currentRegion)[metric];return{id:metricText[metric][lang],color:darkMode?metricColorsDark[metric]:metricColors[metric],data:Object.keys(counts).sort(function(a,b){return parseDate(a)>parseDate(b)?1:-1;}).filter(function(d){return!playing||parseDate(d)<=parseDate(date);}).map(function(d){if(counts[d]>maxValue)maxValue=counts[d];if(counts[d]<minValue)minValue=counts[d];return scale==='linear'||counts[d]>0?{x:d,y:counts[d]}:null;}).filter(function(x){return x!=null;})};});plotData=calcMovingAverage(plotData,plotDetails.movingAverage);if(!fullData)plotData=applyDateRange(plotData,plotDates);return _objectSpread({plotData:plotData},getTickValues(scale,plotSpecificType,fullPlot,minValue,maxValue));};var generatePlotDataNew=function generatePlotDataNew(params){var fullData=arguments.length>1&&arguments[1]!==undefined?arguments[1]:false;var _generatePlotDataTota=generatePlotDataTotal(params,true),plotData=_generatePlotDataTota.plotData;plotData=convertTotalToNew(plotData);if(!fullData)plotData=applyDateRange(plotData,params.plotDates);return{plotData:plotData};};var generatePlotDataGrowthRate=function generatePlotDataGrowthRate(params){var _ref2=params.plotSpecificType!=='growth_new'?generatePlotDataTotal(params,true):generatePlotDataNew(params,true),plotData=_ref2.plotData;var metric=params.metric;plotData.forEach(function(metricData){metricData.data=metricData.data.reduce(function(s,v,i){return[].concat(_toConsumableArray(s),[metricData.data[i-1]&&metricData.data[i-1].y>0?_objectSpread(_objectSpread({},v),{},{y:(v.y-metricData.data[i-1].y)/metricData.data[i-1].y}):_objectSpread(_objectSpread({},v),{},{y:0})]);},[]);});if(metric==='confirmedCount')plotData=[plotData[2]];if(metric==='curedCount')plotData=[plotData[1]];if(metric==='deadCount')plotData=[plotData[0]];plotData=applyDateRange(plotData,params.plotDates);return{plotData:plotData};};var generatePlotDataDoublingTime=function generatePlotDataDoublingTime(params){// set scale to log: temporary hack to remove zeros\nvar _generatePlotDataGrow=generatePlotDataGrowthRate(_objectSpread(_objectSpread({},params),{},{scale:'log'})),plotData=_generatePlotDataGrow.plotData;plotData[0].data=plotData[0].data.map(function(point){return _objectSpread(_objectSpread({},point),{},{y:point.y>0?Math.log(2)/Math.log(point.y+1):null,lang:params.lang});}).filter(function(point){return point.y!=null&&point.y<1000;});// remove outliers\nreturn{plotData:plotData};};var generatePlotDataR0=function generatePlotDataR0(params){// set scale to log: temporary hack to remove zeros\nvar _generatePlotDataGrow2=generatePlotDataGrowthRate(_objectSpread(_objectSpread({},params),{},{metric:'confirmedCount',scale:'log'})),plotData=_generatePlotDataGrow2.plotData;var t_incubation=5;var t_infectious=5;// based on SEIR model\n// R0 = (1 + lambda * t_incubation) * (1 + lambda * t_infectious)\nplotData[0].data=plotData[0].data.map(function(point){return _objectSpread(_objectSpread({},point),{},{y:(1+Math.log(point.y+1)*t_incubation)*(1+Math.log(point.y+1)*t_infectious),lang:params.lang});}).filter(function(point){return point.y<20;});// remove outliers\nreturn{plotData:plotData};};var generatePlotDataRate=function generatePlotDataRate(_ref3){var data=_ref3.data,currentRegion=_ref3.currentRegion,darkMode=_ref3.darkMode,lang=_ref3.lang,date=_ref3.date,playing=_ref3.playing,plotDetails=_ref3.plotDetails,plotDates=_ref3.plotDates;var confirmedCounts=getDataFromRegion(data,currentRegion)['confirmedCount'];var metrics=plotDetails.recoveryRate==='show'?['deadCount','curedCount']:['deadCount'];var plotData=metrics.map(function(metric){var counts=getDataFromRegion(data,currentRegion)[metric];var newMetric=metric==='deadCount'?'fatalityRate':'recoveryRate';return{id:metricText[newMetric][lang],color:darkMode?metricColorsDark[metric]:metricColors[metric],data:Object.keys(counts).filter(function(d){return!playing||parseDate(d)<=parseDate(date);}).map(function(d){return{d:d,count:confirmedCounts[d]>0?counts[d]/confirmedCounts[d]:0};}).map(function(_ref4){var d=_ref4.d,count=_ref4.count;return{x:d,y:count};})};});plotData=calcMovingAverage(plotData,plotDetails.movingAverage);plotData=applyDateRange(plotData,plotDates);return{plotData:plotData};};var generatePlotDataOneVsRest=function generatePlotDataOneVsRest(_ref5){var data=_ref5.data,currentRegion=_ref5.currentRegion,metric=_ref5.metric,lang=_ref5.lang,date=_ref5.date,playing=_ref5.playing,scale=_ref5.scale,plotSpecificType=_ref5.plotSpecificType,plotDetails=_ref5.plotDetails,plotDates=_ref5.plotDates,fullPlot=_ref5.fullPlot;var maxValue=0;var minValue=100000;var currentData=getDataFromRegion(data,currentRegion);var counts=currentData[metric];var regionName=lang==='zh'?currentRegion[currentRegion.length-1]:currentData.ENGLISH;regionName=simplifyName(regionName,lang);var parentRegion=currentRegion.length===1?[str.GLOBAL_ZH]:currentRegion.slice(0,currentRegion.length-1);var parentData=getDataFromRegion(data,parentRegion);var parentCounts=parentData[metric];var parentRegionName=lang==='zh'?parentRegion[parentRegion.length-1]:parentData.ENGLISH;parentRegionName=simplifyName(parentRegionName,lang);var plotData=[];var parentPlotData={id:lang==='zh'?\"\".concat(parentRegionName,\" (\").concat(i18n.REST[lang],\")\"):\"\".concat(i18n.REST[lang],\" of \").concat(parentRegionName),color:'var(--primary-color-4)',data:Object.keys(parentCounts).filter(function(d){return!playing||parseDate(d)<=parseDate(date);}).map(function(d){if(counts[d]==null)return null;if(parentCounts[d]-counts[d]>maxValue)maxValue=parentCounts[d]-counts[d];if(parentCounts[d]-counts[d]<minValue)minValue=parentCounts[d]-counts[d];return scale==='linear'||parentCounts[d]-counts[d]>0?{x:d,y:parentCounts[d]-counts[d]}:null;}).filter(function(x){return x!=null;})};var currentPlotData={id:regionName,color:'var(--primary-color-2)',data:Object.keys(counts).filter(function(d){return!playing||parseDate(d)<=parseDate(date);}).map(function(d){if(parentCounts[d]==null)return null;if(counts[d]>maxValue)maxValue=counts[d];if(counts[d]<minValue)minValue=counts[d];return scale==='linear'||counts[d]>0?{x:d,y:counts[d]}:null;}).filter(function(x){return x!=null;})};plotData.push(parentPlotData);plotData.push(currentPlotData);if(plotSpecificType==='one_vs_rest_new'){plotData=convertTotalToNew(plotData);}plotData=calcMovingAverage(plotData,plotDetails.movingAverage);plotData=applyDateRange(plotData,plotDates);return _objectSpread({plotData:plotData},getTickValues(scale,plotSpecificType,fullPlot,minValue,maxValue));};var generatePlotDataSubregionRankings=function generatePlotDataSubregionRankings(_ref6){var data=_ref6.data,currentRegion=_ref6.currentRegion,metric=_ref6.metric,lang=_ref6.lang,darkMode=_ref6.darkMode,playing=_ref6.playing,date=_ref6.date,plotDates=_ref6.plotDates,plotSpecificType=_ref6.plotSpecificType;var currentData=getCurrentData(data,currentRegion);var subregions=playing?getSubregions(data,currentRegion,metric,10):getSubregions(data,currentRegion,metric,10,date);var regionIndices={};var dates=[];var plotData=subregions.map(function(region,i){dates=[].concat(_toConsumableArray(dates),_toConsumableArray(Object.keys(currentData[region][metric])));dates=_toConsumableArray(new Set(dates));regionIndices[region]=i;return region;}).map(function(region,i){var id=lang==='zh'?region:currentData[region].ENGLISH;var dd=Object.keys(currentData[region][metric]).sort(function(a,b){return parseDate(a)>parseDate(b)?1:-1;}).filter(function(d){return parseDate(d)<=parseDate(date);}).filter(function(d){return parseDate(d)<=parseDate(plotDates[1])&&parseDate(d)>=parseDate(plotDates[0]);});var counts=dd.map(function(d){return currentData[region][metric][d];});var count=counts[counts.length-1];if(plotSpecificType==='most_affected_subregions_new')count=counts.length>=2?counts[counts.length-1]-counts[counts.length-2]:counts[counts.length-1];return{id:simplifyName(id,lang),fullId:id,name:region,color:darkMode?\"var(--primary-color-\".concat(i<7?i:i+1,\")\"):\"var(--primary-color-\".concat(10-i,\")\"),count:count,data:[]};});dates=dates.sort(function(a,b){return parseDate(a)>parseDate(b)?1:-1;});var regionSkipped={};dates.filter(function(d){return parseDate(d)<=parseDate(date);}).filter(function(d){return parseDate(d)<=parseDate(plotDates[1])&&parseDate(d)>=parseDate(plotDates[0]);}).forEach(function(d,i){var regionCounts=[];plotData.forEach(function(region){var counts=currentData[region.name][metric][d]?currentData[region.name][metric][d]:0;if(plotSpecificType==='most_affected_subregions_new'){if(i>0&&currentData[region.name][metric][dates[i-1]])counts=counts-currentData[region.name][metric][dates[i-1]];}regionCounts.push({region:region.name,counts:counts});});regionCounts=regionCounts.sort(function(a,b){return a.counts<=b.counts?1:-1;});regionCounts.forEach(function(region,i){if(region.counts===0&&regionSkipped[region.region]==null){plotData[regionIndices[region.region]].data.push({x:d,y:null});}else{regionSkipped[region.region]=true;plotData[regionIndices[region.region]].data.push({x:d,y:i+1});}});});return{plotData:plotData,dates:dates};};var generatePlotDataSubregionStream=function generatePlotDataSubregionStream(_ref7){var data=_ref7.data,currentRegion=_ref7.currentRegion,lang=_ref7.lang,playing=_ref7.playing,date=_ref7.date,plotDates=_ref7.plotDates,metric=_ref7.metric,plotSpecificType=_ref7.plotSpecificType,fullPlot=_ref7.fullPlot;var currentData=getCurrentData(data,currentRegion);var dates=[];var plotData=[];var sortBy=plotSpecificType==='subregion_active_stream'?'confirmedCount':metric;var numOfRegions=!fullPlot?5:9;var subregionsData=getSubregions(data,currentRegion,sortBy,numOfRegions).map(function(region){dates=[].concat(_toConsumableArray(dates),_toConsumableArray(Object.keys(currentData[region]['confirmedCount'])));dates=_toConsumableArray(new Set(dates));return region;}).map(function(region){var id=lang==='zh'?region:currentData[region].ENGLISH;return{id:simplifyName(id,lang),fullId:id,name:region};});var plotKeys=subregionsData.map(function(x){return x.id;});// at least (numOfRegions + 1) subregions\nif(Object.keys(currentData).length>=numOfRegions+5)plotKeys=[].concat(_toConsumableArray(plotKeys),[i18n.OTHERS[lang]]);plotKeys=plotKeys.reverse();dates=dates.sort(function(a,b){return parseDate(a)>parseDate(b)?1:-1;});dates=dates.filter(function(d){return parseDate(d)<=parseDate(plotDates[1])&&parseDate(d)>=parseDate(plotDates[0]);});// no subregions\nif(subregionsData.length===0){dates=Object.keys(currentData['confirmedCount']).sort(function(a,b){return parseDate(a)>parseDate(b)?1:-1;});var id=lang==='zh'?currentRegion[currentRegion.length-1]:currentData.ENGLISH;id=simplifyName(id,lang);plotKeys=[id];}dates.filter(function(d){return!playing||parseDate(d)<=parseDate(date);}).forEach(function(d,i){var subregionCounts={};subregionsData.forEach(function(region){if(plotSpecificType==='subregion_active_stream'){var confirmedCount=currentData[region.name]['confirmedCount'][d]?currentData[region.name]['confirmedCount'][d]:0;var deadCount=currentData[region.name]['deadCount'][d]?currentData[region.name]['deadCount'][d]:0;var curedCount=currentData[region.name]['curedCount'][d]?currentData[region.name]['curedCount'][d]:0;var remainingConfirmed=Math.max(confirmedCount-deadCount-curedCount,0);subregionCounts[region.id]=remainingConfirmed;}else{var count=currentData[region.name][metric][d]?currentData[region.name][metric][d]:0;if(plotSpecificType==='subregion_new_stream'&&currentData[region.name][metric][dates[i-1]])count-=currentData[region.name][metric][dates[i-1]];subregionCounts[region.id]=count;}});var otherConfirmedCount=0;var otherDeadCount=0;var otherCuredCount=0;// compute number of remaining confirmed cases from non-top-5 subregions\nObject.keys(currentData).filter(function(region){return!['confirmedCount','deadCount','curedCount','ENGLISH',str.GLOBAL_ZH].includes(region);}).filter(function(region){return!subregionsData.map(function(x){return x.name;}).includes(region);}).forEach(function(region){var confirmedCount=currentData[region]['confirmedCount'][d]?currentData[region]['confirmedCount'][d]:0;var deadCount=currentData[region]['deadCount'][d]?currentData[region]['deadCount'][d]:0;var curedCount=currentData[region]['curedCount'][d]?currentData[region]['curedCount'][d]:0;otherConfirmedCount+=confirmedCount;otherDeadCount+=deadCount;otherCuredCount+=curedCount;if(plotSpecificType==='subregion_new_stream'){var confirmedCountPrevious=currentData[region]['confirmedCount'][dates[i-1]]?currentData[region]['confirmedCount'][dates[i-1]]:0;var deadCountPrevious=currentData[region]['deadCount'][dates[i-1]]?currentData[region]['deadCount'][dates[i-1]]:0;var curedCountPrevious=currentData[region]['curedCount'][dates[i-1]]?currentData[region]['curedCount'][dates[i-1]]:0;otherConfirmedCount-=confirmedCountPrevious;otherDeadCount-=deadCountPrevious;otherCuredCount-=curedCountPrevious;}});var otherCount=0;if(metric==='confirmedCount')otherCount=Math.max(otherConfirmedCount,0);if(metric==='deadCount')otherCount=Math.max(otherDeadCount,0);if(metric==='curedCount')otherCount=Math.max(otherCuredCount,0);if(plotSpecificType==='subregion_active_stream')otherCount=Math.max(otherConfirmedCount-otherDeadCount-otherCuredCount,0);if(Object.keys(currentData).length>=10)subregionCounts[i18n.OTHERS[lang]]=otherCount;// no subregions\nif(subregionsData.length===0){var confirmedCount=currentData['confirmedCount'][d]?currentData['confirmedCount'][d]:0;var deadCount=currentData['deadCount'][d]?currentData['deadCount'][d]:0;var curedCount=currentData['curedCount'][d]?currentData['curedCount'][d]:0;var remainingConfirmed=Math.max(confirmedCount-deadCount-curedCount,0);var _id=lang==='zh'?currentRegion[currentRegion.length-1]:currentData.ENGLISH;_id=simplifyName(_id,lang);subregionCounts[_id]=plotSpecificType==='subregion_active_stream'?remainingConfirmed:Math.max(currentData[metric][d]?currentData[metric][d]:0,0);}plotData.push(subregionCounts);});return{plotData:plotData,dates:dates,plotKeys:plotKeys};};var generatePlotDataFatalityLine=function generatePlotDataFatalityLine(_ref8){var data=_ref8.data,currentRegion=_ref8.currentRegion,date=_ref8.date,darkMode=_ref8.darkMode,lang=_ref8.lang,plotSpecificType=_ref8.plotSpecificType,plotDates=_ref8.plotDates;var confirmedCount=getDataFromRegion(data,currentRegion)['confirmedCount'];var deadCount=getDataFromRegion(data,currentRegion)['deadCount'];var plotData=[{id:'fatality-line',color:darkMode?'var(--primary-color-2)':'var(--primary-color-5)',data:Object.keys(confirmedCount).filter(function(d){return parseDate(d)<=parseDate(date)&&confirmedCount[d]>0&&(deadCount[d]>0||plotSpecificType==='fatality_line'||plotSpecificType==='fatality_line_only');}).filter(function(d){return parseDate(d)<=parseDate(plotDates[1])&&parseDate(d)>=parseDate(plotDates[0]);}).map(function(d){return{d:d,cfr:deadCount[d]!=null?deadCount[d]/confirmedCount[d]:0};}).map(function(_ref9){var d=_ref9.d,cfr=_ref9.cfr;return{x:confirmedCount[d],y:plotSpecificType==='fatality_line'||plotSpecificType==='fatality_line_only'?cfr:deadCount[d],date:d,lang:lang};})}];if(plotSpecificType==='fatality_line'||plotSpecificType==='fatality_line2')Object.keys(diseases).forEach(function(x){plotData.push({id:x,color:'var(--light-grey)',data:[{x:diseases[x].confirmedCount,y:plotSpecificType==='fatality_line'?diseases[x].deadCount/diseases[x].confirmedCount:diseases[x].deadCount,lang:lang,name:diseases[x][lang],years:diseases[x].years}]});});return{plotData:plotData};};var generatePlotDataSubregionFatality=function generatePlotDataSubregionFatality(_ref10){var data=_ref10.data,currentRegion=_ref10.currentRegion,date=_ref10.date,lang=_ref10.lang,darkMode=_ref10.darkMode,plotSpecificType=_ref10.plotSpecificType;var currentData=getCurrentData(data,currentRegion);var plotData=[];var maxValue=0;var minValue=100000;getSubregions(data,currentRegion).reverse().filter(function(region){return currentData[region]['confirmedCount'][date]>0&&currentData[region]['deadCount'][date]>=0&&(currentData[region]['deadCount'][date]>0||plotSpecificType==='subregion_fatality'||plotSpecificType==='subregion_fatality_only');}).forEach(function(region,i){var confirmedCount=currentData[region].confirmedCount[date];var deadCount=currentData[region].deadCount[date];maxValue=Math.max(maxValue,confirmedCount);minValue=Math.min(minValue,confirmedCount);plotData.push({id:region,color:darkMode?'rgba(222,73,104,0.6)':'rgba(183,55,121,0.5)',data:[{x:confirmedCount,y:plotSpecificType==='subregion_fatality'||plotSpecificType==='subregion_fatality_only'?deadCount/confirmedCount:deadCount,regionName:lang==='zh'?region:currentData[region].ENGLISH,lang:lang}]});});if(plotSpecificType==='subregion_fatality'||plotSpecificType==='subregion_fatality2')Object.keys(diseases).forEach(function(x){plotData.push({id:x,color:'rgba(0,0,0,0)',data:[{x:diseases[x].confirmedCount,y:plotSpecificType==='subregion_fatality'?diseases[x].deadCount/diseases[x].confirmedCount:diseases[x].deadCount,lang:lang,name:diseases[x][lang],years:diseases[x].years,noClick:true}]});});var _getLogTickValues=getLogTickValues(minValue,maxValue),logTickMin=_getLogTickValues.logTickMin,logTickMax=_getLogTickValues.logTickMax;return{plotData:plotData,logTickMin:logTickMin,logTickMax:logTickMax};};var generatePlotDataSubregion=function generatePlotDataSubregion(_ref11){var data=_ref11.data,date=_ref11.date,currentRegion=_ref11.currentRegion,lang=_ref11.lang,darkMode=_ref11.darkMode,playing=_ref11.playing,scale=_ref11.scale,metric=_ref11.metric,plotSpecificType=_ref11.plotSpecificType,plotDetails=_ref11.plotDetails,plotDates=_ref11.plotDates,fullPlot=_ref11.fullPlot;var currentData=getCurrentData(data,currentRegion);var maxValue=0;var minValue=100000;var numOfRegions=!fullPlot?6:10;var subregions=playing?getSubregions(data,currentRegion,metric,numOfRegions):getSubregions(data,currentRegion,metric,numOfRegions,date);var plotData=subregions.map(function(region,i){var counts=currentData[region][metric];var id=lang==='zh'?region:currentData[region].ENGLISH;return{id:simplifyName(id,lang),fullId:id,name:region,color:darkMode?\"var(--primary-color-\".concat(i<7?i:i+1,\")\"):\"var(--primary-color-\".concat(10-i,\")\"),data:Object.keys(counts).filter(function(d){return!playing||parseDate(d)<=parseDate(date);}).map(function(d){if(counts[d]>maxValue)maxValue=counts[d];if(counts[d]<minValue)minValue=counts[d];return scale==='linear'||counts[d]>0?{x:d,y:counts[d],lang:lang}:null;}).filter(function(x){return x!=null;})};}).reverse();if(['subregion_new','subregion_new_shifted_10','subregion_new_shifted_100'].includes(plotSpecificType))plotData=convertTotalToNew(plotData);plotData=calcMovingAverage(plotData,plotDetails.movingAverage);plotData=applyDateRange(plotData,plotDates);return _objectSpread({plotData:plotData},getTickValues(scale,plotSpecificType,fullPlot,minValue,maxValue));};var generatePlotDataSubregionShifted=function generatePlotDataSubregionShifted(params){var scale=params.scale,plotSpecificType=params.plotSpecificType,plotDetails=params.plotDetails,fullPlot=params.fullPlot;var _generatePlotDataSubr=generatePlotDataSubregion(params),plotData=_generatePlotDataSubr.plotData;var shifted=parseInt(plotDetails.shifted,10);var maxValue=0;var minValue=100000;plotData.forEach(function(x){var firstIdx=x.data.findIndex(function(point){return point.y>=shifted;});if(firstIdx===-1){x.data=[];}else{x.data=x.data.slice(firstIdx).map(function(point,i){return _objectSpread(_objectSpread({},point),{},{date:point.x,x:i});});}maxValue=x.data.reduce(function(s,point){return Math.max(s,point.y);},maxValue);minValue=x.data.reduce(function(s,point){return Math.min(s,point.y);},minValue);});plotData=plotData.filter(function(x){return x.data.length>0;});return _objectSpread({plotData:plotData},getTickValues(scale,plotSpecificType,fullPlot,minValue,maxValue));};var getCurrentData=function getCurrentData(data,currentRegion){var currentData=currentRegion.length===1&&currentRegion[0]===str.GLOBAL_ZH?data:getDataFromRegion(data,currentRegion);return currentData;};// convert cumulative dataset to daily increasement dataset\nvar convertTotalToNew=function convertTotalToNew(plotData){plotData.forEach(function(metricData){metricData.data=metricData.data.reduce(function(s,v,i){return[].concat(_toConsumableArray(s),[metricData.data[i-1]?_objectSpread(_objectSpread({},v),{},{y:v.y-metricData.data[i-1].y}):v]);},[]);});return plotData;};// moving averages\nvar calcMovingAverage=function calcMovingAverage(plotData,days){if(days==='3d'){plotData.forEach(function(metricData){metricData.data=metricData.data.reduce(function(s,v,i){var newY=v.y;if(metricData.data[i-1]&&metricData.data[i+1]){newY=(metricData.data[i-1].y+v.y+metricData.data[i+1].y)/3;}return[].concat(_toConsumableArray(s),[_objectSpread(_objectSpread({},v),{},{y:newY})]);},[]);});}else if(days==='5d'){plotData.forEach(function(metricData){metricData.data=metricData.data.reduce(function(s,v,i){var newY=v.y;if(metricData.data[i-1]&&metricData.data[i-2]&&metricData.data[i+1]&&metricData.data[i+2]){newY=(metricData.data[i-2].y+metricData.data[i-1].y+v.y+metricData.data[i+1].y+metricData.data[i+2].y)/5;}else if(metricData.data[i-1]&&metricData.data[i+1]){newY=(metricData.data[i-1].y+v.y+metricData.data[i+1].y)/3;}return[].concat(_toConsumableArray(s),[_objectSpread(_objectSpread({},v),{},{y:newY})]);},[]);});}return plotData;};// apply date range\nvar applyDateRange=function applyDateRange(plotData,plotDates){plotData.forEach(function(p){p.data=p.data.filter(function(x){return parseDate(x.x)<=parseDate(plotDates[1])&&parseDate(x.x)>=parseDate(plotDates[0]);});});return plotData;};// data from top N subregions\nvar getSubregions=function getSubregions(data,currentRegion){var metric=arguments.length>2&&arguments[2]!==undefined?arguments[2]:'confirmedCount';var topN=arguments.length>3&&arguments[3]!==undefined?arguments[3]:null;var date=arguments.length>4&&arguments[4]!==undefined?arguments[4]:null;var currentData=getCurrentData(data,currentRegion);var subregions=Object.keys(currentData).filter(function(region){return!['confirmedCount','deadCount','curedCount','ENGLISH',str.GLOBAL_ZH].includes(region);}).sort(function(a,b){var aCounts=Math.max.apply(Math,_toConsumableArray(Object.values(currentData[a][metric])));var bCounts=Math.max.apply(Math,_toConsumableArray(Object.values(currentData[b][metric])));if(date!=null){aCounts=currentData[a][metric][date]?currentData[a][metric][date]:0;bCounts=currentData[b][metric][date]?currentData[b][metric][date]:0;}return aCounts<=bCounts?1:-1;});// top affected subregions\nreturn topN!=null?subregions.filter(function(region,i){return i<=topN-1&&Math.max.apply(Math,_toConsumableArray(Object.values(currentData[region][metric])))!==0;}):subregions;};var getLogTickValues=function getLogTickValues(minValue,maxValue){var logTickMin=minValue<=maxValue?Math.max(Math.pow(10,Math.floor(Math.log10(minValue))),1):1;var logTickMax=minValue<=maxValue?Math.max(Math.pow(10,Math.ceil(Math.log10(maxValue))),10):1;var tickValues=_toConsumableArray(Array(Math.log10(logTickMax/logTickMin)+1).keys()).map(function(x){return Math.pow(10,x)*logTickMin;});return{tickValues:tickValues,logTickMin:logTickMin,logTickMax:logTickMax};};var getTickValues=function getTickValues(scale,plotSpecificType,fullPlot,minValue,maxValue){return scale==='log'&&plotSpecificTypes[plotSpecificType].log?getLogTickValues(minValue,maxValue):{tickValues:fullPlot?10:5,logTickMin:1,logTickMax:1};};var generatePlotDataFunc={total:generatePlotDataTotal,new:generatePlotDataNew,growth_total:generatePlotDataGrowthRate,growth_new:generatePlotDataGrowthRate,fatality_recovery:generatePlotDataRate,one_vs_rest:generatePlotDataOneVsRest,one_vs_rest_new:generatePlotDataOneVsRest,most_affected_subregions:generatePlotDataSubregionRankings,most_affected_subregions_new:generatePlotDataSubregionRankings,subregion_active_stream:generatePlotDataSubregionStream,fatality_line:generatePlotDataFatalityLine,fatality_line2:generatePlotDataFatalityLine,fatality_line_only:generatePlotDataFatalityLine,fatality_line2_only:generatePlotDataFatalityLine,doubling_time:generatePlotDataDoublingTime,r0:generatePlotDataR0,subregion_fatality:generatePlotDataSubregionFatality,subregion_fatality2:generatePlotDataSubregionFatality,subregion_fatality_only:generatePlotDataSubregionFatality,subregion_fatality2_only:generatePlotDataSubregionFatality,subregion_total:generatePlotDataSubregion,subregion_new:generatePlotDataSubregion,subregion_total_stream:generatePlotDataSubregionStream,subregion_new_stream:generatePlotDataSubregionStream,subregion_total_shifted_100:generatePlotDataSubregionShifted,subregion_new_shifted_100:generatePlotDataSubregionShifted,subregion_total_shifted_10:generatePlotDataSubregionShifted,subregion_new_shifted_10:generatePlotDataSubregionShifted};","map":{"version":3,"sources":["/Users/jonchristie/Desktop/2020data/src/utils/plot_data.js"],"names":["getDataFromRegion","metricText","parseDate","simplifyName","str","plotSpecificTypes","i18n","diseases","generatePlotData","params","generatePlotDataFunc","plotSpecificType","metricColors","confirmedCount","deadCount","curedCount","metricColorsDark","generatePlotDataTotal","data","date","currentRegion","lang","darkMode","playing","scale","plotDetails","plotDates","fullPlot","fullData","maxValue","minValue","plotData","map","metric","counts","id","color","Object","keys","sort","a","b","filter","d","x","y","calcMovingAverage","movingAverage","applyDateRange","getTickValues","generatePlotDataNew","convertTotalToNew","generatePlotDataGrowthRate","forEach","metricData","reduce","s","v","i","generatePlotDataDoublingTime","point","Math","log","generatePlotDataR0","t_incubation","t_infectious","generatePlotDataRate","confirmedCounts","metrics","recoveryRate","newMetric","count","generatePlotDataOneVsRest","currentData","regionName","length","ENGLISH","parentRegion","GLOBAL_ZH","slice","parentData","parentCounts","parentRegionName","parentPlotData","REST","currentPlotData","push","generatePlotDataSubregionRankings","getCurrentData","subregions","getSubregions","regionIndices","dates","region","Set","dd","fullId","name","regionSkipped","regionCounts","generatePlotDataSubregionStream","sortBy","numOfRegions","subregionsData","plotKeys","OTHERS","reverse","subregionCounts","remainingConfirmed","max","otherConfirmedCount","otherDeadCount","otherCuredCount","includes","confirmedCountPrevious","deadCountPrevious","curedCountPrevious","otherCount","generatePlotDataFatalityLine","cfr","years","generatePlotDataSubregionFatality","min","noClick","getLogTickValues","logTickMin","logTickMax","generatePlotDataSubregion","generatePlotDataSubregionShifted","shifted","parseInt","firstIdx","findIndex","days","newY","p","topN","aCounts","values","bCounts","floor","log10","ceil","tickValues","Array","total","new","growth_total","growth_new","fatality_recovery","one_vs_rest","one_vs_rest_new","most_affected_subregions","most_affected_subregions_new","subregion_active_stream","fatality_line","fatality_line2","fatality_line_only","fatality_line2_only","doubling_time","r0","subregion_fatality","subregion_fatality2","subregion_fatality_only","subregion_fatality2_only","subregion_total","subregion_new","subregion_total_stream","subregion_new_stream","subregion_total_shifted_100","subregion_new_shifted_100","subregion_total_shifted_10","subregion_new_shifted_10"],"mappings":"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","sourcesContent":["import { getDataFromRegion, metricText, parseDate, simplifyName } from './utils'\nimport * as str from './strings'\nimport { plotSpecificTypes } from './plot_types'\nimport i18n from '../data/i18n.yml'\nimport diseases from '../data/other_diseases_stats.yml'\n\nexport const generatePlotData = (params) => generatePlotDataFunc[params.plotSpecificType](params)\n\nconst metricColors = {\n    confirmedCount: 'var(--primary-color-4)',\n    deadCount: 'var(--primary-color-10)',\n    curedCount: 'var(--primary-color-2)'\n}\n\nconst metricColorsDark = {\n    confirmedCount: 'var(--primary-color-4)',\n    deadCount: 'var(--lighter-grey)',\n    curedCount: 'var(--primary-color-2)'\n}\n\nconst generatePlotDataTotal = (\n    { data, date, currentRegion, lang, darkMode, playing, scale, plotSpecificType, plotDetails, plotDates, fullPlot },\n    fullData = false\n) => {\n    let maxValue = 0\n    let minValue = 100000\n\n    let plotData = [ 'deadCount', 'curedCount', 'confirmedCount' ].map((metric) => {\n        const counts = getDataFromRegion(data, currentRegion)[metric]\n        return {\n            id: metricText[metric][lang],\n            color: darkMode ? metricColorsDark[metric] : metricColors[metric],\n            data: Object.keys(counts)\n                .sort((a, b) => (parseDate(a) > parseDate(b) ? 1 : -1))\n                .filter((d) => !playing || parseDate(d) <= parseDate(date))\n                .map((d) => {\n                    if (counts[d] > maxValue) maxValue = counts[d]\n                    if (counts[d] < minValue) minValue = counts[d]\n\n                    return scale === 'linear' || counts[d] > 0\n                        ? {\n                              x: d,\n                              y: counts[d]\n                          }\n                        : null\n                })\n                .filter((x) => x != null)\n        }\n    })\n\n    plotData = calcMovingAverage(plotData, plotDetails.movingAverage)\n    if (!fullData) plotData = applyDateRange(plotData, plotDates)\n\n    return { plotData, ...getTickValues(scale, plotSpecificType, fullPlot, minValue, maxValue) }\n}\n\nconst generatePlotDataNew = (params, fullData = false) => {\n    let { plotData } = generatePlotDataTotal(params, true)\n\n    plotData = convertTotalToNew(plotData)\n    if (!fullData) plotData = applyDateRange(plotData, params.plotDates)\n\n    return { plotData }\n}\n\nconst generatePlotDataGrowthRate = (params) => {\n    let { plotData } =\n        params.plotSpecificType !== 'growth_new'\n            ? generatePlotDataTotal(params, true)\n            : generatePlotDataNew(params, true)\n    const metric = params.metric\n\n    plotData.forEach((metricData) => {\n        metricData.data = metricData.data.reduce(\n            (s, v, i) => [\n                ...s,\n                metricData.data[i - 1] && metricData.data[i - 1].y > 0\n                    ? { ...v, y: (v.y - metricData.data[i - 1].y) / metricData.data[i - 1].y }\n                    : { ...v, y: 0 }\n            ],\n            []\n        )\n    })\n\n    if (metric === 'confirmedCount') plotData = [ plotData[2] ]\n    if (metric === 'curedCount') plotData = [ plotData[1] ]\n    if (metric === 'deadCount') plotData = [ plotData[0] ]\n\n    plotData = applyDateRange(plotData, params.plotDates)\n\n    return { plotData }\n}\n\nconst generatePlotDataDoublingTime = (params) => {\n    // set scale to log: temporary hack to remove zeros\n    let { plotData } = generatePlotDataGrowthRate({ ...params, scale: 'log' })\n\n    plotData[0].data = plotData[0].data\n        .map((point) => ({\n            ...point,\n            y: point.y > 0 ? Math.log(2) / Math.log(point.y + 1) : null,\n            lang: params.lang\n        }))\n        .filter((point) => point.y != null && point.y < 1000) // remove outliers\n\n    return { plotData }\n}\n\nconst generatePlotDataR0 = (params) => {\n    // set scale to log: temporary hack to remove zeros\n    let { plotData } = generatePlotDataGrowthRate({ ...params, metric: 'confirmedCount', scale: 'log' })\n\n    const t_incubation = 5\n    const t_infectious = 5\n\n    // based on SEIR model\n    // R0 = (1 + lambda * t_incubation) * (1 + lambda * t_infectious)\n    plotData[0].data = plotData[0].data\n        .map((point) => ({\n            ...point,\n            y: (1 + Math.log(point.y + 1) * t_incubation) * (1 + Math.log(point.y + 1) * t_infectious),\n            lang: params.lang\n        }))\n        .filter((point) => point.y < 20) // remove outliers\n\n    return { plotData }\n}\n\nconst generatePlotDataRate = ({ data, currentRegion, darkMode, lang, date, playing, plotDetails, plotDates }) => {\n    const confirmedCounts = getDataFromRegion(data, currentRegion)['confirmedCount']\n\n    const metrics = plotDetails.recoveryRate === 'show' ? [ 'deadCount', 'curedCount' ] : [ 'deadCount' ]\n    let plotData = metrics.map((metric) => {\n        const counts = getDataFromRegion(data, currentRegion)[metric]\n        const newMetric = metric === 'deadCount' ? 'fatalityRate' : 'recoveryRate'\n        return {\n            id: metricText[newMetric][lang],\n            color: darkMode ? metricColorsDark[metric] : metricColors[metric],\n            data: Object.keys(counts)\n                .filter((d) => !playing || parseDate(d) <= parseDate(date))\n                .map((d) => ({ d, count: confirmedCounts[d] > 0 ? counts[d] / confirmedCounts[d] : 0 }))\n                .map(({ d, count }) => {\n                    return {\n                        x: d,\n                        y: count\n                    }\n                })\n        }\n    })\n\n    plotData = calcMovingAverage(plotData, plotDetails.movingAverage)\n    plotData = applyDateRange(plotData, plotDates)\n\n    return { plotData }\n}\n\nconst generatePlotDataOneVsRest = ({\n    data,\n    currentRegion,\n    metric,\n    lang,\n    date,\n    playing,\n    scale,\n    plotSpecificType,\n    plotDetails,\n    plotDates,\n    fullPlot\n}) => {\n    let maxValue = 0\n    let minValue = 100000\n\n    const currentData = getDataFromRegion(data, currentRegion)\n    const counts = currentData[metric]\n    let regionName = lang === 'zh' ? currentRegion[currentRegion.length - 1] : currentData.ENGLISH\n    regionName = simplifyName(regionName, lang)\n\n    const parentRegion =\n        currentRegion.length === 1 ? [ str.GLOBAL_ZH ] : currentRegion.slice(0, currentRegion.length - 1)\n    const parentData = getDataFromRegion(data, parentRegion)\n    const parentCounts = parentData[metric]\n    let parentRegionName = lang === 'zh' ? parentRegion[parentRegion.length - 1] : parentData.ENGLISH\n    parentRegionName = simplifyName(parentRegionName, lang)\n\n    let plotData = []\n\n    const parentPlotData = {\n        id: lang === 'zh' ? `${parentRegionName} (${i18n.REST[lang]})` : `${i18n.REST[lang]} of ${parentRegionName}`,\n        color: 'var(--primary-color-4)',\n        data: Object.keys(parentCounts)\n            .filter((d) => !playing || parseDate(d) <= parseDate(date))\n            .map((d) => {\n                if (counts[d] == null) return null\n\n                if (parentCounts[d] - counts[d] > maxValue) maxValue = parentCounts[d] - counts[d]\n                if (parentCounts[d] - counts[d] < minValue) minValue = parentCounts[d] - counts[d]\n\n                return scale === 'linear' || parentCounts[d] - counts[d] > 0\n                    ? {\n                          x: d,\n                          y: parentCounts[d] - counts[d]\n                      }\n                    : null\n            })\n            .filter((x) => x != null)\n    }\n\n    const currentPlotData = {\n        id: regionName,\n        color: 'var(--primary-color-2)',\n        data: Object.keys(counts)\n            .filter((d) => !playing || parseDate(d) <= parseDate(date))\n            .map((d) => {\n                if (parentCounts[d] == null) return null\n\n                if (counts[d] > maxValue) maxValue = counts[d]\n                if (counts[d] < minValue) minValue = counts[d]\n\n                return scale === 'linear' || counts[d] > 0\n                    ? {\n                          x: d,\n                          y: counts[d]\n                      }\n                    : null\n            })\n            .filter((x) => x != null)\n    }\n\n    plotData.push(parentPlotData)\n    plotData.push(currentPlotData)\n    if (plotSpecificType === 'one_vs_rest_new') {\n        plotData = convertTotalToNew(plotData)\n    }\n\n    plotData = calcMovingAverage(plotData, plotDetails.movingAverage)\n    plotData = applyDateRange(plotData, plotDates)\n\n    return { plotData, ...getTickValues(scale, plotSpecificType, fullPlot, minValue, maxValue) }\n}\n\nconst generatePlotDataSubregionRankings = ({\n    data,\n    currentRegion,\n    metric,\n    lang,\n    darkMode,\n    playing,\n    date,\n    plotDates,\n    plotSpecificType\n}) => {\n    const currentData = getCurrentData(data, currentRegion)\n    const subregions = playing\n        ? getSubregions(data, currentRegion, metric, 10)\n        : getSubregions(data, currentRegion, metric, 10, date)\n\n    let regionIndices = {}\n    let dates = []\n\n    let plotData = subregions\n        .map((region, i) => {\n            dates = [ ...dates, ...Object.keys(currentData[region][metric]) ]\n            dates = [ ...new Set(dates) ]\n            regionIndices[region] = i\n            return region\n        })\n        .map((region, i) => {\n            const id = lang === 'zh' ? region : currentData[region].ENGLISH\n            const dd = Object.keys(currentData[region][metric])\n                .sort((a, b) => (parseDate(a) > parseDate(b) ? 1 : -1))\n                .filter((d) => parseDate(d) <= parseDate(date))\n                .filter((d) => parseDate(d) <= parseDate(plotDates[1]) && parseDate(d) >= parseDate(plotDates[0]))\n            const counts = dd.map((d) => currentData[region][metric][d])\n            let count = counts[counts.length - 1]\n            if (plotSpecificType === 'most_affected_subregions_new')\n                count =\n                    counts.length >= 2\n                        ? counts[counts.length - 1] - counts[counts.length - 2]\n                        : counts[counts.length - 1]\n            return {\n                id: simplifyName(id, lang),\n                fullId: id,\n                name: region,\n                color: darkMode ? `var(--primary-color-${i < 7 ? i : i + 1})` : `var(--primary-color-${10 - i})`,\n                count,\n                data: []\n            }\n        })\n\n    dates = dates.sort((a, b) => (parseDate(a) > parseDate(b) ? 1 : -1))\n\n    let regionSkipped = {}\n    dates\n        .filter((d) => parseDate(d) <= parseDate(date))\n        .filter((d) => parseDate(d) <= parseDate(plotDates[1]) && parseDate(d) >= parseDate(plotDates[0]))\n        .forEach((d, i) => {\n            let regionCounts = []\n            plotData.forEach((region) => {\n                let counts = currentData[region.name][metric][d] ? currentData[region.name][metric][d] : 0\n                if (plotSpecificType === 'most_affected_subregions_new') {\n                    if (i > 0 && currentData[region.name][metric][dates[i - 1]])\n                        counts = counts - currentData[region.name][metric][dates[i - 1]]\n                }\n                regionCounts.push({\n                    region: region.name,\n                    counts\n                })\n            })\n            regionCounts = regionCounts.sort((a, b) => (a.counts <= b.counts ? 1 : -1))\n\n            regionCounts.forEach((region, i) => {\n                if (region.counts === 0 && regionSkipped[region.region] == null) {\n                    plotData[regionIndices[region.region]].data.push({\n                        x: d,\n                        y: null\n                    })\n                } else {\n                    regionSkipped[region.region] = true\n                    plotData[regionIndices[region.region]].data.push({\n                        x: d,\n                        y: i + 1\n                    })\n                }\n            })\n        })\n\n    return { plotData, dates }\n}\n\nconst generatePlotDataSubregionStream = ({\n    data,\n    currentRegion,\n    lang,\n    playing,\n    date,\n    plotDates,\n    metric,\n    plotSpecificType,\n    fullPlot\n}) => {\n    const currentData = getCurrentData(data, currentRegion)\n    let dates = []\n    let plotData = []\n\n    const sortBy = plotSpecificType === 'subregion_active_stream' ? 'confirmedCount' : metric\n    const numOfRegions = !fullPlot ? 5 : 9\n    let subregionsData = getSubregions(data, currentRegion, sortBy, numOfRegions)\n        .map((region) => {\n            dates = [ ...dates, ...Object.keys(currentData[region]['confirmedCount']) ]\n            dates = [ ...new Set(dates) ]\n            return region\n        })\n        .map((region) => {\n            const id = lang === 'zh' ? region : currentData[region].ENGLISH\n            return {\n                id: simplifyName(id, lang),\n                fullId: id,\n                name: region\n            }\n        })\n\n    let plotKeys = subregionsData.map((x) => x.id)\n\n    // at least (numOfRegions + 1) subregions\n    if (Object.keys(currentData).length >= numOfRegions + 5) plotKeys = [ ...plotKeys, i18n.OTHERS[lang] ]\n    plotKeys = plotKeys.reverse()\n\n    dates = dates.sort((a, b) => (parseDate(a) > parseDate(b) ? 1 : -1))\n    dates = dates.filter((d) => parseDate(d) <= parseDate(plotDates[1]) && parseDate(d) >= parseDate(plotDates[0]))\n\n    // no subregions\n    if (subregionsData.length === 0) {\n        dates = Object.keys(currentData['confirmedCount']).sort((a, b) => (parseDate(a) > parseDate(b) ? 1 : -1))\n        let id = lang === 'zh' ? currentRegion[currentRegion.length - 1] : currentData.ENGLISH\n        id = simplifyName(id, lang)\n        plotKeys = [ id ]\n    }\n\n    dates.filter((d) => !playing || parseDate(d) <= parseDate(date)).forEach((d, i) => {\n        let subregionCounts = {}\n        subregionsData.forEach((region) => {\n            if (plotSpecificType === 'subregion_active_stream') {\n                const confirmedCount = currentData[region.name]['confirmedCount'][d]\n                    ? currentData[region.name]['confirmedCount'][d]\n                    : 0\n                const deadCount = currentData[region.name]['deadCount'][d]\n                    ? currentData[region.name]['deadCount'][d]\n                    : 0\n                const curedCount = currentData[region.name]['curedCount'][d]\n                    ? currentData[region.name]['curedCount'][d]\n                    : 0\n                const remainingConfirmed = Math.max(confirmedCount - deadCount - curedCount, 0)\n                subregionCounts[region.id] = remainingConfirmed\n            } else {\n                let count = currentData[region.name][metric][d] ? currentData[region.name][metric][d] : 0\n                if (plotSpecificType === 'subregion_new_stream' && currentData[region.name][metric][dates[i - 1]])\n                    count -= currentData[region.name][metric][dates[i - 1]]\n                subregionCounts[region.id] = count\n            }\n        })\n\n        let otherConfirmedCount = 0\n        let otherDeadCount = 0\n        let otherCuredCount = 0\n\n        // compute number of remaining confirmed cases from non-top-5 subregions\n        Object.keys(currentData)\n            .filter(\n                (region) => ![ 'confirmedCount', 'deadCount', 'curedCount', 'ENGLISH', str.GLOBAL_ZH ].includes(region)\n            )\n            .filter((region) => !subregionsData.map((x) => x.name).includes(region))\n            .forEach((region) => {\n                const confirmedCount = currentData[region]['confirmedCount'][d]\n                    ? currentData[region]['confirmedCount'][d]\n                    : 0\n                const deadCount = currentData[region]['deadCount'][d] ? currentData[region]['deadCount'][d] : 0\n                const curedCount = currentData[region]['curedCount'][d] ? currentData[region]['curedCount'][d] : 0\n                otherConfirmedCount += confirmedCount\n                otherDeadCount += deadCount\n                otherCuredCount += curedCount\n                if (plotSpecificType === 'subregion_new_stream') {\n                    const confirmedCountPrevious = currentData[region]['confirmedCount'][dates[i - 1]]\n                        ? currentData[region]['confirmedCount'][dates[i - 1]]\n                        : 0\n                    const deadCountPrevious = currentData[region]['deadCount'][dates[i - 1]]\n                        ? currentData[region]['deadCount'][dates[i - 1]]\n                        : 0\n                    const curedCountPrevious = currentData[region]['curedCount'][dates[i - 1]]\n                        ? currentData[region]['curedCount'][dates[i - 1]]\n                        : 0\n                    otherConfirmedCount -= confirmedCountPrevious\n                    otherDeadCount -= deadCountPrevious\n                    otherCuredCount -= curedCountPrevious\n                }\n            })\n        let otherCount = 0\n        if (metric === 'confirmedCount') otherCount = Math.max(otherConfirmedCount, 0)\n        if (metric === 'deadCount') otherCount = Math.max(otherDeadCount, 0)\n        if (metric === 'curedCount') otherCount = Math.max(otherCuredCount, 0)\n        if (plotSpecificType === 'subregion_active_stream')\n            otherCount = Math.max(otherConfirmedCount - otherDeadCount - otherCuredCount, 0)\n\n        if (Object.keys(currentData).length >= 10) subregionCounts[i18n.OTHERS[lang]] = otherCount\n\n        // no subregions\n        if (subregionsData.length === 0) {\n            const confirmedCount = currentData['confirmedCount'][d] ? currentData['confirmedCount'][d] : 0\n            const deadCount = currentData['deadCount'][d] ? currentData['deadCount'][d] : 0\n            const curedCount = currentData['curedCount'][d] ? currentData['curedCount'][d] : 0\n            const remainingConfirmed = Math.max(confirmedCount - deadCount - curedCount, 0)\n            let id = lang === 'zh' ? currentRegion[currentRegion.length - 1] : currentData.ENGLISH\n            id = simplifyName(id, lang)\n            subregionCounts[id] =\n                plotSpecificType === 'subregion_active_stream'\n                    ? remainingConfirmed\n                    : Math.max(currentData[metric][d] ? currentData[metric][d] : 0, 0)\n        }\n        plotData.push(subregionCounts)\n    })\n    return { plotData, dates, plotKeys }\n}\n\nconst generatePlotDataFatalityLine = ({ data, currentRegion, date, darkMode, lang, plotSpecificType, plotDates }) => {\n    const confirmedCount = getDataFromRegion(data, currentRegion)['confirmedCount']\n    const deadCount = getDataFromRegion(data, currentRegion)['deadCount']\n    const plotData = [\n        {\n            id: 'fatality-line',\n            color: darkMode ? 'var(--primary-color-2)' : 'var(--primary-color-5)',\n            data: Object.keys(confirmedCount)\n                .filter(\n                    (d) =>\n                        parseDate(d) <= parseDate(date) &&\n                        confirmedCount[d] > 0 &&\n                        (deadCount[d] > 0 ||\n                            plotSpecificType === 'fatality_line' ||\n                            plotSpecificType === 'fatality_line_only')\n                )\n                .filter((d) => parseDate(d) <= parseDate(plotDates[1]) && parseDate(d) >= parseDate(plotDates[0]))\n                .map((d) => ({ d, cfr: deadCount[d] != null ? deadCount[d] / confirmedCount[d] : 0 }))\n                .map(({ d, cfr }) => {\n                    return {\n                        x: confirmedCount[d],\n                        y:\n                            plotSpecificType === 'fatality_line' || plotSpecificType === 'fatality_line_only'\n                                ? cfr\n                                : deadCount[d],\n                        date: d,\n                        lang\n                    }\n                })\n        }\n    ]\n    if (plotSpecificType === 'fatality_line' || plotSpecificType === 'fatality_line2')\n        Object.keys(diseases).forEach((x) => {\n            plotData.push({\n                id: x,\n                color: 'var(--light-grey)',\n                data: [\n                    {\n                        x: diseases[x].confirmedCount,\n                        y:\n                            plotSpecificType === 'fatality_line'\n                                ? diseases[x].deadCount / diseases[x].confirmedCount\n                                : diseases[x].deadCount,\n                        lang,\n                        name: diseases[x][lang],\n                        years: diseases[x].years\n                    }\n                ]\n            })\n        })\n    return { plotData }\n}\n\nconst generatePlotDataSubregionFatality = ({ data, currentRegion, date, lang, darkMode, plotSpecificType }) => {\n    const currentData = getCurrentData(data, currentRegion)\n    let plotData = []\n    let maxValue = 0\n    let minValue = 100000\n\n    getSubregions(data, currentRegion)\n        .reverse()\n        .filter(\n            (region) =>\n                currentData[region]['confirmedCount'][date] > 0 &&\n                currentData[region]['deadCount'][date] >= 0 &&\n                (currentData[region]['deadCount'][date] > 0 ||\n                    plotSpecificType === 'subregion_fatality' ||\n                    plotSpecificType === 'subregion_fatality_only')\n        )\n        .forEach((region, i) => {\n            const confirmedCount = currentData[region].confirmedCount[date]\n            const deadCount = currentData[region].deadCount[date]\n            maxValue = Math.max(maxValue, confirmedCount)\n            minValue = Math.min(minValue, confirmedCount)\n\n            plotData.push({\n                id: region,\n                color: darkMode ? 'rgba(222,73,104,0.6)' : 'rgba(183,55,121,0.5)',\n                data: [\n                    {\n                        x: confirmedCount,\n                        y:\n                            plotSpecificType === 'subregion_fatality' || plotSpecificType === 'subregion_fatality_only'\n                                ? deadCount / confirmedCount\n                                : deadCount,\n                        regionName: lang === 'zh' ? region : currentData[region].ENGLISH,\n                        lang\n                    }\n                ]\n            })\n        })\n\n    if (plotSpecificType === 'subregion_fatality' || plotSpecificType === 'subregion_fatality2')\n        Object.keys(diseases).forEach((x) => {\n            plotData.push({\n                id: x,\n                color: 'rgba(0,0,0,0)',\n                data: [\n                    {\n                        x: diseases[x].confirmedCount,\n                        y:\n                            plotSpecificType === 'subregion_fatality'\n                                ? diseases[x].deadCount / diseases[x].confirmedCount\n                                : diseases[x].deadCount,\n                        lang,\n                        name: diseases[x][lang],\n                        years: diseases[x].years,\n                        noClick: true\n                    }\n                ]\n            })\n        })\n\n    const { logTickMin, logTickMax } = getLogTickValues(minValue, maxValue)\n\n    return { plotData, logTickMin, logTickMax }\n}\n\nconst generatePlotDataSubregion = ({\n    data,\n    date,\n    currentRegion,\n    lang,\n    darkMode,\n    playing,\n    scale,\n    metric,\n    plotSpecificType,\n    plotDetails,\n    plotDates,\n    fullPlot\n}) => {\n    const currentData = getCurrentData(data, currentRegion)\n    let maxValue = 0\n    let minValue = 100000\n\n    const numOfRegions = !fullPlot ? 6 : 10\n    const subregions = playing\n        ? getSubregions(data, currentRegion, metric, numOfRegions)\n        : getSubregions(data, currentRegion, metric, numOfRegions, date)\n\n    let plotData = subregions\n        .map((region, i) => {\n            const counts = currentData[region][metric]\n            const id = lang === 'zh' ? region : currentData[region].ENGLISH\n            return {\n                id: simplifyName(id, lang),\n                fullId: id,\n                name: region,\n                color: darkMode ? `var(--primary-color-${i < 7 ? i : i + 1})` : `var(--primary-color-${10 - i})`,\n                data: Object.keys(counts)\n                    .filter((d) => !playing || parseDate(d) <= parseDate(date))\n                    .map((d) => {\n                        if (counts[d] > maxValue) maxValue = counts[d]\n                        if (counts[d] < minValue) minValue = counts[d]\n\n                        return scale === 'linear' || counts[d] > 0\n                            ? {\n                                  x: d,\n                                  y: counts[d],\n                                  lang\n                              }\n                            : null\n                    })\n                    .filter((x) => x != null)\n            }\n        })\n        .reverse()\n\n    if ([ 'subregion_new', 'subregion_new_shifted_10', 'subregion_new_shifted_100' ].includes(plotSpecificType))\n        plotData = convertTotalToNew(plotData)\n\n    plotData = calcMovingAverage(plotData, plotDetails.movingAverage)\n    plotData = applyDateRange(plotData, plotDates)\n\n    return { plotData, ...getTickValues(scale, plotSpecificType, fullPlot, minValue, maxValue) }\n}\n\nconst generatePlotDataSubregionShifted = (params) => {\n    const { scale, plotSpecificType, plotDetails, fullPlot } = params\n\n    let { plotData } = generatePlotDataSubregion(params)\n\n    const shifted = parseInt(plotDetails.shifted, 10)\n    let maxValue = 0\n    let minValue = 100000\n    plotData.forEach((x) => {\n        const firstIdx = x.data.findIndex((point) => point.y >= shifted)\n\n        if (firstIdx === -1) {\n            x.data = []\n        } else {\n            x.data = x.data.slice(firstIdx).map((point, i) => ({\n                ...point,\n                date: point.x,\n                x: i\n            }))\n        }\n\n        maxValue = x.data.reduce((s, point) => Math.max(s, point.y), maxValue)\n        minValue = x.data.reduce((s, point) => Math.min(s, point.y), minValue)\n    })\n\n    plotData = plotData.filter((x) => x.data.length > 0)\n\n    return { plotData, ...getTickValues(scale, plotSpecificType, fullPlot, minValue, maxValue) }\n}\n\nconst getCurrentData = (data, currentRegion) => {\n    const currentData =\n        currentRegion.length === 1 && currentRegion[0] === str.GLOBAL_ZH ? data : getDataFromRegion(data, currentRegion)\n\n    return currentData\n}\n\n// convert cumulative dataset to daily increasement dataset\nconst convertTotalToNew = (plotData) => {\n    plotData.forEach((metricData) => {\n        metricData.data = metricData.data.reduce(\n            (s, v, i) => [ ...s, metricData.data[i - 1] ? { ...v, y: v.y - metricData.data[i - 1].y } : v ],\n            []\n        )\n    })\n\n    return plotData\n}\n\n// moving averages\nconst calcMovingAverage = (plotData, days) => {\n    if (days === '3d') {\n        plotData.forEach((metricData) => {\n            metricData.data = metricData.data.reduce((s, v, i) => {\n                let newY = v.y\n                if (metricData.data[i - 1] && metricData.data[i + 1]) {\n                    newY = (metricData.data[i - 1].y + v.y + metricData.data[i + 1].y) / 3\n                }\n                return [ ...s, { ...v, y: newY } ]\n            }, [])\n        })\n    } else if (days === '5d') {\n        plotData.forEach((metricData) => {\n            metricData.data = metricData.data.reduce((s, v, i) => {\n                let newY = v.y\n                if (\n                    metricData.data[i - 1] &&\n                    metricData.data[i - 2] &&\n                    metricData.data[i + 1] &&\n                    metricData.data[i + 2]\n                ) {\n                    newY =\n                        (metricData.data[i - 2].y +\n                            metricData.data[i - 1].y +\n                            v.y +\n                            metricData.data[i + 1].y +\n                            metricData.data[i + 2].y) /\n                        5\n                } else if (metricData.data[i - 1] && metricData.data[i + 1]) {\n                    newY = (metricData.data[i - 1].y + v.y + metricData.data[i + 1].y) / 3\n                }\n                return [ ...s, { ...v, y: newY } ]\n            }, [])\n        })\n    }\n\n    return plotData\n}\n\n// apply date range\nconst applyDateRange = (plotData, plotDates) => {\n    plotData.forEach((p) => {\n        p.data = p.data.filter(\n            (x) => parseDate(x.x) <= parseDate(plotDates[1]) && parseDate(x.x) >= parseDate(plotDates[0])\n        )\n    })\n\n    return plotData\n}\n\n// data from top N subregions\nconst getSubregions = (data, currentRegion, metric = 'confirmedCount', topN = null, date = null) => {\n    const currentData = getCurrentData(data, currentRegion)\n\n    const subregions = Object.keys(currentData)\n        .filter((region) => ![ 'confirmedCount', 'deadCount', 'curedCount', 'ENGLISH', str.GLOBAL_ZH ].includes(region))\n        .sort((a, b) => {\n            let aCounts = Math.max(...Object.values(currentData[a][metric]))\n            let bCounts = Math.max(...Object.values(currentData[b][metric]))\n            if (date != null) {\n                aCounts = currentData[a][metric][date] ? currentData[a][metric][date] : 0\n                bCounts = currentData[b][metric][date] ? currentData[b][metric][date] : 0\n            }\n\n            return aCounts <= bCounts ? 1 : -1\n        })\n\n    // top affected subregions\n    return topN != null\n        ? subregions.filter(\n              (region, i) => i <= topN - 1 && Math.max(...Object.values(currentData[region][metric])) !== 0\n          )\n        : subregions\n}\n\nconst getLogTickValues = (minValue, maxValue) => {\n    const logTickMin = minValue <= maxValue ? Math.max(10 ** Math.floor(Math.log10(minValue)), 1) : 1\n    const logTickMax = minValue <= maxValue ? Math.max(10 ** Math.ceil(Math.log10(maxValue)), 10) : 1\n    const tickValues = [ ...Array(Math.log10(logTickMax / logTickMin) + 1).keys() ].map((x) => 10 ** x * logTickMin)\n\n    return { tickValues, logTickMin, logTickMax }\n}\n\nconst getTickValues = (scale, plotSpecificType, fullPlot, minValue, maxValue) => {\n    return scale === 'log' && plotSpecificTypes[plotSpecificType].log\n        ? getLogTickValues(minValue, maxValue)\n        : { tickValues: fullPlot ? 10 : 5, logTickMin: 1, logTickMax: 1 }\n}\n\nconst generatePlotDataFunc = {\n    total: generatePlotDataTotal,\n    new: generatePlotDataNew,\n    growth_total: generatePlotDataGrowthRate,\n    growth_new: generatePlotDataGrowthRate,\n    fatality_recovery: generatePlotDataRate,\n    one_vs_rest: generatePlotDataOneVsRest,\n    one_vs_rest_new: generatePlotDataOneVsRest,\n    most_affected_subregions: generatePlotDataSubregionRankings,\n    most_affected_subregions_new: generatePlotDataSubregionRankings,\n    subregion_active_stream: generatePlotDataSubregionStream,\n    fatality_line: generatePlotDataFatalityLine,\n    fatality_line2: generatePlotDataFatalityLine,\n    fatality_line_only: generatePlotDataFatalityLine,\n    fatality_line2_only: generatePlotDataFatalityLine,\n    doubling_time: generatePlotDataDoublingTime,\n    r0: generatePlotDataR0,\n    subregion_fatality: generatePlotDataSubregionFatality,\n    subregion_fatality2: generatePlotDataSubregionFatality,\n    subregion_fatality_only: generatePlotDataSubregionFatality,\n    subregion_fatality2_only: generatePlotDataSubregionFatality,\n    subregion_total: generatePlotDataSubregion,\n    subregion_new: generatePlotDataSubregion,\n    subregion_total_stream: generatePlotDataSubregionStream,\n    subregion_new_stream: generatePlotDataSubregionStream,\n    subregion_total_shifted_100: generatePlotDataSubregionShifted,\n    subregion_new_shifted_100: generatePlotDataSubregionShifted,\n    subregion_total_shifted_10: generatePlotDataSubregionShifted,\n    subregion_new_shifted_10: generatePlotDataSubregionShifted\n}\n"]},"metadata":{},"sourceType":"module"}