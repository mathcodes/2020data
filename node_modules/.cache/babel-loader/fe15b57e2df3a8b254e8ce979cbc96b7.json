{"ast":null,"code":"import _toConsumableArray from\"/Users/jonchristie/Downloads/covid19-master/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/toConsumableArray\";import _objectSpread from\"/Users/jonchristie/Downloads/covid19-master/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread2\";import React from'react';import{useTable,useExpanded,useSortBy,useFilters}from'react-table';function textFilter(rows,ids,filterValue){return rows.filter(function(r){return ids.some(function(id){var value=r.values[id];return String(value).toLowerCase().includes(String(filterValue).toLowerCase());});});}// flatten filter so that the filter can match subrows\n// reference: https://github.com/uqix/reactkit-table/blob/master/src/filter/flatten.js\nfunction flatten(filter){return function(rows,ids,filterValue){var flatRows=treeToFlat(rows).map(function(r){return _objectSpread(_objectSpread({},r),{},{// or useFilters would recursively filter subRows\nsubRows:[],depth:0,xFlat:true});});return filter(flatRows,ids,filterValue);};}function treeToFlat(rows){return[].concat(_toConsumableArray(rows),_toConsumableArray(rows.map(function(r){return treeToFlat(r.subRows||[]);}).reduce(function(pre,cur){return[].concat(_toConsumableArray(pre),_toConsumableArray(cur));},[])));}var RegionFilter=function RegionFilter(placeholderText){return function(_ref){var _ref$column=_ref.column,filterValue=_ref$column.filterValue,preFilteredRows=_ref$column.preFilteredRows,setFilter=_ref$column.setFilter;return/*#__PURE__*/React.createElement(\"input\",{className:\"data-table-input\",value:filterValue||'',onChange:function onChange(e){setFilter(e.target.value||undefined);// Set undefined to remove the filter entirely\n},placeholder:placeholderText});};};export default function RawTable(props){var columns=props.columns,data=props.data,initialState=props.initialState,onRowClick=props.onRowClick,filterPlaceholder=props.filterPlaceholder;var _useTable=useTable({columns:columns,data:data,defaultColumn:{Filter:RegionFilter(filterPlaceholder),filter:flatten(textFilter)},initialState:initialState,getResetExpandedDeps:false},useFilters,useSortBy,useExpanded),getTableProps=_useTable.getTableProps,getTableBodyProps=_useTable.getTableBodyProps,headerGroups=_useTable.headerGroups,rows=_useTable.rows,prepareRow=_useTable.prepareRow;return/*#__PURE__*/React.createElement(\"div\",{className:\"data-table-wrap\"},headerGroups[0].headers[1].render('Filter'),/*#__PURE__*/React.createElement(\"table\",Object.assign({className:\"data-table\"},getTableProps()),/*#__PURE__*/React.createElement(\"thead\",null,headerGroups.map(function(headerGroup,i){return/*#__PURE__*/React.createElement(\"tr\",headerGroup.getHeaderGroupProps(),headerGroup.headers.map(function(column,j){return/*#__PURE__*/React.createElement(\"th\",column.getHeaderProps(column.getSortByToggleProps()),column.render('Header'));}));})),/*#__PURE__*/React.createElement(\"tbody\",getTableBodyProps(),rows.map(function(row,i){prepareRow(row);return/*#__PURE__*/React.createElement(\"tr\",Object.assign({id:\"table-\".concat(row.original.region)},row.getRowProps()),row.cells.map(function(cell,cellIdx){return/*#__PURE__*/React.createElement(\"td\",Object.assign({},cell.getCellProps(),{onClick:cellIdx>0?function(){return onRowClick(row);}:null}),cell.render('Cell'));}));}))),/*#__PURE__*/React.createElement(\"div\",{style:{display:'none'}},rows.length,\" regions\"));}","map":{"version":3,"sources":["/Users/jonchristie/Downloads/covid19-master/src/components/RawTable.js"],"names":["React","useTable","useExpanded","useSortBy","useFilters","textFilter","rows","ids","filterValue","filter","r","some","id","value","values","String","toLowerCase","includes","flatten","flatRows","treeToFlat","map","subRows","depth","xFlat","reduce","pre","cur","RegionFilter","placeholderText","column","preFilteredRows","setFilter","e","target","undefined","RawTable","props","columns","data","initialState","onRowClick","filterPlaceholder","defaultColumn","Filter","getResetExpandedDeps","getTableProps","getTableBodyProps","headerGroups","prepareRow","headers","render","headerGroup","i","getHeaderGroupProps","j","getHeaderProps","getSortByToggleProps","row","original","region","getRowProps","cells","cell","cellIdx","getCellProps","display","length"],"mappings":"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","sourcesContent":["import React from 'react'\nimport { useTable, useExpanded, useSortBy, useFilters } from 'react-table'\n\nfunction textFilter(rows, ids, filterValue) {\n    return rows.filter((r) =>\n        ids.some((id) => {\n            const value = r.values[id]\n            return String(value).toLowerCase().includes(String(filterValue).toLowerCase())\n        })\n    )\n}\n\n// flatten filter so that the filter can match subrows\n// reference: https://github.com/uqix/reactkit-table/blob/master/src/filter/flatten.js\nfunction flatten(filter) {\n    return function(rows, ids, filterValue) {\n        const flatRows = treeToFlat(rows).map((r) => ({\n            ...r,\n            // or useFilters would recursively filter subRows\n            subRows: [],\n            depth: 0,\n            xFlat: true\n        }))\n        return filter(flatRows, ids, filterValue)\n    }\n}\n\nfunction treeToFlat(rows) {\n    return [ ...rows, ...rows.map((r) => treeToFlat(r.subRows || [])).reduce((pre, cur) => [ ...pre, ...cur ], []) ]\n}\n\nconst RegionFilter = (placeholderText) => ({ column: { filterValue, preFilteredRows, setFilter } }) => {\n    return (\n        <input\n            className=\"data-table-input\"\n            value={filterValue || ''}\n            onChange={(e) => {\n                setFilter(e.target.value || undefined) // Set undefined to remove the filter entirely\n            }}\n            placeholder={placeholderText}\n        />\n    )\n}\n\nexport default function RawTable(props) {\n    const { columns, data, initialState, onRowClick, filterPlaceholder } = props\n\n    const { getTableProps, getTableBodyProps, headerGroups, rows, prepareRow } = useTable(\n        {\n            columns,\n            data,\n            defaultColumn: { Filter: RegionFilter(filterPlaceholder), filter: flatten(textFilter) },\n            initialState,\n            getResetExpandedDeps: false\n        },\n        useFilters,\n        useSortBy,\n        useExpanded\n    )\n\n    return (\n        <div className=\"data-table-wrap\">\n            {headerGroups[0].headers[1].render('Filter')}\n            <table className=\"data-table\" {...getTableProps()}>\n                <thead>\n                    {headerGroups.map((headerGroup, i) => (\n                        <tr {...headerGroup.getHeaderGroupProps()}>\n                            {headerGroup.headers.map((column, j) => (\n                                <th {...column.getHeaderProps(column.getSortByToggleProps())}>\n                                    {column.render('Header')}\n                                </th>\n                            ))}\n                        </tr>\n                    ))}\n                </thead>\n                <tbody {...getTableBodyProps()}>\n                    {rows.map((row, i) => {\n                        prepareRow(row)\n                        return (\n                            <tr id={`table-${row.original.region}`} {...row.getRowProps()}>\n                                {row.cells.map((cell, cellIdx) => {\n                                    return (\n                                        <td\n                                            {...cell.getCellProps()}\n                                            onClick={cellIdx > 0 ? () => onRowClick(row) : null}\n                                        >\n                                            {cell.render('Cell')}\n                                        </td>\n                                    )\n                                })}\n                            </tr>\n                        )\n                    })}\n                </tbody>\n            </table>\n            <div style={{ display: 'none' }}>{rows.length} regions</div>\n        </div>\n    )\n}\n"]},"metadata":{},"sourceType":"module"}