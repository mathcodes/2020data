{"ast":null,"code":"import addDays from 'date-fns/addDays';\nimport subDays from 'date-fns/subDays';\nimport format from 'date-fns/format';\nimport i18n from '../data/i18n.yml';\nimport * as str from './strings';\nexport const parseDate = date => {\n  const [year, month, day] = date.substr(0, 10).split('-');\n  return new Date(year, month - 1, day);\n};\nexport const nextDay = (date, startDate, endDate) => {\n  const newDay = addDays(parseDate(date), 1);\n  const lastDay = parseDate(endDate);\n  return newDay <= lastDay ? format(newDay, 'yyyy-MM-dd') : startDate;\n};\nexport const previousDay = (date, startDate, endDate) => {\n  const newDay = subDays(parseDate(date), 1);\n  const firstDay = parseDate(startDate);\n  return newDay >= firstDay ? format(newDay, 'yyyy-MM-dd') : endDate;\n};\nexport const formatDate = (date, lang) => {\n  return format(parseDate(date), i18n.DATE_FORMAT_2[lang]);\n};\nexport const isoDate = (date, endDate) => {\n  const d = new Date(date);\n  return new Date(d.getTime() - parseDate(endDate).getTimezoneOffset() * 60000).toISOString();\n};\nexport const metricText = {\n  confirmedCount: i18n.CONFIRMED,\n  deadCount: i18n.DEATHS,\n  curedCount: i18n.RECOVERED,\n  fatalityRate: i18n.FATALITY_RATE,\n  recoveryRate: i18n.RECOVERY_RATE\n};\nexport const getDataFromRegion = (data, region) => [data, ...region].reduce((s, x) => s[x]);\nexport const simplifyName = (name, lang) => {\n  let simplified = name; // remove parenthesis to save space for legend\n\n  if (lang === 'en') simplified = name.split('(')[0].trim();\n  if (lang === 'en') simplified = simplified.replace('United States of America', 'USA');\n  if (lang === 'en') simplified = simplified.replace('United Kingdom', 'UK');\n  if (lang === 'en') simplified = simplified.replace('International Conveyance', \"Int'l Conveyance\");\n  if (lang === 'en') simplified = simplified.replace(' District', '');\n  if (lang === 'en') simplified = simplified.replace(' County', '');\n  if (lang === 'zh') simplified = simplified.replace('（来自钻石公主号）', '').trim();\n  return simplified;\n};\nexport const updateDarkMode = isDarkMode => {\n  document.body.style.background = !isDarkMode ? '#fff' : 'var(--darker-grey)';\n\n  if (isDarkMode) {\n    document.body.classList.add('dark');\n  } else {\n    document.body.classList.remove('dark');\n  }\n};\nexport const generateTreeData = (obj, date, lang, simplified = true, childrenLabel = 'children', sortBy = null, rootRegion = str.GLOBAL_ZH, moreCounts = false) => {\n  const preDate = previousDay(date, '2019-09-01', '2050-01-01');\n  let data = Object.entries(obj).filter(([k, v]) => !['confirmedCount', 'deadCount', 'curedCount', 'ENGLISH', str.GLOBAL_ZH].includes(k)).map(([k, v]) => {\n    const currentRegion = rootRegion === str.GLOBAL_ZH ? k : `${rootRegion}.${k}`;\n    let newdata = {\n      name: k,\n      displayName: lang === 'zh' ? k : v.ENGLISH,\n      region: currentRegion,\n      confirmedCount: Object.keys(v.confirmedCount).length === 0 ? NaN : v.confirmedCount[date] ? v.confirmedCount[date] : 0,\n      deadCount: Object.keys(v.deadCount).length === 0 ? NaN : v.deadCount[date] ? v.deadCount[date] : 0,\n      curedCount: Object.keys(v.curedCount).length === 0 ? NaN : v.curedCount[date] ? v.curedCount[date] : 0\n    };\n\n    if (moreCounts) {\n      const preConfirmedCount = preDate in v.confirmedCount ? v.confirmedCount[preDate] : newdata.confirmedCount;\n      const preDeadCount = preDate in v.deadCount ? v.deadCount[preDate] : newdata.deadCount;\n      newdata = { ...newdata,\n        active: newdata.confirmedCount - newdata.deadCount - newdata.curedCount,\n        newConfirmed: newdata.confirmedCount - preConfirmedCount,\n        newDead: newdata.deadCount - preDeadCount,\n        fatalityRate: newdata.deadCount / newdata.confirmedCount,\n        recoveryRate: newdata.curedCount / newdata.confirmedCount\n      };\n    } // remove some regions for the simplicity of bubble plot\n\n\n    if (simplified && (k === str.LONDON_EN || obj.ENGLISH === str.NETHERLANDS_EN && k === str.NETHERLANDS_ZH || obj.ENGLISH === str.MAINLAND_CHINA_EN || obj.ENGLISH === str.ITALY_EN || obj.ENGLISH === str.PHILIPPINES_EN || obj.ENGLISH === str.LATVIA_EN || obj.ENGLISH === str.SLOVENIA_EN || obj.ENGLISH === str.US_EN)) return newdata;\n\n    if (Object.keys(v).length > 4) {\n      newdata[childrenLabel] = generateTreeData(v, date, lang, simplified, childrenLabel, sortBy, currentRegion, moreCounts);\n    }\n\n    return newdata;\n  });\n  return sortBy ? data.sort((a, b) => a[sortBy] > b[sortBy] || isNaN(b[sortBy]) ? -1 : 1) : data;\n};","map":{"version":3,"sources":["/Users/jonchristie/Desktop/2020data/src/utils/utils.js"],"names":["addDays","subDays","format","i18n","str","parseDate","date","year","month","day","substr","split","Date","nextDay","startDate","endDate","newDay","lastDay","previousDay","firstDay","formatDate","lang","DATE_FORMAT_2","isoDate","d","getTime","getTimezoneOffset","toISOString","metricText","confirmedCount","CONFIRMED","deadCount","DEATHS","curedCount","RECOVERED","fatalityRate","FATALITY_RATE","recoveryRate","RECOVERY_RATE","getDataFromRegion","data","region","reduce","s","x","simplifyName","name","simplified","trim","replace","updateDarkMode","isDarkMode","document","body","style","background","classList","add","remove","generateTreeData","obj","childrenLabel","sortBy","rootRegion","GLOBAL_ZH","moreCounts","preDate","Object","entries","filter","k","v","includes","map","currentRegion","newdata","displayName","ENGLISH","keys","length","NaN","preConfirmedCount","preDeadCount","active","newConfirmed","newDead","LONDON_EN","NETHERLANDS_EN","NETHERLANDS_ZH","MAINLAND_CHINA_EN","ITALY_EN","PHILIPPINES_EN","LATVIA_EN","SLOVENIA_EN","US_EN","sort","a","b","isNaN"],"mappings":"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","sourcesContent":["import addDays from 'date-fns/addDays'\nimport subDays from 'date-fns/subDays'\nimport format from 'date-fns/format'\nimport i18n from '../data/i18n.yml'\nimport * as str from './strings'\n\nexport const parseDate = (date) => {\n    const [ year, month, day ] = date.substr(0, 10).split('-')\n    return new Date(year, month - 1, day)\n}\n\nexport const nextDay = (date, startDate, endDate) => {\n    const newDay = addDays(parseDate(date), 1)\n    const lastDay = parseDate(endDate)\n    return newDay <= lastDay ? format(newDay, 'yyyy-MM-dd') : startDate\n}\n\nexport const previousDay = (date, startDate, endDate) => {\n    const newDay = subDays(parseDate(date), 1)\n    const firstDay = parseDate(startDate)\n    return newDay >= firstDay ? format(newDay, 'yyyy-MM-dd') : endDate\n}\n\nexport const formatDate = (date, lang) => {\n    return format(parseDate(date), i18n.DATE_FORMAT_2[lang])\n}\n\nexport const isoDate = (date, endDate) => {\n    const d = new Date(date)\n    return new Date(d.getTime() - parseDate(endDate).getTimezoneOffset() * 60000).toISOString()\n}\n\nexport const metricText = {\n    confirmedCount: i18n.CONFIRMED,\n    deadCount: i18n.DEATHS,\n    curedCount: i18n.RECOVERED,\n    fatalityRate: i18n.FATALITY_RATE,\n    recoveryRate: i18n.RECOVERY_RATE\n}\n\nexport const getDataFromRegion = (data, region) => [ data, ...region ].reduce((s, x) => s[x])\n\nexport const simplifyName = (name, lang) => {\n    let simplified = name\n    // remove parenthesis to save space for legend\n    if (lang === 'en') simplified = name.split('(')[0].trim()\n\n    if (lang === 'en') simplified = simplified.replace('United States of America', 'USA')\n    if (lang === 'en') simplified = simplified.replace('United Kingdom', 'UK')\n    if (lang === 'en') simplified = simplified.replace('International Conveyance', \"Int'l Conveyance\")\n    if (lang === 'en') simplified = simplified.replace(' District', '')\n    if (lang === 'en') simplified = simplified.replace(' County', '')\n    if (lang === 'zh') simplified = simplified.replace('（来自钻石公主号）', '').trim()\n\n    return simplified\n}\n\nexport const updateDarkMode = (isDarkMode) => {\n    document.body.style.background = !isDarkMode ? '#fff' : 'var(--darker-grey)'\n    if (isDarkMode) {\n        document.body.classList.add('dark')\n    } else {\n        document.body.classList.remove('dark')\n    }\n}\n\nexport const generateTreeData = (\n    obj,\n    date,\n    lang,\n    simplified = true,\n    childrenLabel = 'children',\n    sortBy = null,\n    rootRegion = str.GLOBAL_ZH,\n    moreCounts = false\n) => {\n    const preDate = previousDay(date, '2019-09-01', '2050-01-01')\n\n    let data = Object.entries(obj)\n        .filter(([ k, v ]) => ![ 'confirmedCount', 'deadCount', 'curedCount', 'ENGLISH', str.GLOBAL_ZH ].includes(k))\n        .map(([ k, v ]) => {\n            const currentRegion = rootRegion === str.GLOBAL_ZH ? k : `${rootRegion}.${k}`\n            let newdata = {\n                name: k,\n                displayName: lang === 'zh' ? k : v.ENGLISH,\n                region: currentRegion,\n                confirmedCount:\n                    Object.keys(v.confirmedCount).length === 0\n                        ? NaN\n                        : v.confirmedCount[date] ? v.confirmedCount[date] : 0,\n                deadCount: Object.keys(v.deadCount).length === 0 ? NaN : v.deadCount[date] ? v.deadCount[date] : 0,\n                curedCount: Object.keys(v.curedCount).length === 0 ? NaN : v.curedCount[date] ? v.curedCount[date] : 0\n            }\n\n            if (moreCounts) {\n                const preConfirmedCount =\n                    preDate in v.confirmedCount ? v.confirmedCount[preDate] : newdata.confirmedCount\n                const preDeadCount = preDate in v.deadCount ? v.deadCount[preDate] : newdata.deadCount\n\n                newdata = {\n                    ...newdata,\n                    active: newdata.confirmedCount - newdata.deadCount - newdata.curedCount,\n                    newConfirmed: newdata.confirmedCount - preConfirmedCount,\n                    newDead: newdata.deadCount - preDeadCount,\n                    fatalityRate: newdata.deadCount / newdata.confirmedCount,\n                    recoveryRate: newdata.curedCount / newdata.confirmedCount\n                }\n            }\n\n            // remove some regions for the simplicity of bubble plot\n            if (\n                simplified &&\n                (k === str.LONDON_EN ||\n                    (obj.ENGLISH === str.NETHERLANDS_EN && k === str.NETHERLANDS_ZH) ||\n                    obj.ENGLISH === str.MAINLAND_CHINA_EN ||\n                    obj.ENGLISH === str.ITALY_EN ||\n                    obj.ENGLISH === str.PHILIPPINES_EN ||\n                    obj.ENGLISH === str.LATVIA_EN ||\n                    obj.ENGLISH === str.SLOVENIA_EN ||\n                    obj.ENGLISH === str.US_EN)\n            )\n                return newdata\n\n            if (Object.keys(v).length > 4) {\n                newdata[childrenLabel] = generateTreeData(\n                    v,\n                    date,\n                    lang,\n                    simplified,\n                    childrenLabel,\n                    sortBy,\n                    currentRegion,\n                    moreCounts\n                )\n            }\n            return newdata\n        })\n\n    return sortBy ? data.sort((a, b) => (a[sortBy] > b[sortBy] || isNaN(b[sortBy]) ? -1 : 1)) : data\n}\n"]},"metadata":{},"sourceType":"module"}