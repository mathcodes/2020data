{"ast":null,"code":"var _jsxFileName = \"/Users/jonchristie/Desktop/2020data/src/components/Map.js\";\nimport React, { Component, Fragment } from 'react';\nimport { ComposableMap, ZoomableGroup, Geographies, Geography, Marker, Line } from 'react-simple-maps';\nimport { scaleSequential, scaleLog, scaleLinear } from 'd3-scale';\nimport { interpolateMagma } from 'd3-scale-chromatic';\nimport { PatternLines } from '@vx/pattern';\nimport { isMobile, isIPad13 } from 'react-device-detect';\nimport { TinyColor } from '@ctrl/tinycolor';\nimport { FaShip } from 'react-icons/fa';\nimport Toggle from 'react-toggle';\nimport 'react-toggle/style.css';\nimport maps from '../data/maps.yml';\nimport us_map from '../data/us_map.yml';\nimport transmissions from '../data/transmissions.yml';\nimport coord from '../data/transmissions_coord.yml';\nimport { getDataFromRegion, parseDate } from '../utils/utils';\nimport * as str from '../utils/strings';\nimport i18n from '../data/i18n.yml';\n\nclass Map extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      loaded: false,\n      cursor: [0, 0],\n      clicked: false,\n      showTransmissions: false,\n      usState: null\n    };\n\n    this.handleGeographyClick = region => () => {\n      if (!this.state.clicked || region == null) return;\n      this.props.regionToggle(region.split('.'));\n    };\n\n    this.onZoomEnd = (event, state) => {\n      this.props.handleMapZoomChange(state.zoom);\n    };\n\n    this.getConfig = (config, defaultConfig) => config != null ? config.split(',').map(d => parseInt(d, 10)) : defaultConfig;\n\n    this.getColorScale = isUsState => {\n      const {\n        data,\n        currentRegion,\n        scale,\n        metric,\n        darkMode\n      } = this.props;\n      const currentMap = maps[this.props.currentMap];\n      const currentScale = scale === 'linear' ? scaleLinear : scaleLog;\n      let maxCount = currentMap[`maxScale_${metric}`];\n\n      if (isUsState && metric === 'confirmedCount') {\n        const stateData = getDataFromRegion(data, currentRegion.slice(0, 2));\n        maxCount = Math.max(...Object.keys(stateData).filter(x => !['confirmedCount', 'curedCount', 'deadCount', 'ENGLISH'].includes(x)).map(county => Math.max(...Object.values(stateData[county][metric]))));\n      }\n\n      const mapScale = currentScale().domain([1, maxCount]).clamp(true);\n\n      const colorConvert = x => darkMode ? x * 0.95 + 0.05 : 0.95 - x * 0.95;\n\n      const colorScale = scaleSequential(d => {\n        if (!this.state.showTransmissions || this.props.currentMap !== str.WORLD_MAP) {\n          const color = new TinyColor(interpolateMagma(colorConvert(mapScale(d))));\n          if (!darkMode) return color.toRgbString();\n          return color.desaturate(10).toRgbString();\n        } else {\n          const greyedColor = new TinyColor(interpolateMagma(colorConvert(mapScale(d)))).desaturate(100);\n          if (!darkMode) return greyedColor.setAlpha(0.6).toRgbString(); // make the colors distinguishable from dark background\n\n          return greyedColor.getLuminance() < 0.09 ? greyedColor.darken(5).setAlpha(0.9).toRgbString() : greyedColor.lighten(5).setAlpha(0.9).toRgbString();\n        }\n      });\n      return {\n        colorScale,\n        mapScale\n      };\n    };\n\n    this.getStrokeColor = (counts, isUsState) => {\n      const {\n        colorScale,\n        mapScale\n      } = this.getColorScale(isUsState);\n      const {\n        darkMode\n      } = this.props;\n      const tinyColor = new TinyColor(colorScale(counts));\n\n      if (!darkMode) {\n        return tinyColor.isDark() ? colorScale(mapScale.invert(mapScale(counts) - 0.6)) : colorScale(mapScale.invert(mapScale(counts) + 0.3));\n      } else {\n        return tinyColor.isDark() ? colorScale(mapScale.invert(mapScale(counts) + 0.5)) : colorScale(mapScale.invert(mapScale(counts) - 0.5));\n      }\n    };\n  }\n\n  componentDidUpdate(prevProps, prevState) {\n    if (this.props.currentMap !== prevProps.currentMap || this.state.usState !== prevState.usState) {\n      this.setState({\n        loaded: false\n      });\n      setTimeout(() => {\n        this.props.tooltipRebuild();\n      }, 100);\n    }\n\n    if (this.props.currentMap === str.US_MAP2) {\n      const usState = this.props.currentRegion[1];\n\n      if (usState !== this.state.usState) {\n        this.setState({\n          usState\n        });\n      }\n    }\n  }\n\n  render() {\n    if (this.props.currentMap === str.TRANSMISSION) return /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 111,\n        columnNumber: 64\n      }\n    });\n    const currentMap = maps[this.props.currentMap];\n    const {\n      data,\n      metric,\n      date,\n      lang,\n      currentRegion,\n      mapZoom,\n      darkMode\n    } = this.props;\n    const lang_map = lang !== 'zh' ? 'en' : 'zh';\n    const isUsState = this.props.currentMap === str.US_MAP2 && this.state.usState != null && this.state.usState in us_map;\n    const center = isUsState ? us_map[this.state.usState].center.split(',').map(d => parseFloat(d)) : currentMap.center.split(',').map(d => parseFloat(d));\n    const scale = isUsState ? us_map[this.state.usState].scale : currentMap.scale;\n    const projection = isUsState ? 'geoMercator' : currentMap.projection;\n    const {\n      colorScale\n    } = this.getColorScale(isUsState);\n    const cruiseData = getDataFromRegion(data, [str.INTL_CONVEYANCE_ZH, str.DIAMOND_PRINCESS_ZH]);\n    const cruiseCounts = cruiseData[metric][date] ? cruiseData[metric][date] : 0;\n    const cruiseStrokeColor = this.getStrokeColor(cruiseCounts, isUsState);\n    const greyStrokeColor = darkMode ? 'var(--primary-color-10)' : 'var(--grey)';\n    return /*#__PURE__*/React.createElement(Fragment, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 133,\n        columnNumber: 13\n      }\n    }, this.props.currentMap === str.WORLD_MAP && /*#__PURE__*/React.createElement(\"div\", {\n      className: \"map-transmission-toggle-wrap\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 135,\n        columnNumber: 21\n      }\n    }, /*#__PURE__*/React.createElement(Toggle, {\n      className: \"map-transmission-toggle\",\n      defaultChecked: this.state.showTransmissions,\n      onChange: () => this.setState({\n        showTransmissions: !this.state.showTransmissions\n      }),\n      icons: false,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 136,\n        columnNumber: 25\n      }\n    }), /*#__PURE__*/React.createElement(\"span\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 142,\n        columnNumber: 25\n      }\n    }, i18n.TRANSMISSIONS[this.props.lang])), /*#__PURE__*/React.createElement(ComposableMap, {\n      projection: projection,\n      projectionConfig: {\n        scale: scale,\n        rotate: currentMap.rotate ? currentMap.rotate.split(',').map(x => parseInt(x, 10)) : [0, 0, 0],\n        parallels: currentMap.parallels ? currentMap.parallels.split(',').map(x => parseInt(x, 10)) : [0, 0]\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 145,\n        columnNumber: 17\n      }\n    }, /*#__PURE__*/React.createElement(PatternLines, {\n      id: \"lines\",\n      height: 6,\n      width: 6,\n      stroke: greyStrokeColor,\n      strokeWidth: 1,\n      background: darkMode ? 'var(--darker-grey)' : '#fff',\n      orientation: ['diagonal'],\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 158,\n        columnNumber: 21\n      }\n    }), /*#__PURE__*/React.createElement(PatternLines, {\n      id: \"background-lines\",\n      height: 6,\n      width: 6,\n      stroke: darkMode ? '#333' : '#ddd',\n      strokeWidth: 1,\n      background: darkMode ? 'var(--darker-grey)' : '#fff',\n      orientation: ['diagonal'],\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 167,\n        columnNumber: 21\n      }\n    }), /*#__PURE__*/React.createElement(ZoomableGroup, {\n      zoom: mapZoom,\n      onZoomEnd: this.onZoomEnd,\n      onMoveStart: (e, m) => this.setState({\n        cursor: [m.x, m.y],\n        clicked: false\n      }),\n      onMoveEnd: (e, m) => {\n        // click on desktop\n        if (Math.abs(m.x - this.state.cursor[0]) < 1 && Math.abs(m.y - this.state.cursor[1]) < 1) this.setState({\n          clicked: true\n        });\n      },\n      onTouchStart: // click on touch screens\n      isMobile || isIPad13 ? () => this.setState({\n        clicked: true\n      }) : null,\n      center: center,\n      minZoom: 0.2,\n      maxZoom: 5,\n      disableZooming: isMobile || isIPad13,\n      disablePanning: isMobile || isIPad13,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 176,\n        columnNumber: 21\n      }\n    }, ![str.WORLD_MAP, str.US_MAP].includes(this.props.currentMap) && /*#__PURE__*/React.createElement(Geographies, {\n      geography: `maps/${this.props.currentMap === str.US_MAP2 ? 'USA' : this.props.currentMap === str.HONGKONG_MAP ? 'CHN_1' : 'WORLD'}.json`,\n      onMouseEnter: () => {\n        if (!this.state.loaded) {\n          this.setState({\n            loaded: true\n          });\n          this.props.tooltipRebuild();\n        }\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 196,\n        columnNumber: 29\n      }\n    }, ({\n      geographies\n    }) => geographies.map(geo => {\n      let counts = 0;\n\n      if (geo.properties.REGION != null) {\n        const region = getDataFromRegion(data, geo.properties.REGION.split('.'));\n        if (region && region[metric] && region[metric][date]) counts = region[metric][date];\n      }\n\n      const backgroundMap = this.props.currentMap === str.US_MAP2 ? str.US_MAP : this.props.currentMap === str.HONGKONG_MAP ? str.CHINA_MAP1 : str.WORLD_MAP;\n      const name = geo.properties[maps[backgroundMap].name_key[lang_map]];\n      const isCurrentCountryOrState = backgroundMap === str.WORLD_MAP ? geo.properties.CHINESE_NAME === currentRegion[0] : geo.properties.CHINESE_NAME === currentRegion[1];\n      if (isCurrentCountryOrState) return /*#__PURE__*/React.createElement(\"div\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 226,\n          columnNumber: 77\n        }\n      });\n      if (backgroundMap === str.US_MAP && currentRegion.length === 1) return /*#__PURE__*/React.createElement(\"div\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 227,\n          columnNumber: 112\n        }\n      });\n      return /*#__PURE__*/React.createElement(Geography, {\n        className: \"map-geography\",\n        key: geo.rsmKey,\n        geography: geo,\n        \"data-tip\": `${name} <span class=\"plot-tooltip-bold\">${counts}</span>`,\n        style: {\n          default: {\n            fill: darkMode ? 'var(--darker-grey)' : '#fff',\n            stroke: darkMode ? '#333' : '#ddd',\n            strokeWidth: 2\n          },\n          hover: {\n            fill: `url(\"#background-lines\") ${darkMode ? '#333' : '#ddd'}`,\n            stroke: darkMode ? '#333' : '#ddd',\n            strokeWidth: 2,\n            cursor: counts > 0 ? 'pointer' : 'default'\n          },\n          pressed: {\n            fill: `url(\"#background-lines\") ${darkMode ? '#333' : '#ddd'}`,\n            stroke: darkMode ? '#333' : '#ddd',\n            strokeWidth: 2,\n            cursor: counts > 0 ? 'pointer' : 'default'\n          }\n        },\n        onClick: this.handleGeographyClick(geo.properties.REGION),\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 229,\n          columnNumber: 45\n        }\n      });\n    })), /*#__PURE__*/React.createElement(Geographies, {\n      geography: `maps/${currentMap.filename}`,\n      onMouseEnter: () => {\n        if (!this.state.loaded) {\n          this.setState({\n            loaded: true\n          });\n          this.props.tooltipRebuild();\n        }\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 259,\n        columnNumber: 25\n      }\n    }, ({\n      geographies\n    }) => geographies.map((geo, i) => {\n      let counts = 0;\n\n      if (geo.properties.REGION != null) {\n        const region = getDataFromRegion(data, geo.properties.REGION.split('.'));\n        if (region && region[metric] && region[metric][date]) counts = region[metric][date];\n      }\n\n      const name = geo.properties[currentMap.name_key[lang_map]];\n      let isCurrentRegion = geo.properties[currentMap.name_key.zh] === currentRegion[currentRegion.length - 1];\n      if (currentMap.parent_key) isCurrentRegion = isCurrentRegion && geo.properties[currentMap.parent_key] === currentRegion[currentRegion.length - 2]; // highlight all cities in the province\n\n      let isParentRegion = false;\n\n      if (currentMap.parent_key) {\n        isParentRegion = geo.properties[currentMap.parent_key] === currentRegion[currentRegion.length - 1];\n        if (currentRegion.length >= 3) isParentRegion = isParentRegion || geo.properties[currentMap.parent_key] === currentRegion[currentRegion.length - 2];\n        if (currentRegion.length === 1 || currentRegion[currentRegion.length - 1] === str.MAINLAND_CHINA_ZH) isParentRegion = true;\n        isParentRegion = isParentRegion || isCurrentRegion;\n      } else {\n        isParentRegion = true;\n      }\n\n      const strokeColor = counts === 0 ? greyStrokeColor : this.getStrokeColor(counts, isUsState); // US map\n\n      if (this.props.currentMap === str.US_MAP2 && !isParentRegion) return /*#__PURE__*/React.createElement(\"div\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 311,\n          columnNumber: 106\n        }\n      });\n      return /*#__PURE__*/React.createElement(Fragment, {\n        key: `fragment-${geo.rsmKey}`,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 314,\n          columnNumber: 41\n        }\n      }, /*#__PURE__*/React.createElement(Geography, {\n        key: geo.rsmKey,\n        className: \"map-geography\",\n        geography: geo,\n        \"data-tip\": `${name} <span class=\"plot-tooltip-bold\">${counts}</span>`,\n        style: {\n          default: {\n            fill: isCurrentRegion ? `url(\"#highlightLines-${i}\") ${greyStrokeColor}` : counts > 0 ? colorScale(counts) : 'url(\"#lines\")',\n            stroke: strokeColor,\n            strokeWidth: isCurrentRegion ? 1 : 0,\n            opacity: isParentRegion ? 1 : 0.2\n          },\n          hover: {\n            fill: `url(\"#highlightLines-${i}\") ${greyStrokeColor}`,\n            strokeWidth: 1,\n            stroke: strokeColor,\n            cursor: counts > 0 ? 'pointer' : 'default'\n          },\n          pressed: {\n            fill: `url(\"#highlightLines-${i}\") ${greyStrokeColor}`,\n            strokeWidth: 1,\n            stroke: strokeColor,\n            cursor: counts > 0 ? 'pointer' : 'default'\n          }\n        },\n        onClick: this.handleGeographyClick(geo.properties.REGION),\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 315,\n          columnNumber: 45\n        }\n      }), /*#__PURE__*/React.createElement(PatternLines, {\n        id: `highlightLines-${i}`,\n        height: 6,\n        width: 6,\n        stroke: strokeColor,\n        strokeWidth: 1,\n        background: counts !== 0 ? colorScale(counts) : darkMode ? 'var(--darker-grey)' : '#fff',\n        orientation: ['diagonal'],\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 344,\n          columnNumber: 45\n        }\n      }));\n    })), this.props.currentMap === str.WORLD_MAP && this.state.showTransmissions && transmissions.filter(trans => parseDate(trans.date) <= parseDate(date)).map((trans, i) => {\n      return /*#__PURE__*/React.createElement(Line, {\n        keys: `transmission-${i}`,\n        from: coord[trans.from].split(',').map(c => parseFloat(c)),\n        to: coord[trans.to].split(',').map(c => parseFloat(c)),\n        stroke: darkMode ? 'rgba(222,73,104,0.9)' : 'rgba(222, 73, 104, 0.5)',\n        strokeWidth: 1,\n        strokeLinecap: \"round\",\n        style: {\n          pointerEvents: 'none'\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 371,\n          columnNumber: 41\n        }\n      });\n    }), [str.WORLD_MAP, str.CHINA_MAP1, str.CHINA_MAP2].includes(this.props.currentMap) && /*#__PURE__*/React.createElement(Marker, {\n      key: 'wuhan',\n      coordinates: [114.2, 30.3],\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 385,\n        columnNumber: 29\n      }\n    }, /*#__PURE__*/React.createElement(\"g\", {\n      fill: \"none\",\n      stroke: \"var(--primary-color-4)\",\n      strokeWidth: \"2\",\n      pointerEvents: \"none\",\n      strokeLinecap: \"round\",\n      strokeLinejoin: \"round\",\n      transform: \"translate(-12, -24)\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 386,\n        columnNumber: 33\n      }\n    }, /*#__PURE__*/React.createElement(\"circle\", {\n      cx: \"12\",\n      cy: \"10\",\n      r: \"3\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 395,\n        columnNumber: 37\n      }\n    }), /*#__PURE__*/React.createElement(\"path\", {\n      d: \"M12 21.7C17.3 17 20 13 20 10a8 8 0 1 0-16 0c0 3 2.7 6.9 8 11.7z\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 396,\n        columnNumber: 37\n      }\n    }))), (this.props.currentMap === str.WORLD_MAP || this.props.currentMap === str.JAPAN_MAP) && /*#__PURE__*/React.createElement(Marker, {\n      key: 'diamond-princess',\n      coordinates: [139.6, 35.4],\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 401,\n        columnNumber: 29\n      }\n    }, /*#__PURE__*/React.createElement(FaShip, {\n      size: this.props.currentMap === str.WORLD_MAP ? 18 : 36,\n      color: colorScale(cruiseCounts),\n      className: \"map-ship\",\n      \"data-tip\": `${lang === 'zh' ? str.DIAMOND_PRINCESS_ZH : cruiseData.ENGLISH} <span class=\"plot-tooltip-bold\">${cruiseCounts}</span>`,\n      style: {\n        stroke: cruiseStrokeColor,\n        visibility: cruiseCounts > 0 ? 'visible' : 'hidden',\n        strokeWidth: currentRegion[currentRegion.length - 1] === str.DIAMOND_PRINCESS_ZH ? 30 : 0\n      },\n      onClick: () => this.props.regionToggle([str.INTL_CONVEYANCE_ZH, str.DIAMOND_PRINCESS_ZH]),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 402,\n        columnNumber: 33\n      }\n    })))));\n  }\n\n}\n\nexport default Map;","map":{"version":3,"sources":["/Users/jonchristie/Desktop/2020data/src/components/Map.js"],"names":["React","Component","Fragment","ComposableMap","ZoomableGroup","Geographies","Geography","Marker","Line","scaleSequential","scaleLog","scaleLinear","interpolateMagma","PatternLines","isMobile","isIPad13","TinyColor","FaShip","Toggle","maps","us_map","transmissions","coord","getDataFromRegion","parseDate","str","i18n","Map","state","loaded","cursor","clicked","showTransmissions","usState","handleGeographyClick","region","props","regionToggle","split","onZoomEnd","event","handleMapZoomChange","zoom","getConfig","config","defaultConfig","map","d","parseInt","getColorScale","isUsState","data","currentRegion","scale","metric","darkMode","currentMap","currentScale","maxCount","stateData","slice","Math","max","Object","keys","filter","x","includes","county","values","mapScale","domain","clamp","colorConvert","colorScale","WORLD_MAP","color","toRgbString","desaturate","greyedColor","setAlpha","getLuminance","darken","lighten","getStrokeColor","counts","tinyColor","isDark","invert","componentDidUpdate","prevProps","prevState","setState","setTimeout","tooltipRebuild","US_MAP2","render","TRANSMISSION","date","lang","mapZoom","lang_map","center","parseFloat","projection","cruiseData","INTL_CONVEYANCE_ZH","DIAMOND_PRINCESS_ZH","cruiseCounts","cruiseStrokeColor","greyStrokeColor","TRANSMISSIONS","rotate","parallels","e","m","y","abs","US_MAP","HONGKONG_MAP","geographies","geo","properties","REGION","backgroundMap","CHINA_MAP1","name","name_key","isCurrentCountryOrState","CHINESE_NAME","length","rsmKey","default","fill","stroke","strokeWidth","hover","pressed","filename","i","isCurrentRegion","zh","parent_key","isParentRegion","MAINLAND_CHINA_ZH","strokeColor","opacity","trans","from","c","to","pointerEvents","CHINA_MAP2","JAPAN_MAP","ENGLISH","visibility"],"mappings":"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","sourcesContent":["import React, { Component, Fragment } from 'react'\nimport { ComposableMap, ZoomableGroup, Geographies, Geography, Marker, Line } from 'react-simple-maps'\nimport { scaleSequential, scaleLog, scaleLinear } from 'd3-scale'\nimport { interpolateMagma } from 'd3-scale-chromatic'\nimport { PatternLines } from '@vx/pattern'\nimport { isMobile, isIPad13 } from 'react-device-detect'\nimport { TinyColor } from '@ctrl/tinycolor'\nimport { FaShip } from 'react-icons/fa'\nimport Toggle from 'react-toggle'\nimport 'react-toggle/style.css'\nimport maps from '../data/maps.yml'\nimport us_map from '../data/us_map.yml'\nimport transmissions from '../data/transmissions.yml'\nimport coord from '../data/transmissions_coord.yml'\nimport { getDataFromRegion, parseDate } from '../utils/utils'\nimport * as str from '../utils/strings'\nimport i18n from '../data/i18n.yml'\n\nclass Map extends Component {\n    state = {\n        loaded: false,\n        cursor: [ 0, 0 ],\n        clicked: false,\n        showTransmissions: false,\n        usState: null\n    }\n\n    componentDidUpdate(prevProps, prevState) {\n        if (this.props.currentMap !== prevProps.currentMap || this.state.usState !== prevState.usState) {\n            this.setState({ loaded: false })\n            setTimeout(() => {\n                this.props.tooltipRebuild()\n            }, 100)\n        }\n\n        if (this.props.currentMap === str.US_MAP2) {\n            const usState = this.props.currentRegion[1]\n            if (usState !== this.state.usState) {\n                this.setState({ usState })\n            }\n        }\n    }\n\n    handleGeographyClick = (region) => () => {\n        if (!this.state.clicked || region == null) return\n\n        this.props.regionToggle(region.split('.'))\n    }\n\n    onZoomEnd = (event, state) => {\n        this.props.handleMapZoomChange(state.zoom)\n    }\n\n    getConfig = (config, defaultConfig) =>\n        config != null ? config.split(',').map((d) => parseInt(d, 10)) : defaultConfig\n\n    getColorScale = (isUsState) => {\n        const { data, currentRegion, scale, metric, darkMode } = this.props\n        const currentMap = maps[this.props.currentMap]\n\n        const currentScale = scale === 'linear' ? scaleLinear : scaleLog\n\n        let maxCount = currentMap[`maxScale_${metric}`]\n        if (isUsState && metric === 'confirmedCount') {\n            const stateData = getDataFromRegion(data, currentRegion.slice(0, 2))\n            maxCount = Math.max(\n                ...Object.keys(stateData)\n                    .filter((x) => ![ 'confirmedCount', 'curedCount', 'deadCount', 'ENGLISH' ].includes(x))\n                    .map((county) => Math.max(...Object.values(stateData[county][metric])))\n            )\n        }\n        const mapScale = currentScale().domain([ 1, maxCount ]).clamp(true)\n        const colorConvert = (x) => (darkMode ? x * 0.95 + 0.05 : 0.95 - x * 0.95)\n        const colorScale = scaleSequential((d) => {\n            if (!this.state.showTransmissions || this.props.currentMap !== str.WORLD_MAP) {\n                const color = new TinyColor(interpolateMagma(colorConvert(mapScale(d))))\n                if (!darkMode) return color.toRgbString()\n\n                return color.desaturate(10).toRgbString()\n            } else {\n                const greyedColor = new TinyColor(interpolateMagma(colorConvert(mapScale(d)))).desaturate(100)\n                if (!darkMode) return greyedColor.setAlpha(0.6).toRgbString()\n\n                // make the colors distinguishable from dark background\n                return greyedColor.getLuminance() < 0.09\n                    ? greyedColor.darken(5).setAlpha(0.9).toRgbString()\n                    : greyedColor.lighten(5).setAlpha(0.9).toRgbString()\n            }\n        })\n\n        return { colorScale, mapScale }\n    }\n\n    getStrokeColor = (counts, isUsState) => {\n        const { colorScale, mapScale } = this.getColorScale(isUsState)\n        const { darkMode } = this.props\n        const tinyColor = new TinyColor(colorScale(counts))\n\n        if (!darkMode) {\n            return tinyColor.isDark()\n                ? colorScale(mapScale.invert(mapScale(counts) - 0.6))\n                : colorScale(mapScale.invert(mapScale(counts) + 0.3))\n        } else {\n            return tinyColor.isDark()\n                ? colorScale(mapScale.invert(mapScale(counts) + 0.5))\n                : colorScale(mapScale.invert(mapScale(counts) - 0.5))\n        }\n    }\n\n    render() {\n        if (this.props.currentMap === str.TRANSMISSION) return <div />\n\n        const currentMap = maps[this.props.currentMap]\n        const { data, metric, date, lang, currentRegion, mapZoom, darkMode } = this.props\n\n        const lang_map = lang !== 'zh'? 'en' : 'zh'\n        const isUsState =\n            this.props.currentMap === str.US_MAP2 && this.state.usState != null && this.state.usState in us_map\n        const center = isUsState\n            ? us_map[this.state.usState].center.split(',').map((d) => parseFloat(d))\n            : currentMap.center.split(',').map((d) => parseFloat(d))\n        const scale = isUsState ? us_map[this.state.usState].scale : currentMap.scale\n        const projection = isUsState ? 'geoMercator' : currentMap.projection\n\n        const { colorScale } = this.getColorScale(isUsState)\n        const cruiseData = getDataFromRegion(data, [ str.INTL_CONVEYANCE_ZH, str.DIAMOND_PRINCESS_ZH ])\n        const cruiseCounts = cruiseData[metric][date] ? cruiseData[metric][date] : 0\n\n        const cruiseStrokeColor = this.getStrokeColor(cruiseCounts, isUsState)\n        const greyStrokeColor = darkMode ? 'var(--primary-color-10)' : 'var(--grey)'\n\n        return (\n            <Fragment>\n                {this.props.currentMap === str.WORLD_MAP && (\n                    <div className=\"map-transmission-toggle-wrap\">\n                        <Toggle\n                            className=\"map-transmission-toggle\"\n                            defaultChecked={this.state.showTransmissions}\n                            onChange={() => this.setState({ showTransmissions: !this.state.showTransmissions })}\n                            icons={false}\n                        />\n                        <span>{i18n.TRANSMISSIONS[this.props.lang]}</span>\n                    </div>\n                )}\n                <ComposableMap\n                    projection={projection}\n\n                    projectionConfig={{\n                        scale: scale,\n                        rotate: currentMap.rotate\n                            ? currentMap.rotate.split(',').map((x) => parseInt(x, 10))\n                            : [ 0, 0, 0 ],\n                        parallels: currentMap.parallels\n                            ? currentMap.parallels.split(',').map((x) => parseInt(x, 10))\n                            : [ 0, 0 ]\n                    }}\n                >\n                    <PatternLines\n                        id=\"lines\"\n                        height={6}\n                        width={6}\n                        stroke={greyStrokeColor}\n                        strokeWidth={1}\n                        background={darkMode ? 'var(--darker-grey)' : '#fff'}\n                        orientation={[ 'diagonal' ]}\n                    />\n                    <PatternLines\n                        id=\"background-lines\"\n                        height={6}\n                        width={6}\n                        stroke={darkMode ? '#333' : '#ddd'}\n                        strokeWidth={1}\n                        background={darkMode ? 'var(--darker-grey)' : '#fff'}\n                        orientation={[ 'diagonal' ]}\n                    />\n                    <ZoomableGroup\n                        zoom={mapZoom}\n                        onZoomEnd={this.onZoomEnd}\n                        onMoveStart={(e, m) => this.setState({ cursor: [ m.x, m.y ], clicked: false })}\n                        onMoveEnd={(e, m) => {\n                            // click on desktop\n                            if (Math.abs(m.x - this.state.cursor[0]) < 1 && Math.abs(m.y - this.state.cursor[1]) < 1)\n                                this.setState({ clicked: true })\n                        }}\n                        onTouchStart={\n                            // click on touch screens\n                            isMobile || isIPad13 ? () => this.setState({ clicked: true }) : null\n                        }\n                        center={center}\n                        minZoom={0.2}\n                        maxZoom={5}\n                        disableZooming={isMobile || isIPad13}\n                        disablePanning={isMobile || isIPad13}\n                    >\n                        {![ str.WORLD_MAP, str.US_MAP ].includes(this.props.currentMap) && (\n                            <Geographies\n                                geography={`maps/${this.props.currentMap === str.US_MAP2\n                                    ? 'USA'\n                                    : this.props.currentMap === str.HONGKONG_MAP ? 'CHN_1' : 'WORLD'}.json`}\n                                onMouseEnter={() => {\n                                    if (!this.state.loaded) {\n                                        this.setState({ loaded: true })\n                                        this.props.tooltipRebuild()\n                                    }\n                                }}\n                            >\n                                {({ geographies }) =>\n                                    geographies.map((geo) => {\n                                        let counts = 0\n                                        if (geo.properties.REGION != null) {\n                                            const region = getDataFromRegion(data, geo.properties.REGION.split('.'))\n                                            if (region && region[metric] && region[metric][date])\n                                                counts = region[metric][date]\n                                        }\n                                        const backgroundMap =\n                                            this.props.currentMap === str.US_MAP2\n                                                ? str.US_MAP\n                                                : this.props.currentMap === str.HONGKONG_MAP\n                                                  ? str.CHINA_MAP1\n                                                  : str.WORLD_MAP\n                                        const name = geo.properties[maps[backgroundMap].name_key[lang_map]]\n                                        const isCurrentCountryOrState =\n                                            backgroundMap === str.WORLD_MAP\n                                                ? geo.properties.CHINESE_NAME === currentRegion[0]\n                                                : geo.properties.CHINESE_NAME === currentRegion[1]\n                                        if (isCurrentCountryOrState) return <div />\n                                        if (backgroundMap === str.US_MAP && currentRegion.length === 1) return <div />\n                                        return (\n                                            <Geography\n                                                className=\"map-geography\"\n                                                key={geo.rsmKey}\n                                                geography={geo}\n                                                data-tip={`${name} <span class=\"plot-tooltip-bold\">${counts}</span>`}\n                                                style={{\n                                                    default: {\n                                                        fill: darkMode ? 'var(--darker-grey)' : '#fff',\n                                                        stroke: darkMode ? '#333' : '#ddd',\n                                                        strokeWidth: 2\n                                                    },\n                                                    hover: {\n                                                        fill: `url(\"#background-lines\") ${darkMode ? '#333' : '#ddd'}`,\n                                                        stroke: darkMode ? '#333' : '#ddd',\n                                                        strokeWidth: 2,\n                                                        cursor: counts > 0 ? 'pointer' : 'default'\n                                                    },\n                                                    pressed: {\n                                                        fill: `url(\"#background-lines\") ${darkMode ? '#333' : '#ddd'}`,\n                                                        stroke: darkMode ? '#333' : '#ddd',\n                                                        strokeWidth: 2,\n                                                        cursor: counts > 0 ? 'pointer' : 'default'\n                                                    }\n                                                }}\n                                                onClick={this.handleGeographyClick(geo.properties.REGION)}\n                                            />\n                                        )\n                                    })}\n                            </Geographies>\n                        )}\n                        <Geographies\n                            geography={`maps/${currentMap.filename}`}\n                            onMouseEnter={() => {\n                                if (!this.state.loaded) {\n                                    this.setState({ loaded: true })\n                                    this.props.tooltipRebuild()\n                                }\n                            }}\n                        >\n                            {({ geographies }) =>\n                                geographies.map((geo, i) => {\n                                    let counts = 0\n                                    if (geo.properties.REGION != null) {\n                                        const region = getDataFromRegion(data, geo.properties.REGION.split('.'))\n                                        if (region && region[metric] && region[metric][date])\n                                            counts = region[metric][date]\n                                    }\n                                    const name = geo.properties[currentMap.name_key[lang_map]]\n                                    let isCurrentRegion =\n                                        geo.properties[currentMap.name_key.zh] ===\n                                        currentRegion[currentRegion.length - 1]\n                                    if (currentMap.parent_key)\n                                        isCurrentRegion =\n                                            isCurrentRegion &&\n                                            geo.properties[currentMap.parent_key] ===\n                                                currentRegion[currentRegion.length - 2]\n\n                                    // highlight all cities in the province\n                                    let isParentRegion = false\n                                    if (currentMap.parent_key) {\n                                        isParentRegion =\n                                            geo.properties[currentMap.parent_key] ===\n                                            currentRegion[currentRegion.length - 1]\n                                        if (currentRegion.length >= 3)\n                                            isParentRegion =\n                                                isParentRegion ||\n                                                geo.properties[currentMap.parent_key] ===\n                                                    currentRegion[currentRegion.length - 2]\n                                        if (\n                                            currentRegion.length === 1 ||\n                                            currentRegion[currentRegion.length - 1] === str.MAINLAND_CHINA_ZH\n                                        )\n                                            isParentRegion = true\n                                        isParentRegion = isParentRegion || isCurrentRegion\n                                    } else {\n                                        isParentRegion = true\n                                    }\n\n                                    const strokeColor =\n                                        counts === 0 ? greyStrokeColor : this.getStrokeColor(counts, isUsState)\n\n                                    // US map\n                                    if (this.props.currentMap === str.US_MAP2 && !isParentRegion) return <div />\n\n                                    return (\n                                        <Fragment key={`fragment-${geo.rsmKey}`}>\n                                            <Geography\n                                                key={geo.rsmKey}\n                                                className=\"map-geography\"\n                                                geography={geo}\n                                                data-tip={`${name} <span class=\"plot-tooltip-bold\">${counts}</span>`}\n                                                style={{\n                                                    default: {\n                                                        fill: isCurrentRegion\n                                                            ? `url(\"#highlightLines-${i}\") ${greyStrokeColor}`\n                                                            : counts > 0 ? colorScale(counts) : 'url(\"#lines\")',\n                                                        stroke: strokeColor,\n                                                        strokeWidth: isCurrentRegion ? 1 : 0,\n                                                        opacity: isParentRegion ? 1 : 0.2\n                                                    },\n                                                    hover: {\n                                                        fill: `url(\"#highlightLines-${i}\") ${greyStrokeColor}`,\n                                                        strokeWidth: 1,\n                                                        stroke: strokeColor,\n                                                        cursor: counts > 0 ? 'pointer' : 'default'\n                                                    },\n                                                    pressed: {\n                                                        fill: `url(\"#highlightLines-${i}\") ${greyStrokeColor}`,\n                                                        strokeWidth: 1,\n                                                        stroke: strokeColor,\n                                                        cursor: counts > 0 ? 'pointer' : 'default'\n                                                    }\n                                                }}\n                                                onClick={this.handleGeographyClick(geo.properties.REGION)}\n                                            />\n                                            <PatternLines\n                                                id={`highlightLines-${i}`}\n                                                height={6}\n                                                width={6}\n                                                stroke={strokeColor}\n                                                strokeWidth={1}\n                                                background={\n                                                    counts !== 0 ? (\n                                                        colorScale(counts)\n                                                    ) : darkMode ? (\n                                                        'var(--darker-grey)'\n                                                    ) : (\n                                                        '#fff'\n                                                    )\n                                                }\n                                                orientation={[ 'diagonal' ]}\n                                            />\n                                        </Fragment>\n                                    )\n                                })}\n                        </Geographies>\n                        {this.props.currentMap === str.WORLD_MAP &&\n                            this.state.showTransmissions &&\n                            transmissions\n                                .filter((trans) => parseDate(trans.date) <= parseDate(date))\n                                .map((trans, i) => {\n                                    return (\n                                        <Line\n                                            keys={`transmission-${i}`}\n                                            from={coord[trans.from].split(',').map((c) => parseFloat(c))}\n                                            to={coord[trans.to].split(',').map((c) => parseFloat(c))}\n                                            stroke={darkMode ? 'rgba(222,73,104,0.9)' : 'rgba(222, 73, 104, 0.5)'}\n                                            strokeWidth={1}\n                                            strokeLinecap=\"round\"\n                                            style={{\n                                                pointerEvents: 'none'\n                                            }}\n                                        />\n                                    )\n                                })}\n                        {[ str.WORLD_MAP, str.CHINA_MAP1, str.CHINA_MAP2 ].includes(this.props.currentMap) && (\n                            <Marker key={'wuhan'} coordinates={[ 114.2, 30.3 ]}>\n                                <g\n                                    fill=\"none\"\n                                    stroke=\"var(--primary-color-4)\"\n                                    strokeWidth=\"2\"\n                                    pointerEvents=\"none\"\n                                    strokeLinecap=\"round\"\n                                    strokeLinejoin=\"round\"\n                                    transform=\"translate(-12, -24)\"\n                                >\n                                    <circle cx=\"12\" cy=\"10\" r=\"3\" />\n                                    <path d=\"M12 21.7C17.3 17 20 13 20 10a8 8 0 1 0-16 0c0 3 2.7 6.9 8 11.7z\" />\n                                </g>\n                            </Marker>\n                        )}\n                        {(this.props.currentMap === str.WORLD_MAP || this.props.currentMap === str.JAPAN_MAP) && (\n                            <Marker key={'diamond-princess'} coordinates={[ 139.6, 35.4 ]}>\n                                <FaShip\n                                    size={this.props.currentMap === str.WORLD_MAP ? 18 : 36}\n                                    color={colorScale(cruiseCounts)}\n                                    className=\"map-ship\"\n                                    data-tip={`${lang === 'zh'\n                                        ? str.DIAMOND_PRINCESS_ZH\n                                        : cruiseData.ENGLISH} <span class=\"plot-tooltip-bold\">${cruiseCounts}</span>`}\n                                    style={{\n                                        stroke: cruiseStrokeColor,\n                                        visibility: cruiseCounts > 0 ? 'visible' : 'hidden',\n                                        strokeWidth:\n                                            currentRegion[currentRegion.length - 1] === str.DIAMOND_PRINCESS_ZH ? 30 : 0\n                                    }}\n                                    onClick={() =>\n                                        this.props.regionToggle([ str.INTL_CONVEYANCE_ZH, str.DIAMOND_PRINCESS_ZH ])}\n                                />\n                            </Marker>\n                        )}\n                    </ZoomableGroup>\n                </ComposableMap>\n            </Fragment>\n        )\n    }\n}\n\nexport default Map\n"]},"metadata":{},"sourceType":"module"}