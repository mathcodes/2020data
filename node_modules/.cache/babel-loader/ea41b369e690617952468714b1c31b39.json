{"ast":null,"code":"var _jsxFileName = \"/Users/jonchristie/Desktop/2020data/src/components/App.js\";\nimport React, { Component, Fragment } from 'react';\nimport { Container, Row, Col } from 'reactstrap';\nimport ReactTooltip from 'react-tooltip';\nimport { AiOutlineFullscreen, AiOutlineFullscreenExit } from 'react-icons/ai';\nimport Helmet from 'react-helmet';\nimport Measure from 'react-measure';\nimport './App.css';\nimport Map from './Map';\nimport MapNavBar from './MapNavBar';\nimport DateSlider from './DateSlider';\nimport AnimationController from './AnimationController';\nimport MainCounts from './MainCounts';\nimport Plot from './Plot';\nimport Tree from './Tree';\nimport NavBar from './NavBar';\nimport Loading from './Loading';\nimport Footer from './Footer';\nimport Region from './Region';\nimport TransmissionNetwork from './TransmissionNetwork';\nimport { ReactComponent as Icon } from \"@svgr/webpack?-svgo,+titleProp,+ref!../covid19.svg\";\nimport i18n from '../data/i18n.yml';\nimport us_map from '../data/us_map.yml';\nimport * as str from '../utils/strings';\nimport { updateDarkMode, isoDate } from '../utils/utils';\nimport { mapText } from '../utils/map_text';\nconst defaultState = {\n  currentMap: 'WORLD',\n  metric: 'confirmedCount',\n  currentRegion: [str.GLOBAL_ZH],\n  playing: false,\n  scale: 'linear',\n  mapZoom: 1,\n  fullMap: false,\n  fullPlot: false,\n  fullTree: false\n};\n\nclass App extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      startDate: '2020-01-24',\n      endDate: '2020-02-14',\n      date: '2020-02-14',\n      tempDate: '2020-02-14',\n      plotDates: ['2020-01-24', '2020-02-14'],\n      data: null,\n      dataLoaded: false,\n      lang: 'en',\n      darkMode: true,\n      mapDimensions: {\n        width: -1,\n        height: -1\n      },\n      fullDimensions: {\n        width: -1,\n        height: -1\n      },\n      plotType: 'plot_basic',\n      ...defaultState\n    };\n\n    this.fetchData = () => fetch('data/all_minified.json').then(res => res.json()).then(res => {\n      const latest = Object.keys(res[str.GLOBAL_ZH].confirmedCount).pop();\n      this.setState({\n        data: res,\n        dataLoaded: true,\n        date: latest,\n        tempDate: latest,\n        endDate: latest,\n        plotDates: [this.state.plotDates[0], latest]\n      });\n      this.tooltipRebuild();\n    });\n\n    this.updateFullDimensions = () => {\n      const width = window.innerWidth || document.documentElement.clientWidth || document.body.clientWidth;\n      const height = window.innerHeight || document.documentElement.clientHeight || document.body.clientHeight;\n\n      if (height < 750 || width < 992) {\n        if (this.state.fullMap) this.setState({\n          fullMap: false\n        });\n        if (this.state.fullPlot) this.setState({\n          fullPlot: false\n        });\n      }\n\n      this.setState({\n        fullDimensions: {\n          height: Math.min(height - 250, (width - 200) * 3 / 4),\n          width: Math.min((height - 250) * 4 / 3, width - 200)\n        }\n      });\n    };\n\n    this.reset = () => this.setState({ ...defaultState,\n      date: this.state.endDate,\n      tempDate: this.state.endDate,\n      plotDates: [this.state.startDate, this.state.endDate]\n    });\n\n    this.mapToggle = newMap => this.setState({\n      currentMap: newMap,\n      // do not reset map zoom when switching between two China maps\n      mapZoom: newMap === str.WORLD_MAP || this.state.currentMap === str.WORLD_MAP ? 1 : this.state.mapZoom\n    });\n\n    this.metricToggle = newMetric => this.setState({\n      metric: newMetric\n    });\n\n    this.regionToggle = (newRegion, mapChange = true) => {\n      const {\n        currentMap\n      } = this.state;\n      this.setState({\n        currentRegion: newRegion\n      });\n      if (!mapChange) return;\n      if (currentMap === str.TRANSMISSION) return;\n\n      if (newRegion[0] === str.CHINA_ZH) {\n        if (newRegion.length >= 4) {\n          this.mapToggle(str.CHINA_MAP2);\n        } else if (newRegion.length >= 2 && newRegion[1] === str.HONGKONG_ZH) {\n          this.mapToggle(str.HONGKONG_MAP);\n        } else if (currentMap !== str.CHINA_MAP2) {\n          this.mapToggle(str.CHINA_MAP1);\n        }\n      } else if (newRegion[0] === str.US_ZH) {\n        if (newRegion.length >= 2 && newRegion[1] in us_map) {\n          this.mapToggle(str.US_MAP2);\n        } else {\n          this.mapToggle(str.US_MAP);\n        }\n      } else if (newRegion[0] === str.ITALY_ZH) {\n        if (newRegion.length >= 3) {\n          this.mapToggle(str.ITALY_MAP2);\n        } else if (currentMap !== str.ITALY_MAP2) {\n          this.mapToggle(str.ITALY_MAP);\n        }\n      } else if (newRegion[0] === str.INTL_CONVEYANCE_ZH) {\n        this.mapToggle(str.JAPAN_MAP);\n      } else {\n        let map = Object.keys(mapText).find(x => mapText[x].regionName === newRegion[0]);\n        map = map != null ? map : str.WORLD_MAP;\n        if (map === str.WORLD_MAP && currentMap === str.EUROPE_MAP) map = str.EUROPE_MAP;\n        this.mapToggle(map);\n      }\n    };\n\n    this.playingToggle = () => this.setState({\n      playing: !this.state.playing\n    });\n\n    this.scaleToggle = newScale => this.setState({\n      scale: newScale\n    });\n\n    this.languageToggle = lang => this.setState({\n      lang\n    });\n\n    this.fullMapToggle = () => {\n      this.setState({\n        fullMap: !this.state.fullMap\n      });\n    };\n\n    this.fullPlotToggle = () => {\n      ReactTooltip.hide();\n      this.setState({\n        fullPlot: !this.state.fullPlot\n      });\n    };\n\n    this.fullTreeToggle = () => {\n      this.setState({\n        fullTree: !this.state.fullTree\n      });\n    };\n\n    this.darkModeToggle = () => {\n      updateDarkMode(!this.state.darkMode);\n      this.setState({\n        darkMode: !this.state.darkMode\n      });\n    };\n\n    this.handleMapZoomChange = newZoom => this.setState({\n      mapZoom: newZoom\n    });\n\n    this.handleDateChange = newDate => this.setState({\n      date: newDate,\n      tempDate: newDate\n    });\n\n    this.handleTempDateChange = newDates => {\n      const newDateStrings = newDates.map(x => isoDate(x, this.state.endDate).slice(0, 10));\n\n      if (!this.state.fullPlot) {\n        this.setState({\n          tempDate: newDateStrings[0]\n        });\n      } else {\n        this.setState({\n          plotDates: newDateStrings\n        });\n      }\n    };\n\n    this.handlePlotTypeChange = newType => this.setState({\n      plotType: newType\n    });\n\n    this.tooltipRebuild = () => ReactTooltip.rebuild();\n  }\n\n  componentDidMount() {\n    updateDarkMode(this.state.darkMode);\n    this.fetchData();\n    this.updateFullDimensions();\n    window.addEventListener('resize', this.updateFullDimensions);\n  }\n\n  componentWillUnmount() {\n    window.removeEventListener('resize', this.updateFullDimensions);\n  }\n\n  render() {\n    const {\n      lang,\n      dataLoaded,\n      currentMap,\n      fullMap,\n      fullPlot,\n      fullTree,\n      darkMode\n    } = this.state;\n    const fullScreenMode = fullMap ? 'map-full' : fullPlot ? 'plot-full' : fullTree ? 'tree-full' : '';\n    const FullScreenIcon = fullMap ? AiOutlineFullscreenExit : AiOutlineFullscreen;\n    return /*#__PURE__*/React.createElement(\"div\", {\n      className: `App ${darkMode ? 'dark' : ''}`,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 205,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(Helmet, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 206,\n        columnNumber: 17\n      }\n    }, /*#__PURE__*/React.createElement(\"title\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 207,\n        columnNumber: 21\n      }\n    }, i18n.COVID19[lang])), !dataLoaded ? /*#__PURE__*/React.createElement(Loading, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 210,\n        columnNumber: 21\n      }\n    }) : /*#__PURE__*/React.createElement(Fragment, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 212,\n        columnNumber: 21\n      }\n    }, /*#__PURE__*/React.createElement(Container, {\n      className: `app-container ${fullScreenMode}`,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 213,\n        columnNumber: 25\n      }\n    }, /*#__PURE__*/React.createElement(Row, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 214,\n        columnNumber: 29\n      }\n    }, /*#__PURE__*/React.createElement(Col, {\n      lg: !fullMap ? 7 : 12,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 215,\n        columnNumber: 33\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"header\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 216,\n        columnNumber: 37\n      }\n    }, /*#__PURE__*/React.createElement(\"span\", {\n      className: \"header-icon\",\n      style: {\n        opacity: dataLoaded ? 1 : 0\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 217,\n        columnNumber: 41\n      }\n    }, /*#__PURE__*/React.createElement(Icon, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 218,\n        columnNumber: 45\n      }\n    })), /*#__PURE__*/React.createElement(\"span\", {\n      className: \"header-title\",\n      style: {\n        letterSpacing: lang === 'zh' ? '1px' : 'normal'\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 220,\n        columnNumber: 41\n      }\n    }, i18n.COVID19[lang])), /*#__PURE__*/React.createElement(NavBar, Object.assign({}, this.state, {\n      scaleToggle: this.scaleToggle,\n      languageToggle: this.languageToggle,\n      darkModeToggle: this.darkModeToggle,\n      reset: this.reset,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 227,\n        columnNumber: 37\n      }\n    })), !fullPlot && !fullTree && /*#__PURE__*/React.createElement(Measure, {\n      bounds: true,\n      onResize: contentRect => {\n        this.setState({\n          mapDimensions: contentRect.bounds\n        });\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 236,\n        columnNumber: 41\n      }\n    }, ({\n      measureRef\n    }) => /*#__PURE__*/React.createElement(\"div\", {\n      ref: measureRef,\n      className: \"map\",\n      style: {\n        height: !fullMap ? this.state.mapDimensions.width * 3 / 4 : this.state.fullDimensions.height,\n        width: !fullMap ? '100%' : this.state.fullDimensions.width\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 243,\n        columnNumber: 49\n      }\n    }, currentMap === str.TRANSMISSION && /*#__PURE__*/React.createElement(TransmissionNetwork, Object.assign({}, this.state, {\n      regionToggle: this.regionToggle,\n      tooltipRebuild: this.tooltipRebuild,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 254,\n        columnNumber: 57\n      }\n    })), currentMap !== str.TRANSMISSION && /*#__PURE__*/React.createElement(Map, Object.assign({}, this.state, {\n      handleMapZoomChange: this.handleMapZoomChange,\n      mapToggle: this.mapToggle,\n      regionToggle: this.regionToggle,\n      tooltipRebuild: this.tooltipRebuild,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 261,\n        columnNumber: 57\n      }\n    })), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"map-full-button\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 269,\n        columnNumber: 53\n      }\n    }, /*#__PURE__*/React.createElement(FullScreenIcon, {\n      size: fullMap ? 30 : 20,\n      onClick: this.fullMapToggle,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 270,\n        columnNumber: 57\n      }\n    })))), /*#__PURE__*/React.createElement(MapNavBar, Object.assign({}, this.state, {\n      mapToggle: this.mapToggle,\n      metricToggle: this.metricToggle,\n      regionToggle: this.regionToggle,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 279,\n        columnNumber: 37\n      }\n    })), /*#__PURE__*/React.createElement(DateSlider, Object.assign({}, this.state, {\n      handleDateChange: this.handleDateChange,\n      handleTempDateChange: this.handleTempDateChange,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 285,\n        columnNumber: 37\n      }\n    })), /*#__PURE__*/React.createElement(AnimationController, Object.assign({}, this.state, {\n      handleDateChange: this.handleDateChange,\n      playingToggle: this.playingToggle,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 290,\n        columnNumber: 37\n      }\n    })), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"footer-white\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 295,\n        columnNumber: 37\n      }\n    })), !fullMap && /*#__PURE__*/React.createElement(Col, {\n      lg: !fullPlot && !fullTree ? 5 : 12,\n      className: \"col-right\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 298,\n        columnNumber: 37\n      }\n    }, /*#__PURE__*/React.createElement(Row, {\n      style: {\n        display: 'flex',\n        flexDirection: 'column',\n        padding: 10\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 299,\n        columnNumber: 41\n      }\n    }, /*#__PURE__*/React.createElement(Region, Object.assign({}, this.state, {\n      regionToggle: this.regionToggle,\n      ReactTooltip: ReactTooltip,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 300,\n        columnNumber: 45\n      }\n    })), /*#__PURE__*/React.createElement(MainCounts, Object.assign({}, this.state, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 305,\n        columnNumber: 45\n      }\n    })), /*#__PURE__*/React.createElement(Plot, Object.assign({}, this.state, {\n      regionToggle: this.regionToggle,\n      fullPlotToggle: this.fullPlotToggle,\n      scaleToggle: this.scaleToggle,\n      handlePlotTypeChange: this.handlePlotTypeChange,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 306,\n        columnNumber: 45\n      }\n    })), /*#__PURE__*/React.createElement(Tree, Object.assign({}, this.state, {\n      regionToggle: this.regionToggle,\n      fullTreeToggle: this.fullTreeToggle,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 313,\n        columnNumber: 45\n      }\n    })), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"footer-placeholder\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 318,\n        columnNumber: 45\n      }\n    }))))), /*#__PURE__*/React.createElement(Footer, Object.assign({}, this.state, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 324,\n        columnNumber: 25\n      }\n    }))), /*#__PURE__*/React.createElement(ReactTooltip, {\n      className: \"plot-tooltip\",\n      type: darkMode ? 'dark' : 'light',\n      html: true,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 327,\n        columnNumber: 17\n      }\n    }));\n  }\n\n}\n\nexport default App;","map":{"version":3,"sources":["/Users/jonchristie/Desktop/2020data/src/components/App.js"],"names":["React","Component","Fragment","Container","Row","Col","ReactTooltip","AiOutlineFullscreen","AiOutlineFullscreenExit","Helmet","Measure","Map","MapNavBar","DateSlider","AnimationController","MainCounts","Plot","Tree","NavBar","Loading","Footer","Region","TransmissionNetwork","i18n","us_map","str","updateDarkMode","isoDate","mapText","defaultState","currentMap","metric","currentRegion","GLOBAL_ZH","playing","scale","mapZoom","fullMap","fullPlot","fullTree","App","state","startDate","endDate","date","tempDate","plotDates","data","dataLoaded","lang","darkMode","mapDimensions","width","height","fullDimensions","plotType","fetchData","fetch","then","res","json","latest","Object","keys","confirmedCount","pop","setState","tooltipRebuild","updateFullDimensions","window","innerWidth","document","documentElement","clientWidth","body","innerHeight","clientHeight","Math","min","reset","mapToggle","newMap","WORLD_MAP","metricToggle","newMetric","regionToggle","newRegion","mapChange","TRANSMISSION","CHINA_ZH","length","CHINA_MAP2","HONGKONG_ZH","HONGKONG_MAP","CHINA_MAP1","US_ZH","US_MAP2","US_MAP","ITALY_ZH","ITALY_MAP2","ITALY_MAP","INTL_CONVEYANCE_ZH","JAPAN_MAP","map","find","x","regionName","EUROPE_MAP","playingToggle","scaleToggle","newScale","languageToggle","fullMapToggle","fullPlotToggle","hide","fullTreeToggle","darkModeToggle","handleMapZoomChange","newZoom","handleDateChange","newDate","handleTempDateChange","newDates","newDateStrings","slice","handlePlotTypeChange","newType","rebuild","componentDidMount","addEventListener","componentWillUnmount","removeEventListener","render","fullScreenMode","FullScreenIcon","COVID19","opacity","letterSpacing","contentRect","bounds","measureRef","display","flexDirection","padding"],"mappings":"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","sourcesContent":["import React, { Component, Fragment } from 'react'\nimport { Container, Row, Col } from 'reactstrap'\nimport ReactTooltip from 'react-tooltip'\nimport { AiOutlineFullscreen, AiOutlineFullscreenExit } from 'react-icons/ai'\nimport Helmet from 'react-helmet'\nimport Measure from 'react-measure'\nimport './App.css'\nimport Map from './Map'\nimport MapNavBar from './MapNavBar'\nimport DateSlider from './DateSlider'\nimport AnimationController from './AnimationController'\nimport MainCounts from './MainCounts'\nimport Plot from './Plot'\nimport Tree from './Tree'\nimport NavBar from './NavBar'\nimport Loading from './Loading'\nimport Footer from './Footer'\nimport Region from './Region'\nimport TransmissionNetwork from './TransmissionNetwork'\nimport { ReactComponent as Icon } from '../covid19.svg'\nimport i18n from '../data/i18n.yml'\nimport us_map from '../data/us_map.yml'\nimport * as str from '../utils/strings'\nimport { updateDarkMode, isoDate } from '../utils/utils'\nimport { mapText } from '../utils/map_text'\n\nconst defaultState = {\n    currentMap: 'WORLD',\n    metric: 'confirmedCount',\n    currentRegion: [ str.GLOBAL_ZH ],\n    playing: false,\n    scale: 'linear',\n    mapZoom: 1,\n    fullMap: false,\n    fullPlot: false,\n    fullTree: false\n}\n\nclass App extends Component {\n    state = {\n        startDate: '2020-01-24',\n        endDate: '2020-02-14',\n        date: '2020-02-14',\n        tempDate: '2020-02-14',\n        plotDates: [ '2020-01-24', '2020-02-14' ],\n        data: null,\n        dataLoaded: false,\n        lang: 'en',\n        darkMode: true,\n        mapDimensions: {\n            width: -1,\n            height: -1\n        },\n        fullDimensions: {\n            width: -1,\n            height: -1\n        },\n        plotType: 'plot_basic',\n        ...defaultState\n    }\n\n    fetchData = () =>\n        fetch('data/all_minified.json').then((res) => res.json()).then((res) => {\n            const latest = Object.keys(res[str.GLOBAL_ZH].confirmedCount).pop()\n            this.setState({\n                data: res,\n                dataLoaded: true,\n                date: latest,\n                tempDate: latest,\n                endDate: latest,\n                plotDates: [ this.state.plotDates[0], latest ]\n            })\n            this.tooltipRebuild()\n        })\n\n    componentDidMount() {\n        updateDarkMode(this.state.darkMode)\n        this.fetchData()\n        this.updateFullDimensions()\n        window.addEventListener('resize', this.updateFullDimensions)\n    }\n\n    componentWillUnmount() {\n        window.removeEventListener('resize', this.updateFullDimensions)\n    }\n\n    updateFullDimensions = () => {\n        const width = window.innerWidth || document.documentElement.clientWidth || document.body.clientWidth\n        const height = window.innerHeight || document.documentElement.clientHeight || document.body.clientHeight\n\n        if (height < 750 || width < 992) {\n            if (this.state.fullMap) this.setState({ fullMap: false })\n            if (this.state.fullPlot) this.setState({ fullPlot: false })\n        }\n\n        this.setState({\n            fullDimensions: {\n                height: Math.min(height - 250, (width - 200) * 3 / 4),\n                width: Math.min((height - 250) * 4 / 3, width - 200)\n            }\n        })\n    }\n\n    reset = () =>\n        this.setState({\n            ...defaultState,\n            date: this.state.endDate,\n            tempDate: this.state.endDate,\n            plotDates: [ this.state.startDate, this.state.endDate ]\n        })\n\n    mapToggle = (newMap) =>\n        this.setState({\n            currentMap: newMap,\n            // do not reset map zoom when switching between two China maps\n            mapZoom: newMap === str.WORLD_MAP || this.state.currentMap === str.WORLD_MAP ? 1 : this.state.mapZoom\n        })\n\n    metricToggle = (newMetric) => this.setState({ metric: newMetric })\n\n    regionToggle = (newRegion, mapChange = true) => {\n        const { currentMap } = this.state\n        this.setState({ currentRegion: newRegion })\n        if (!mapChange) return\n\n        if (currentMap === str.TRANSMISSION) return\n\n        if (newRegion[0] === str.CHINA_ZH) {\n            if (newRegion.length >= 4) {\n                this.mapToggle(str.CHINA_MAP2)\n            } else if (newRegion.length >= 2 && newRegion[1] === str.HONGKONG_ZH) {\n                this.mapToggle(str.HONGKONG_MAP)\n            } else if (currentMap !== str.CHINA_MAP2) {\n                this.mapToggle(str.CHINA_MAP1)\n            }\n        } else if (newRegion[0] === str.US_ZH) {\n            if (newRegion.length >= 2 && newRegion[1] in us_map) {\n                this.mapToggle(str.US_MAP2)\n            } else {\n                this.mapToggle(str.US_MAP)\n            }\n        } else if (newRegion[0] === str.ITALY_ZH) {\n            if (newRegion.length >= 3) {\n                this.mapToggle(str.ITALY_MAP2)\n            } else if (currentMap !== str.ITALY_MAP2) {\n                this.mapToggle(str.ITALY_MAP)\n            }\n        } else if (newRegion[0] === str.INTL_CONVEYANCE_ZH) {\n            this.mapToggle(str.JAPAN_MAP)\n        } else {\n            let map = Object.keys(mapText).find((x) => mapText[x].regionName === newRegion[0])\n            map = map != null ? map : str.WORLD_MAP\n            if (map === str.WORLD_MAP && currentMap === str.EUROPE_MAP) map = str.EUROPE_MAP\n            this.mapToggle(map)\n        }\n    }\n\n    playingToggle = () => this.setState({ playing: !this.state.playing })\n\n    scaleToggle = (newScale) => this.setState({ scale: newScale })\n\n    languageToggle = (lang) => this.setState({ lang })\n\n    fullMapToggle = () => {\n        this.setState({ fullMap: !this.state.fullMap })\n    }\n\n    fullPlotToggle = () => {\n        ReactTooltip.hide()\n        this.setState({ fullPlot: !this.state.fullPlot })\n    }\n\n    fullTreeToggle = () => {\n        this.setState({ fullTree: !this.state.fullTree })\n    }\n\n    darkModeToggle = () => {\n        updateDarkMode(!this.state.darkMode)\n        this.setState({ darkMode: !this.state.darkMode })\n    }\n\n    handleMapZoomChange = (newZoom) => this.setState({ mapZoom: newZoom })\n\n    handleDateChange = (newDate) => this.setState({ date: newDate, tempDate: newDate })\n\n    handleTempDateChange = (newDates) => {\n        const newDateStrings = newDates.map((x) => isoDate(x, this.state.endDate).slice(0, 10))\n        if (!this.state.fullPlot) {\n            this.setState({ tempDate: newDateStrings[0] })\n        } else {\n            this.setState({ plotDates: newDateStrings })\n        }\n    }\n\n    handlePlotTypeChange = (newType) => this.setState({ plotType: newType })\n\n    tooltipRebuild = () => ReactTooltip.rebuild()\n\n    render() {\n        const { lang, dataLoaded, currentMap, fullMap, fullPlot, fullTree, darkMode } = this.state\n        const fullScreenMode = fullMap ? 'map-full' : fullPlot ? 'plot-full' : fullTree ? 'tree-full' : ''\n        const FullScreenIcon = fullMap ? AiOutlineFullscreenExit : AiOutlineFullscreen\n\n        return (\n            <div className={`App ${darkMode ? 'dark' : ''}`}>\n                <Helmet>\n                    <title>{i18n.COVID19[lang]}</title>\n                </Helmet>\n                {!dataLoaded ? (\n                    <Loading />\n                ) : (\n                    <Fragment>\n                        <Container className={`app-container ${fullScreenMode}`}>\n                            <Row>\n                                <Col lg={!fullMap ? 7 : 12}>\n                                    <div className=\"header\">\n                                        <span className=\"header-icon\" style={{ opacity: dataLoaded ? 1 : 0 }}>\n                                            <Icon />\n                                        </span>\n                                        <span\n                                            className=\"header-title\"\n                                            style={{ letterSpacing: lang === 'zh' ? '1px' : 'normal' }}\n                                        >\n                                            {i18n.COVID19[lang]}\n                                        </span>\n                                    </div>\n                                    <NavBar\n                                        {...this.state}\n                                        scaleToggle={this.scaleToggle}\n                                        languageToggle={this.languageToggle}\n                                        darkModeToggle={this.darkModeToggle}\n                                        reset={this.reset}\n                                    />\n                                    {!fullPlot &&\n                                    !fullTree && (\n                                        <Measure\n                                            bounds\n                                            onResize={(contentRect) => {\n                                                this.setState({ mapDimensions: contentRect.bounds })\n                                            }}\n                                        >\n                                            {({ measureRef }) => (\n                                                <div\n                                                    ref={measureRef}\n                                                    className=\"map\"\n                                                    style={{\n                                                        height: !fullMap\n                                                            ? this.state.mapDimensions.width * 3 / 4\n                                                            : this.state.fullDimensions.height,\n                                                        width: !fullMap ? '100%' : this.state.fullDimensions.width\n                                                    }}\n                                                >\n                                                    {currentMap === str.TRANSMISSION && (\n                                                        <TransmissionNetwork\n                                                            {...this.state}\n                                                            regionToggle={this.regionToggle}\n                                                            tooltipRebuild={this.tooltipRebuild}\n                                                        />\n                                                    )}\n                                                    {currentMap !== str.TRANSMISSION && (\n                                                        <Map\n                                                            {...this.state}\n                                                            handleMapZoomChange={this.handleMapZoomChange}\n                                                            mapToggle={this.mapToggle}\n                                                            regionToggle={this.regionToggle}\n                                                            tooltipRebuild={this.tooltipRebuild}\n                                                        />\n                                                    )}\n                                                    <div className=\"map-full-button\">\n                                                        <FullScreenIcon\n                                                            size={fullMap ? 30 : 20}\n                                                            onClick={this.fullMapToggle}\n                                                        />\n                                                    </div>\n                                                </div>\n                                            )}\n                                        </Measure>\n                                    )}\n                                    <MapNavBar\n                                        {...this.state}\n                                        mapToggle={this.mapToggle}\n                                        metricToggle={this.metricToggle}\n                                        regionToggle={this.regionToggle}\n                                    />\n                                    <DateSlider\n                                        {...this.state}\n                                        handleDateChange={this.handleDateChange}\n                                        handleTempDateChange={this.handleTempDateChange}\n                                    />\n                                    <AnimationController\n                                        {...this.state}\n                                        handleDateChange={this.handleDateChange}\n                                        playingToggle={this.playingToggle}\n                                    />\n                                    <div className=\"footer-white\" />\n                                </Col>\n                                {!fullMap && (\n                                    <Col lg={!fullPlot && !fullTree ? 5 : 12} className=\"col-right\">\n                                        <Row style={{ display: 'flex', flexDirection: 'column', padding: 10 }}>\n                                            <Region\n                                                {...this.state}\n                                                regionToggle={this.regionToggle}\n                                                ReactTooltip={ReactTooltip}\n                                            />\n                                            <MainCounts {...this.state} />\n                                            <Plot\n                                                {...this.state}\n                                                regionToggle={this.regionToggle}\n                                                fullPlotToggle={this.fullPlotToggle}\n                                                scaleToggle={this.scaleToggle}\n                                                handlePlotTypeChange={this.handlePlotTypeChange}\n                                            />\n                                            <Tree\n                                                {...this.state}\n                                                regionToggle={this.regionToggle}\n                                                fullTreeToggle={this.fullTreeToggle}\n                                            />\n                                            <div className=\"footer-placeholder\" />\n                                        </Row>\n                                    </Col>\n                                )}\n                            </Row>\n                        </Container>\n                        <Footer {...this.state} />\n                    </Fragment>\n                )}\n                <ReactTooltip className=\"plot-tooltip\" type={darkMode ? 'dark' : 'light'} html={true} />\n            </div>\n        )\n    }\n}\n\nexport default App\n"]},"metadata":{},"sourceType":"module"}