{"ast":null,"code":"var _jsxFileName = \"/Users/jonchristie/Downloads/covid19-master/src/components/NavBar.js\";\nimport React, { Component } from 'react';\nimport { UncontrolledDropdown, DropdownToggle, DropdownMenu, DropdownItem } from 'reactstrap';\nimport { isMobile, isIPad13 } from 'react-device-detect';\nimport i18n from '../data/i18n.yml';\nexport default class NavBar extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      langText: 'English',\n      scaleText: i18n.LINEAR_SCALE.en,\n      darkModeText: i18n.DARK.en\n    };\n\n    this.setTexts = () => {\n      const {\n        scale,\n        lang,\n        darkMode\n      } = this.props;\n      this.setState({\n        langText: i18n.LANGUAGE[lang],\n        scaleText: scale === 'linear' ? i18n.LINEAR_SCALE[lang] : i18n.LOG_SCALE[lang],\n        darkModeText: darkMode ? i18n.DARK[lang] : i18n.LIGHT[lang]\n      });\n    };\n\n    this.onScaleChange = () => {\n      const newScale = this.props.scale === 'linear' ? 'log' : 'linear';\n      this.props.scaleToggle(newScale);\n    };\n  }\n\n  componentDidUpdate(prevProps, prevState) {\n    if (prevProps.scale !== this.props.scale || prevProps.lang !== this.props.lang || prevProps.darkMode !== this.props.darkMode) this.setTexts();\n  }\n\n  render() {\n    const {\n      scale,\n      lang,\n      darkMode,\n      languageToggle\n    } = this.props;\n    return /*#__PURE__*/React.createElement(\"div\", {\n      className: \"nav-bar\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 39,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(UncontrolledDropdown, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 40,\n        columnNumber: 17\n      }\n    }, /*#__PURE__*/React.createElement(DropdownToggle, {\n      tag: \"div\",\n      className: \"nav-bar-icon\",\n      \"data-toggle\": \"dropdown\",\n      \"data-tip\": i18n.LANGUAGE_HELP_TEXT[lang],\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 41,\n        columnNumber: 21\n      }\n    }, i18n.LANGUAGE[lang]), /*#__PURE__*/React.createElement(DropdownMenu, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 49,\n        columnNumber: 21\n      }\n    }, Object.keys(i18n.LANGUAGE).map(x => /*#__PURE__*/React.createElement(DropdownItem, {\n      key: x,\n      className: x === lang ? 'current' : '',\n      onClick: () => languageToggle(x),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 51,\n        columnNumber: 29\n      }\n    }, i18n.LANGUAGE[x])))), isMobile || isIPad13 ? /*#__PURE__*/React.createElement(\"div\", {\n      className: \"nav-bar-icon\",\n      onTouchStart: this.props.darkModeToggle,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 62,\n        columnNumber: 21\n      }\n    }, darkMode ? i18n.DARK[lang] : i18n.LIGHT[lang]) : /*#__PURE__*/React.createElement(\"div\", {\n      className: \"nav-bar-icon\",\n      \"data-tip\": darkMode ? i18n.LIGHT_MODE_HELP_TEXT[lang] : i18n.DARK_MODE_HELP_TEXT[lang],\n      onClick: this.props.darkModeToggle,\n      onMouseEnter: () => this.setState({\n        darkModeText: darkMode ? i18n.LIGHT[lang] : i18n.DARK[lang]\n      }),\n      onMouseLeave: this.setTexts,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 66,\n        columnNumber: 21\n      }\n    }, this.state.darkModeText), isMobile || isIPad13 ? /*#__PURE__*/React.createElement(\"div\", {\n      className: \"nav-bar-icon\",\n      onTouchStart: this.onScaleChange,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 80,\n        columnNumber: 21\n      }\n    }, scale === 'linear' ? i18n.LINEAR_SCALE[lang] : i18n.LOG_SCALE[lang]) : /*#__PURE__*/React.createElement(\"div\", {\n      className: \"nav-bar-icon\",\n      \"data-tip\": scale === 'linear' ? i18n.LOG_SCALE_HELP_TEXT[lang] : i18n.LINEAR_SCALE_HELP_TEXT[lang],\n      onClick: this.onScaleChange,\n      onMouseEnter: () => this.setState({\n        scaleText: scale === 'linear' ? i18n.LOG_SCALE[lang] : i18n.LINEAR_SCALE[lang]\n      }),\n      onMouseLeave: this.setTexts,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 84,\n        columnNumber: 21\n      }\n    }, this.state.scaleText), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"nav-bar-icon\",\n      \"data-tip\": i18n.RESET_HELP_TEXT[lang],\n      onClick: this.props.reset,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 99,\n        columnNumber: 17\n      }\n    }, i18n.RESET[lang]));\n  }\n\n}","map":{"version":3,"sources":["/Users/jonchristie/Downloads/covid19-master/src/components/NavBar.js"],"names":["React","Component","UncontrolledDropdown","DropdownToggle","DropdownMenu","DropdownItem","isMobile","isIPad13","i18n","NavBar","state","langText","scaleText","LINEAR_SCALE","en","darkModeText","DARK","setTexts","scale","lang","darkMode","props","setState","LANGUAGE","LOG_SCALE","LIGHT","onScaleChange","newScale","scaleToggle","componentDidUpdate","prevProps","prevState","render","languageToggle","LANGUAGE_HELP_TEXT","Object","keys","map","x","darkModeToggle","LIGHT_MODE_HELP_TEXT","DARK_MODE_HELP_TEXT","LOG_SCALE_HELP_TEXT","LINEAR_SCALE_HELP_TEXT","RESET_HELP_TEXT","reset","RESET"],"mappings":"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","sourcesContent":["import React, { Component } from 'react'\nimport { UncontrolledDropdown, DropdownToggle, DropdownMenu, DropdownItem } from 'reactstrap'\nimport { isMobile, isIPad13 } from 'react-device-detect'\nimport i18n from '../data/i18n.yml'\n\nexport default class NavBar extends Component {\n    state = {\n        langText: 'English',\n        scaleText: i18n.LINEAR_SCALE.en,\n        darkModeText: i18n.DARK.en\n    }\n\n    componentDidUpdate(prevProps, prevState) {\n        if (\n            prevProps.scale !== this.props.scale ||\n            prevProps.lang !== this.props.lang ||\n            prevProps.darkMode !== this.props.darkMode\n        )\n            this.setTexts()\n    }\n\n    setTexts = () => {\n        const { scale, lang, darkMode } = this.props\n        this.setState({\n            langText: i18n.LANGUAGE[lang],\n            scaleText: scale === 'linear' ? i18n.LINEAR_SCALE[lang] : i18n.LOG_SCALE[lang],\n            darkModeText: darkMode ? i18n.DARK[lang] : i18n.LIGHT[lang]\n        })\n    }\n\n    onScaleChange = () => {\n        const newScale = this.props.scale === 'linear' ? 'log' : 'linear'\n        this.props.scaleToggle(newScale)\n    }\n\n    render() {\n        const { scale, lang, darkMode, languageToggle } = this.props\n        return (\n            <div className=\"nav-bar\">\n                <UncontrolledDropdown>\n                    <DropdownToggle\n                        tag=\"div\"\n                        className=\"nav-bar-icon\"\n                        data-toggle=\"dropdown\"\n                        data-tip={i18n.LANGUAGE_HELP_TEXT[lang]}\n                    >\n                        {i18n.LANGUAGE[lang]}\n                    </DropdownToggle>\n                    <DropdownMenu>\n                        {Object.keys(i18n.LANGUAGE).map((x) => (\n                            <DropdownItem\n                                key={x}\n                                className={x === lang ? 'current' : ''}\n                                onClick={() => languageToggle(x)}\n                            >\n                                {i18n.LANGUAGE[x]}\n                            </DropdownItem>\n                        ))}\n                    </DropdownMenu>\n                </UncontrolledDropdown>\n                {isMobile || isIPad13 ? (\n                    <div className=\"nav-bar-icon\" onTouchStart={this.props.darkModeToggle}>\n                        {darkMode ? i18n.DARK[lang] : i18n.LIGHT[lang]}\n                    </div>\n                ) : (\n                    <div\n                        className=\"nav-bar-icon\"\n                        data-tip={darkMode ? i18n.LIGHT_MODE_HELP_TEXT[lang] : i18n.DARK_MODE_HELP_TEXT[lang]}\n                        onClick={this.props.darkModeToggle}\n                        onMouseEnter={() =>\n                            this.setState({\n                                darkModeText: darkMode ? i18n.LIGHT[lang] : i18n.DARK[lang]\n                            })}\n                        onMouseLeave={this.setTexts}\n                    >\n                        {this.state.darkModeText}\n                    </div>\n                )}\n                {isMobile || isIPad13 ? (\n                    <div className=\"nav-bar-icon\" onTouchStart={this.onScaleChange}>\n                        {scale === 'linear' ? i18n.LINEAR_SCALE[lang] : i18n.LOG_SCALE[lang]}\n                    </div>\n                ) : (\n                    <div\n                        className=\"nav-bar-icon\"\n                        data-tip={\n                            scale === 'linear' ? i18n.LOG_SCALE_HELP_TEXT[lang] : i18n.LINEAR_SCALE_HELP_TEXT[lang]\n                        }\n                        onClick={this.onScaleChange}\n                        onMouseEnter={() =>\n                            this.setState({\n                                scaleText: scale === 'linear' ? i18n.LOG_SCALE[lang] : i18n.LINEAR_SCALE[lang]\n                            })}\n                        onMouseLeave={this.setTexts}\n                    >\n                        {this.state.scaleText}\n                    </div>\n                )}\n                <div className=\"nav-bar-icon\" data-tip={i18n.RESET_HELP_TEXT[lang]} onClick={this.props.reset}>\n                    {i18n.RESET[lang]}\n                </div>\n            </div>\n        )\n    }\n}\n"]},"metadata":{},"sourceType":"module"}