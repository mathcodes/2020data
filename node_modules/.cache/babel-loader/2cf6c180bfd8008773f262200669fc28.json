{"ast":null,"code":"var _jsxFileName = \"/Users/jonchristie/Desktop/2020data/src/components/Table.js\";\nimport React, { Component } from 'react';\nimport { AiFillCaretRight, AiFillCaretDown } from 'react-icons/ai';\nimport RawTable from './RawTable';\nimport { generateTreeData } from '../utils/utils';\nimport * as str from '../utils/strings';\nimport i18n from '../data/i18n.yml';\nexport default class Table extends Component {\n  constructor(...args) {\n    super(...args);\n\n    this.onRowClick = row => {\n      this.props.regionToggle(row.original.region.split('.'));\n    };\n\n    this.highlightCurrentRegion = () => {\n      document.querySelectorAll('.data-table tr').forEach(x => x.classList.remove('current')); // hack\n\n      setTimeout(() => {\n        const elem = document.getElementById(`table-${this.props.currentRegion.join('.')}`);\n        const tbodyElem = document.querySelector('.data-table tbody'); // scroll into view if the row is not visible\n\n        if (elem != null && tbodyElem != null) {\n          elem.classList.add('current');\n          const bounding = elem.getBoundingClientRect();\n          const tableBounding = tbodyElem.getBoundingClientRect();\n          const isInViewPort = bounding.top >= tableBounding.top && bounding.bottom <= tableBounding.bottom;\n          if (!isInViewPort) tbodyElem.scrollTop = elem.offsetTop - tbodyElem.offsetTop;\n        }\n      }, 200);\n    };\n\n    this.getInitialSate = tableData => {\n      const {\n        currentRegion,\n        playing\n      } = this.props;\n      if (currentRegion[0] === str.GLOBAL_ZH && playing) return {};\n      let indices = [];\n      currentRegion.slice(0, currentRegion.length - 1).forEach(r => {\n        const regionData = indices.reduce((s, x) => Array.isArray(s) ? s[x] : s.subRows[x], tableData);\n        const subregions = Array.isArray(regionData) ? regionData : regionData.subRows;\n        const newIdx = subregions.findIndex(x => x.name === r);\n        indices.push(newIdx);\n      });\n      const expanded = indices.map((x, i) => indices.slice(0, i + 1).join('.')).reduce((s, x) => {\n        s[x] = true;\n        return s;\n      }, {});\n      return {\n        expanded\n      };\n    };\n  }\n\n  componentDidUpdate(prevProps) {\n    if (prevProps.currentRegion.join('.') !== this.props.currentRegion.join('.')) this.highlightCurrentRegion();\n  }\n\n  componentDidMount() {\n    this.highlightCurrentRegion();\n  }\n\n  shouldComponentUpdate(nextProps) {\n    return nextProps.lang !== this.props.lang || nextProps.date !== this.props.date || nextProps.currentRegion !== this.props.currentRegion || nextProps.fullTree !== this.props.fullTree;\n  }\n\n  render() {\n    const {\n      data,\n      lang,\n      date,\n      fullTree\n    } = this.props;\n    if (data == null) return /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 72,\n        columnNumber: 34\n      }\n    });\n    const tableData = generateTreeData(data, date, lang, false, 'subRows', 'confirmedCount', str.GLOBAL_ZH, fullTree);\n    let columns = [{\n      // Build our expander column\n      id: 'expander',\n      // Make sure it has an ID\n      Header: ({\n        getToggleAllRowsExpandedProps,\n        isAllRowsExpanded\n      }) => /*#__PURE__*/React.createElement(\"span\", Object.assign({}, getToggleAllRowsExpandedProps(), {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 89,\n          columnNumber: 21\n        }\n      }), isAllRowsExpanded ? /*#__PURE__*/React.createElement(AiFillCaretDown, {\n        size: 14,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 90,\n          columnNumber: 46\n        }\n      }) : /*#__PURE__*/React.createElement(AiFillCaretRight, {\n        size: 14,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 90,\n          columnNumber: 78\n        }\n      })),\n      Cell: ({\n        row\n      }) => // Use the row.canExpand and row.getToggleRowExpandedProps prop getter\n      // to build the toggle for expanding a row\n      row.canExpand ? /*#__PURE__*/React.createElement(\"span\", Object.assign({}, row.getToggleRowExpandedProps({\n        style: {\n          // We can even use the row.depth property\n          // and paddingLeft to indicate the depth\n          // of the row\n          paddingLeft: 0\n        }\n      }), {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 97,\n          columnNumber: 25\n        }\n      }), row.isExpanded ? /*#__PURE__*/React.createElement(AiFillCaretDown, {\n        size: 14,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 107,\n          columnNumber: 47\n        }\n      }) : /*#__PURE__*/React.createElement(AiFillCaretRight, {\n        size: 14,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 107,\n          columnNumber: 79\n        }\n      })) : null\n    }, {\n      id: 'table-region',\n      Header: i18n.REGION[lang],\n      Cell: ({\n        row\n      }) => {\n        return /*#__PURE__*/React.createElement(\"span\", {\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 116,\n            columnNumber: 25\n          }\n        }, `${[...Array(row.depth + 1).keys()].map(x => 'ã€€').join('')}${row.original.displayName}\\u00a0\\u00a0`);\n      },\n      accessor: 'displayName'\n    }, {\n      id: 'table-confirmed',\n      Header: i18n.CONFIRMED[lang],\n      Cell: ({\n        row\n      }) => !isNaN(row.original.confirmedCount) ? row.original.confirmedCount : str.EMPTY,\n      accessor: 'confirmedCount'\n    }, {\n      id: 'table-deaths',\n      Header: i18n.DEATHS[lang],\n      Cell: ({\n        row\n      }) => !isNaN(row.original.deadCount) ? row.original.deadCount : str.EMPTY,\n      accessor: 'deadCount'\n    }, {\n      id: 'table-recovery',\n      Header: i18n.RECOVERED[lang],\n      Cell: ({\n        row\n      }) => !isNaN(row.original.curedCount) ? row.original.curedCount : str.EMPTY,\n      accessor: 'curedCount'\n    }];\n    if (fullTree) columns = [...columns, ...[{\n      id: 'table-active',\n      Header: i18n.ACTIVE[lang],\n      Cell: ({\n        row\n      }) => !isNaN(row.original.active) ? row.original.active : str.EMPTY,\n      accessor: 'active'\n    }, {\n      id: 'table-newConfirmed',\n      Header: i18n.NEW_CONFIRMED[lang],\n      Cell: ({\n        row\n      }) => !isNaN(row.original.newConfirmed) ? row.original.newConfirmed : str.EMPTY,\n      accessor: 'newConfirmed'\n    }, {\n      id: 'table-newDead',\n      Header: i18n.NEW_DEATHS[lang],\n      Cell: ({\n        row\n      }) => !isNaN(row.original.newDead) ? row.original.newDead : str.EMPTY,\n      accessor: 'newDead'\n    }, {\n      id: 'table-fatalityRate',\n      Header: i18n.FATALITY_RATE[lang],\n      Cell: ({\n        row\n      }) => !isNaN(row.original.fatalityRate) ? (row.original.fatalityRate * 100).toFixed(2) + '%' : str.EMPTY,\n      accessor: 'fatalityRate',\n      sortType: 'basic'\n    }, {\n      id: 'table-recoveryRate',\n      Header: i18n.RECOVERY_RATE[lang],\n      Cell: ({\n        row\n      }) => !isNaN(row.original.recoveryRate) ? (row.original.recoveryRate * 100).toFixed(2) + '%' : str.EMPTY,\n      accessor: 'recoveryRate',\n      sortType: 'basic'\n    }]];\n    const initialState = this.getInitialSate(tableData);\n    return /*#__PURE__*/React.createElement(\"div\", {\n      style: {\n        height: '100%'\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 190,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(RawTable, {\n      columns: columns,\n      data: tableData,\n      initialState: initialState,\n      onRowClick: this.onRowClick,\n      filterPlaceholder: `${i18n.SEARCH[lang]} ...`,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 191,\n        columnNumber: 17\n      }\n    }));\n  }\n\n}","map":{"version":3,"sources":["/Users/jonchristie/Desktop/2020data/src/components/Table.js"],"names":["React","Component","AiFillCaretRight","AiFillCaretDown","RawTable","generateTreeData","str","i18n","Table","onRowClick","row","props","regionToggle","original","region","split","highlightCurrentRegion","document","querySelectorAll","forEach","x","classList","remove","setTimeout","elem","getElementById","currentRegion","join","tbodyElem","querySelector","add","bounding","getBoundingClientRect","tableBounding","isInViewPort","top","bottom","scrollTop","offsetTop","getInitialSate","tableData","playing","GLOBAL_ZH","indices","slice","length","r","regionData","reduce","s","Array","isArray","subRows","subregions","newIdx","findIndex","name","push","expanded","map","i","componentDidUpdate","prevProps","componentDidMount","shouldComponentUpdate","nextProps","lang","date","fullTree","render","data","columns","id","Header","getToggleAllRowsExpandedProps","isAllRowsExpanded","Cell","canExpand","getToggleRowExpandedProps","style","paddingLeft","isExpanded","REGION","depth","keys","displayName","accessor","CONFIRMED","isNaN","confirmedCount","EMPTY","DEATHS","deadCount","RECOVERED","curedCount","ACTIVE","active","NEW_CONFIRMED","newConfirmed","NEW_DEATHS","newDead","FATALITY_RATE","fatalityRate","toFixed","sortType","RECOVERY_RATE","recoveryRate","initialState","height","SEARCH"],"mappings":"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","sourcesContent":["import React, { Component } from 'react'\nimport { AiFillCaretRight, AiFillCaretDown } from 'react-icons/ai'\nimport RawTable from './RawTable'\nimport { generateTreeData } from '../utils/utils'\nimport * as str from '../utils/strings'\nimport i18n from '../data/i18n.yml'\n\nexport default class Table extends Component {\n    onRowClick = (row) => {\n        this.props.regionToggle(row.original.region.split('.'))\n    }\n\n    highlightCurrentRegion = () => {\n        document.querySelectorAll('.data-table tr').forEach((x) => x.classList.remove('current'))\n        // hack\n        setTimeout(() => {\n            const elem = document.getElementById(`table-${this.props.currentRegion.join('.')}`)\n            const tbodyElem = document.querySelector('.data-table tbody')\n\n            // scroll into view if the row is not visible\n            if (elem != null && tbodyElem != null) {\n                elem.classList.add('current')\n                const bounding = elem.getBoundingClientRect()\n                const tableBounding = tbodyElem.getBoundingClientRect()\n                const isInViewPort = bounding.top >= tableBounding.top && bounding.bottom <= tableBounding.bottom\n\n                if (!isInViewPort) tbodyElem.scrollTop = elem.offsetTop - tbodyElem.offsetTop\n            }\n        }, 200)\n    }\n\n    getInitialSate = (tableData) => {\n        const { currentRegion, playing } = this.props\n        if (currentRegion[0] === str.GLOBAL_ZH && playing) return {}\n\n        let indices = []\n        currentRegion.slice(0, currentRegion.length - 1).forEach((r) => {\n            const regionData = indices.reduce((s, x) => (Array.isArray(s) ? s[x] : s.subRows[x]), tableData)\n            const subregions = Array.isArray(regionData) ? regionData : regionData.subRows\n            const newIdx = subregions.findIndex((x) => x.name === r)\n            indices.push(newIdx)\n        })\n        const expanded = indices.map((x, i) => indices.slice(0, i + 1).join('.')).reduce((s, x) => {\n            s[x] = true\n            return s\n        }, {})\n\n        return {\n            expanded\n        }\n    }\n\n    componentDidUpdate(prevProps) {\n        if (prevProps.currentRegion.join('.') !== this.props.currentRegion.join('.')) this.highlightCurrentRegion()\n    }\n\n    componentDidMount() {\n        this.highlightCurrentRegion()\n    }\n\n    shouldComponentUpdate(nextProps) {\n        return (\n            nextProps.lang !== this.props.lang ||\n            nextProps.date !== this.props.date ||\n            nextProps.currentRegion !== this.props.currentRegion ||\n            nextProps.fullTree !== this.props.fullTree\n        )\n    }\n\n    render() {\n        const { data, lang, date, fullTree } = this.props\n        if (data == null) return <div />\n        const tableData = generateTreeData(\n            data,\n            date,\n            lang,\n            false,\n            'subRows',\n            'confirmedCount',\n            str.GLOBAL_ZH,\n            fullTree\n        )\n\n        let columns = [\n            {\n                // Build our expander column\n                id: 'expander', // Make sure it has an ID\n                Header: ({ getToggleAllRowsExpandedProps, isAllRowsExpanded }) => (\n                    <span {...getToggleAllRowsExpandedProps()}>\n                        {isAllRowsExpanded ? <AiFillCaretDown size={14} /> : <AiFillCaretRight size={14} />}\n                    </span>\n                ),\n                Cell: ({ row }) =>\n                    // Use the row.canExpand and row.getToggleRowExpandedProps prop getter\n                    // to build the toggle for expanding a row\n                    row.canExpand ? (\n                        <span\n                            {...row.getToggleRowExpandedProps({\n                                style: {\n                                    // We can even use the row.depth property\n                                    // and paddingLeft to indicate the depth\n                                    // of the row\n                                    paddingLeft: 0\n                                }\n                            })}\n                        >\n                            {row.isExpanded ? <AiFillCaretDown size={14} /> : <AiFillCaretRight size={14} />}\n                        </span>\n                    ) : null\n            },\n            {\n                id: 'table-region',\n                Header: i18n.REGION[lang],\n                Cell: ({ row }) => {\n                    return (\n                        <span>{`${[ ...Array(row.depth + 1).keys() ].map((x) => 'ã€€').join('')}${row.original\n                            .displayName}\\u00a0\\u00a0`}</span>\n                    )\n                },\n                accessor: 'displayName'\n            },\n            {\n                id: 'table-confirmed',\n                Header: i18n.CONFIRMED[lang],\n                Cell: ({ row }) => (!isNaN(row.original.confirmedCount) ? row.original.confirmedCount : str.EMPTY),\n                accessor: 'confirmedCount'\n            },\n            {\n                id: 'table-deaths',\n                Header: i18n.DEATHS[lang],\n                Cell: ({ row }) => (!isNaN(row.original.deadCount) ? row.original.deadCount : str.EMPTY),\n                accessor: 'deadCount'\n            },\n            {\n                id: 'table-recovery',\n                Header: i18n.RECOVERED[lang],\n                Cell: ({ row }) => (!isNaN(row.original.curedCount) ? row.original.curedCount : str.EMPTY),\n                accessor: 'curedCount'\n            }\n        ]\n\n        if (fullTree)\n            columns = [\n                ...columns,\n                ...[\n                    {\n                        id: 'table-active',\n                        Header: i18n.ACTIVE[lang],\n                        Cell: ({ row }) => (!isNaN(row.original.active) ? row.original.active : str.EMPTY),\n                        accessor: 'active'\n                    },\n                    {\n                        id: 'table-newConfirmed',\n                        Header: i18n.NEW_CONFIRMED[lang],\n                        Cell: ({ row }) => (!isNaN(row.original.newConfirmed) ? row.original.newConfirmed : str.EMPTY),\n                        accessor: 'newConfirmed'\n                    },\n                    {\n                        id: 'table-newDead',\n                        Header: i18n.NEW_DEATHS[lang],\n                        Cell: ({ row }) => (!isNaN(row.original.newDead) ? row.original.newDead : str.EMPTY),\n                        accessor: 'newDead'\n                    },\n                    {\n                        id: 'table-fatalityRate',\n                        Header: i18n.FATALITY_RATE[lang],\n                        Cell: ({ row }) =>\n                            !isNaN(row.original.fatalityRate)\n                                ? (row.original.fatalityRate * 100).toFixed(2) + '%'\n                                : str.EMPTY,\n                        accessor: 'fatalityRate',\n                        sortType: 'basic'\n                    },\n                    {\n                        id: 'table-recoveryRate',\n                        Header: i18n.RECOVERY_RATE[lang],\n                        Cell: ({ row }) =>\n                            !isNaN(row.original.recoveryRate)\n                                ? (row.original.recoveryRate * 100).toFixed(2) + '%'\n                                : str.EMPTY,\n                        accessor: 'recoveryRate',\n                        sortType: 'basic'\n                    }\n                ]\n            ]\n\n        const initialState = this.getInitialSate(tableData)\n\n        return (\n            <div style={{ height: '100%' }}>\n                <RawTable\n                    columns={columns}\n                    data={tableData}\n                    initialState={initialState}\n                    onRowClick={this.onRowClick}\n                    filterPlaceholder={`${i18n.SEARCH[lang]} ...`}\n                />\n            </div>\n        )\n    }\n}\n"]},"metadata":{},"sourceType":"module"}