{"ast":null,"code":"import _classCallCheck from\"/Users/jonchristie/Desktop/2020data/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";import _createClass from\"/Users/jonchristie/Desktop/2020data/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";import _inherits from\"/Users/jonchristie/Desktop/2020data/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";import _createSuper from\"/Users/jonchristie/Desktop/2020data/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createSuper\";import React,{Component}from'react';import{metricText,getDataFromRegion,previousDay}from'../utils/utils';import i18n from'../data/i18n.yml';var MainCounts=/*#__PURE__*/function(_Component){_inherits(MainCounts,_Component);var _super=_createSuper(MainCounts);function MainCounts(){_classCallCheck(this,MainCounts);return _super.apply(this,arguments);}_createClass(MainCounts,[{key:\"render\",value:function render(){var _this$props=this.props,data=_this$props.data,currentRegion=_this$props.currentRegion,date=_this$props.date,lang=_this$props.lang,fullPlot=_this$props.fullPlot,fullTree=_this$props.fullTree;if(data==null)return/*#__PURE__*/React.createElement(\"div\",null);return/*#__PURE__*/React.createElement(\"div\",{className:\"counts-wrap\"},!fullPlot&&!fullTree&&['confirmedCount','deadCount','curedCount'].map(function(metric){var count=Object.keys(getDataFromRegion(data,currentRegion)[metric]).length>0?getDataFromRegion(data,currentRegion)[metric][date]:'—';var preDate=previousDay(date,'2019-09-01','2050-01-01');var preCount=Object.keys(getDataFromRegion(data,currentRegion)[metric]).length>0?getDataFromRegion(data,currentRegion)[metric][preDate]:0;var diff=0;if(parseInt(count)!=null&&parseInt(preCount)!=null)diff=parseInt(count)-parseInt(preCount);return/*#__PURE__*/React.createElement(\"div\",{key:\"\".concat(metric,\"-number\"),className:\"count-wrap\"},/*#__PURE__*/React.createElement(\"div\",{className:\"count\"},count?count.toLocaleString():0),/*#__PURE__*/React.createElement(\"div\",{className:\"count-title\"},metricText[metric][lang]),/*#__PURE__*/React.createElement(\"div\",{className:\"count-daily\"},diff!=null&&!isNaN(diff)&&/*#__PURE__*/React.createElement(\"span\",null,\"\".concat(i18n.NEWCASE[lang],\" \").concat(diff>=0?'+':'').concat(diff.toLocaleString()))));}));}}]);return MainCounts;}(Component);export{MainCounts as default};","map":{"version":3,"sources":["/Users/jonchristie/Desktop/2020data/src/components/MainCounts.js"],"names":["React","Component","metricText","getDataFromRegion","previousDay","i18n","MainCounts","props","data","currentRegion","date","lang","fullPlot","fullTree","map","metric","count","Object","keys","length","preDate","preCount","diff","parseInt","toLocaleString","isNaN","NEWCASE"],"mappings":"wlBAAA,MAAOA,CAAAA,KAAP,EAAgBC,SAAhB,KAAiC,OAAjC,CACA,OAASC,UAAT,CAAqBC,iBAArB,CAAwCC,WAAxC,KAA2D,gBAA3D,CACA,MAAOC,CAAAA,IAAP,KAAiB,kBAAjB,C,GAEqBC,CAAAA,U,kQACR,iBAC2D,KAAKC,KADhE,CACGC,IADH,aACGA,IADH,CACSC,aADT,aACSA,aADT,CACwBC,IADxB,aACwBA,IADxB,CAC8BC,IAD9B,aAC8BA,IAD9B,CACoCC,QADpC,aACoCA,QADpC,CAC8CC,QAD9C,aAC8CA,QAD9C,CAEL,GAAIL,IAAI,EAAI,IAAZ,CAAkB,mBAAO,+BAAP,CAElB,mBACI,2BAAK,SAAS,CAAC,aAAf,EACK,CAACI,QAAD,EACG,CAACC,QADJ,EAEG,CAAE,gBAAF,CAAoB,WAApB,CAAiC,YAAjC,EAAgDC,GAAhD,CAAoD,SAACC,MAAD,CAAY,CAC5D,GAAMC,CAAAA,KAAK,CACPC,MAAM,CAACC,IAAP,CAAYf,iBAAiB,CAACK,IAAD,CAAOC,aAAP,CAAjB,CAAuCM,MAAvC,CAAZ,EAA4DI,MAA5D,CAAqE,CAArE,CACMhB,iBAAiB,CAACK,IAAD,CAAOC,aAAP,CAAjB,CAAuCM,MAAvC,EAA+CL,IAA/C,CADN,CAEM,GAHV,CAIA,GAAMU,CAAAA,OAAO,CAAGhB,WAAW,CAACM,IAAD,CAAO,YAAP,CAAqB,YAArB,CAA3B,CAEA,GAAMW,CAAAA,QAAQ,CACVJ,MAAM,CAACC,IAAP,CAAYf,iBAAiB,CAACK,IAAD,CAAOC,aAAP,CAAjB,CAAuCM,MAAvC,CAAZ,EAA4DI,MAA5D,CAAqE,CAArE,CACMhB,iBAAiB,CAACK,IAAD,CAAOC,aAAP,CAAjB,CAAuCM,MAAvC,EAA+CK,OAA/C,CADN,CAEM,CAHV,CAIA,GAAIE,CAAAA,IAAI,CAAG,CAAX,CACA,GAAIC,QAAQ,CAACP,KAAD,CAAR,EAAmB,IAAnB,EAA2BO,QAAQ,CAACF,QAAD,CAAR,EAAsB,IAArD,CACIC,IAAI,CAAGC,QAAQ,CAACP,KAAD,CAAR,CAAkBO,QAAQ,CAACF,QAAD,CAAjC,CAEJ,mBACI,2BAAK,GAAG,WAAKN,MAAL,WAAR,CAA8B,SAAS,CAAC,YAAxC,eACI,2BAAK,SAAS,CAAC,OAAf,EAAwBC,KAAK,CAAGA,KAAK,CAACQ,cAAN,EAAH,CAA4B,CAAzD,CADJ,cAEI,2BAAK,SAAS,CAAC,aAAf,EAA8BtB,UAAU,CAACa,MAAD,CAAV,CAAmBJ,IAAnB,CAA9B,CAFJ,cAGI,2BAAK,SAAS,CAAC,aAAf,EACKW,IAAI,EAAI,IAAR,EACD,CAACG,KAAK,CAACH,IAAD,CADL,eAEG,0CAAUjB,IAAI,CAACqB,OAAL,CAAaf,IAAb,CAAV,aAAgCW,IAAI,EAAI,CAAR,CAAY,GAAZ,CAAkB,EAAlD,SAAuDA,IAAI,CAACE,cAAL,EAAvD,EAHR,CAHJ,CADJ,CAYH,CA3BD,CAHR,CADJ,CAkCH,C,wBAvCmCvB,S,SAAnBK,U","sourcesContent":["import React, { Component } from 'react'\nimport { metricText, getDataFromRegion, previousDay } from '../utils/utils'\nimport i18n from '../data/i18n.yml'\n\nexport default class MainCounts extends Component {\n    render() {\n        const { data, currentRegion, date, lang, fullPlot, fullTree } = this.props\n        if (data == null) return <div />\n\n        return (\n            <div className=\"counts-wrap\">\n                {!fullPlot &&\n                    !fullTree &&\n                    [ 'confirmedCount', 'deadCount', 'curedCount' ].map((metric) => {\n                        const count =\n                            Object.keys(getDataFromRegion(data, currentRegion)[metric]).length > 0\n                                ? getDataFromRegion(data, currentRegion)[metric][date]\n                                : '—'\n                        const preDate = previousDay(date, '2019-09-01', '2050-01-01')\n\n                        const preCount =\n                            Object.keys(getDataFromRegion(data, currentRegion)[metric]).length > 0\n                                ? getDataFromRegion(data, currentRegion)[metric][preDate]\n                                : 0\n                        let diff = 0\n                        if (parseInt(count) != null && parseInt(preCount) != null)\n                            diff = parseInt(count) - parseInt(preCount)\n\n                        return (\n                            <div key={`${metric}-number`} className=\"count-wrap\">\n                                <div className=\"count\">{count ? count.toLocaleString() : 0}</div>\n                                <div className=\"count-title\">{metricText[metric][lang]}</div>\n                                <div className=\"count-daily\">\n                                    {diff != null &&\n                                    !isNaN(diff) && (\n                                        <span>{`${i18n.NEWCASE[lang]} ${diff >= 0 ? '+' : ''}${diff.toLocaleString()}`}</span>\n                                    )}\n                                </div>\n                            </div>\n                        )\n                    })}\n            </div>\n        )\n    }\n}\n"]},"metadata":{},"sourceType":"module"}