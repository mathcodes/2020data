{"ast":null,"code":"var _jsxFileName = \"/Users/jonchristie/Downloads/covid19-master/src/components/MainCounts.js\";\nimport React, { Component } from 'react';\nimport { metricText, getDataFromRegion, previousDay } from '../utils/utils';\nimport i18n from '../data/i18n.yml';\nexport default class MainCounts extends Component {\n  render() {\n    const {\n      data,\n      currentRegion,\n      date,\n      lang,\n      fullPlot,\n      fullTree\n    } = this.props;\n    if (data == null) return /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 8,\n        columnNumber: 34\n      }\n    });\n    return /*#__PURE__*/React.createElement(\"div\", {\n      className: \"counts-wrap\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 11,\n        columnNumber: 13\n      }\n    }, !fullPlot && !fullTree && ['confirmedCount', 'deadCount', 'curedCount'].map(metric => {\n      const count = Object.keys(getDataFromRegion(data, currentRegion)[metric]).length > 0 ? getDataFromRegion(data, currentRegion)[metric][date] : '—';\n      const preDate = previousDay(date, '2019-09-01', '2050-01-01');\n      const preCount = Object.keys(getDataFromRegion(data, currentRegion)[metric]).length > 0 ? getDataFromRegion(data, currentRegion)[metric][preDate] : 0;\n      let diff = 0;\n      if (parseInt(count) != null && parseInt(preCount) != null) diff = parseInt(count) - parseInt(preCount);\n      return /*#__PURE__*/React.createElement(\"div\", {\n        key: `${metric}-number`,\n        className: \"count-wrap\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 30,\n          columnNumber: 29\n        }\n      }, /*#__PURE__*/React.createElement(\"div\", {\n        className: \"count\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 31,\n          columnNumber: 33\n        }\n      }, count ? count.toLocaleString() : 0), /*#__PURE__*/React.createElement(\"div\", {\n        className: \"count-title\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 32,\n          columnNumber: 33\n        }\n      }, metricText[metric][lang]), /*#__PURE__*/React.createElement(\"div\", {\n        className: \"count-daily\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 33,\n          columnNumber: 33\n        }\n      }, diff != null && !isNaN(diff) && /*#__PURE__*/React.createElement(\"span\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 36,\n          columnNumber: 41\n        }\n      }, `${i18n.NEWCASE[lang]} ${diff >= 0 ? '+' : ''}${diff.toLocaleString()}`)));\n    }));\n  }\n\n}","map":{"version":3,"sources":["/Users/jonchristie/Downloads/covid19-master/src/components/MainCounts.js"],"names":["React","Component","metricText","getDataFromRegion","previousDay","i18n","MainCounts","render","data","currentRegion","date","lang","fullPlot","fullTree","props","map","metric","count","Object","keys","length","preDate","preCount","diff","parseInt","toLocaleString","isNaN","NEWCASE"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,SAASC,UAAT,EAAqBC,iBAArB,EAAwCC,WAAxC,QAA2D,gBAA3D;AACA,OAAOC,IAAP,MAAiB,kBAAjB;AAEA,eAAe,MAAMC,UAAN,SAAyBL,SAAzB,CAAmC;AAC9CM,EAAAA,MAAM,GAAG;AACL,UAAM;AAAEC,MAAAA,IAAF;AAAQC,MAAAA,aAAR;AAAuBC,MAAAA,IAAvB;AAA6BC,MAAAA,IAA7B;AAAmCC,MAAAA,QAAnC;AAA6CC,MAAAA;AAA7C,QAA0D,KAAKC,KAArE;AACA,QAAIN,IAAI,IAAI,IAAZ,EAAkB,oBAAO;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAAP;AAElB,wBACI;AAAK,MAAA,SAAS,EAAC,aAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACK,CAACI,QAAD,IACG,CAACC,QADJ,IAEG,CAAE,gBAAF,EAAoB,WAApB,EAAiC,YAAjC,EAAgDE,GAAhD,CAAqDC,MAAD,IAAY;AAC5D,YAAMC,KAAK,GACPC,MAAM,CAACC,IAAP,CAAYhB,iBAAiB,CAACK,IAAD,EAAOC,aAAP,CAAjB,CAAuCO,MAAvC,CAAZ,EAA4DI,MAA5D,GAAqE,CAArE,GACMjB,iBAAiB,CAACK,IAAD,EAAOC,aAAP,CAAjB,CAAuCO,MAAvC,EAA+CN,IAA/C,CADN,GAEM,GAHV;AAIA,YAAMW,OAAO,GAAGjB,WAAW,CAACM,IAAD,EAAO,YAAP,EAAqB,YAArB,CAA3B;AAEA,YAAMY,QAAQ,GACVJ,MAAM,CAACC,IAAP,CAAYhB,iBAAiB,CAACK,IAAD,EAAOC,aAAP,CAAjB,CAAuCO,MAAvC,CAAZ,EAA4DI,MAA5D,GAAqE,CAArE,GACMjB,iBAAiB,CAACK,IAAD,EAAOC,aAAP,CAAjB,CAAuCO,MAAvC,EAA+CK,OAA/C,CADN,GAEM,CAHV;AAIA,UAAIE,IAAI,GAAG,CAAX;AACA,UAAIC,QAAQ,CAACP,KAAD,CAAR,IAAmB,IAAnB,IAA2BO,QAAQ,CAACF,QAAD,CAAR,IAAsB,IAArD,EACIC,IAAI,GAAGC,QAAQ,CAACP,KAAD,CAAR,GAAkBO,QAAQ,CAACF,QAAD,CAAjC;AAEJ,0BACI;AAAK,QAAA,GAAG,EAAG,GAAEN,MAAO,SAApB;AAA8B,QAAA,SAAS,EAAC,YAAxC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sBACI;AAAK,QAAA,SAAS,EAAC,OAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAAwBC,KAAK,GAAGA,KAAK,CAACQ,cAAN,EAAH,GAA4B,CAAzD,CADJ,eAEI;AAAK,QAAA,SAAS,EAAC,aAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAA8BvB,UAAU,CAACc,MAAD,CAAV,CAAmBL,IAAnB,CAA9B,CAFJ,eAGI;AAAK,QAAA,SAAS,EAAC,aAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACKY,IAAI,IAAI,IAAR,IACD,CAACG,KAAK,CAACH,IAAD,CADL,iBAEG;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAAQ,GAAElB,IAAI,CAACsB,OAAL,CAAahB,IAAb,CAAmB,IAAGY,IAAI,IAAI,CAAR,GAAY,GAAZ,GAAkB,EAAG,GAAEA,IAAI,CAACE,cAAL,EAAsB,EAA7E,CAHR,CAHJ,CADJ;AAYH,KA3BD,CAHR,CADJ;AAkCH;;AAvC6C","sourcesContent":["import React, { Component } from 'react'\nimport { metricText, getDataFromRegion, previousDay } from '../utils/utils'\nimport i18n from '../data/i18n.yml'\n\nexport default class MainCounts extends Component {\n    render() {\n        const { data, currentRegion, date, lang, fullPlot, fullTree } = this.props\n        if (data == null) return <div />\n\n        return (\n            <div className=\"counts-wrap\">\n                {!fullPlot &&\n                    !fullTree &&\n                    [ 'confirmedCount', 'deadCount', 'curedCount' ].map((metric) => {\n                        const count =\n                            Object.keys(getDataFromRegion(data, currentRegion)[metric]).length > 0\n                                ? getDataFromRegion(data, currentRegion)[metric][date]\n                                : '—'\n                        const preDate = previousDay(date, '2019-09-01', '2050-01-01')\n\n                        const preCount =\n                            Object.keys(getDataFromRegion(data, currentRegion)[metric]).length > 0\n                                ? getDataFromRegion(data, currentRegion)[metric][preDate]\n                                : 0\n                        let diff = 0\n                        if (parseInt(count) != null && parseInt(preCount) != null)\n                            diff = parseInt(count) - parseInt(preCount)\n\n                        return (\n                            <div key={`${metric}-number`} className=\"count-wrap\">\n                                <div className=\"count\">{count ? count.toLocaleString() : 0}</div>\n                                <div className=\"count-title\">{metricText[metric][lang]}</div>\n                                <div className=\"count-daily\">\n                                    {diff != null &&\n                                    !isNaN(diff) && (\n                                        <span>{`${i18n.NEWCASE[lang]} ${diff >= 0 ? '+' : ''}${diff.toLocaleString()}`}</span>\n                                    )}\n                                </div>\n                            </div>\n                        )\n                    })}\n            </div>\n        )\n    }\n}\n"]},"metadata":{},"sourceType":"module"}