{"ast":null,"code":"var _jsxFileName = \"/Users/jonchristie/Desktop/2020data/src/components/Plot.js\";\nimport React, { Component } from 'react';\nimport { AiOutlineFullscreen, AiOutlineFullscreenExit } from 'react-icons/ai';\nimport { isMobile, isIPad13 } from 'react-device-detect';\nimport PlotSelector from './PlotSelector';\nimport PlotNavBar from './PlotNavBar';\nimport LinePlot from './LinePlot';\nimport StreamPlot from './StreamPlot';\nimport BumpPlot from './BumpPlot';\nimport { generatePlotData } from '../utils/plot_data';\nimport { getDataFromRegion } from '../utils/utils';\nimport { plotTypes, plotSpecificTypes, getSpecificPlotType } from '../utils/plot_types';\nimport * as str from '../utils/strings';\nimport i18n from '../data/i18n.yml';\n\nconst plotTheme = (darkMode, fullMode) => {\n  return {\n    fontFamily: 'Saira, sans-serif',\n    fontSize: fullMode ? 14 : 11,\n    textColor: darkMode ? 'var(--lighter-grey)' : 'black',\n    grid: {\n      line: {\n        stroke: darkMode ? 'var(--darkest-grey)' : 'var(--lighter-grey)'\n      }\n    },\n    tooltip: {\n      container: {\n        background: darkMode ? 'var(--darkest-grey)' : 'white',\n        color: darkMode ? 'var(--lighter-grey)' : 'black'\n      }\n    }\n  };\n};\n\nexport default class Plot extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      height: 290,\n      plotDetails: {\n        stats: 'cumulative',\n        fatalityLine: 'rate',\n        stream: 'silhouette',\n        diseaseComparison: 'show',\n        recoveryRate: 'show',\n        movingAverage: '1d',\n        shifted: '100'\n      },\n      plotSpecificType: 'total'\n    };\n\n    this.updateHight = () => {\n      const vh = Math.max(document.documentElement.clientHeight, window.innerHeight || 0);\n      const vw = Math.max(document.documentElement.clientWidth, window.innerWidth || 0);\n      this.setState({\n        height: vh < 850 && vw >= 992 ? 240 : 290\n      });\n    };\n\n    this.onSelect = (s, v) => {\n      let state = {};\n      state.plotDetails = this.state.plotDetails;\n      state.plotDetails[s] = v;\n      this.setState(state);\n      this.setSpecificPlotType(this.props.plotType, state.plotDetails);\n    };\n\n    this.setSpecificPlotType = (plotType, plotDetails) => {\n      const specificType = getSpecificPlotType(plotType, plotDetails);\n      this.setState({\n        plotSpecificType: specificType\n      });\n    };\n  }\n\n  componentDidMount() {\n    this.updateHight();\n    window.addEventListener('resize', this.updateHight);\n  }\n\n  componentWillUnmount() {\n    window.removeEventListener('resize', this.updateHight);\n  }\n\n  componentDidUpdate(prevProps, prevState) {\n    const {\n      data,\n      currentRegion\n    } = this.props;\n    const currentRegionIsGlobal = currentRegion.length === 1 && currentRegion[0] === str.GLOBAL_ZH;\n    const hasSubregions = Object.keys(getDataFromRegion(data, currentRegion)).length > 4 || currentRegionIsGlobal;\n\n    if (currentRegionIsGlobal && this.props.plotType === 'plot_one_vs_rest') {\n      this.props.handlePlotTypeChange('plot_basic');\n      this.setSpecificPlotType('plot_basic', this.state.plotDetails);\n    }\n\n    if (!hasSubregions && plotTypes[this.props.plotType].subregions) {\n      this.props.handlePlotTypeChange('plot_basic');\n      this.setSpecificPlotType('plot_basic', this.state.plotDetails);\n    }\n  }\n\n  render() {\n    const {\n      plotType,\n      data,\n      lang,\n      darkMode,\n      fullPlot,\n      fullTree,\n      fullPlotToggle,\n      fullDimensions\n    } = this.props;\n    if (data == null || fullTree) return /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 101,\n        columnNumber: 46\n      }\n    });\n    const plotParameters = plotSpecificTypes[this.state.plotSpecificType];\n    const plotDataAll = generatePlotData({ ...this.props,\n      plotSpecificType: this.state.plotSpecificType,\n      plotDetails: this.state.plotDetails\n    });\n    const plotData = plotDataAll.plotData;\n    const isDataEmpty = !['plot_subregion_active_stream', 'plot_subregion_stream'].includes(plotType) ? plotData.map(d => d.data.length).reduce((s, x) => s + x, 0) === 0 : plotData.map(d => Object.keys(d).length).reduce((s, x) => s + x, 0) === 0;\n    const tickValues = isDataEmpty ? 0 : plotDataAll.tickValues != null ? plotDataAll.tickValues : 5;\n    const FullScreenIcon = fullPlot ? AiOutlineFullscreenExit : AiOutlineFullscreen;\n    const plotProps = { ...this.props,\n      plotParameters,\n      plotDataAll,\n      tickValues,\n      plotTheme: plotTheme(darkMode, fullPlot)\n    };\n    return /*#__PURE__*/React.createElement(\"div\", {\n      className: \"plot-wrap\",\n      style: {\n        height: !fullPlot ? 'auto' : fullDimensions.height - 100,\n        width: !fullPlot ? '100%' : fullDimensions.width + 100\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 128,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(PlotSelector, Object.assign({}, this.props, this.state, {\n      currentPlotType: plotType,\n      onPlotTypeChange: plotType => {\n        this.setSpecificPlotType(plotType, this.state.plotDetails);\n        this.props.handlePlotTypeChange(plotType);\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 135,\n        columnNumber: 17\n      }\n    })), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"plot-with-nav-bar\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 144,\n        columnNumber: 17\n      }\n    }, /*#__PURE__*/React.createElement(PlotNavBar, Object.assign({}, this.props, this.state, {\n      onSelect: this.onSelect,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 145,\n        columnNumber: 21\n      }\n    })), /*#__PURE__*/React.createElement(\"div\", {\n      style: {\n        height: !fullPlot ? this.state.height : fullDimensions.height - 125,\n        width: !fullPlot ? '100%' : fullDimensions.width - 70\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 146,\n        columnNumber: 21\n      }\n    }, isDataEmpty ? /*#__PURE__*/React.createElement(\"div\", {\n      className: \"plot-no-data\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 153,\n        columnNumber: 29\n      }\n    }, /*#__PURE__*/React.createElement(\"span\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 154,\n        columnNumber: 33\n      }\n    }, i18n.NO_DATA[lang])) : /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 157,\n        columnNumber: 29\n      }\n    }), !isDataEmpty && /*#__PURE__*/React.createElement(LinePlot, Object.assign({}, plotProps, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 159,\n        columnNumber: 42\n      }\n    })), !isDataEmpty && /*#__PURE__*/React.createElement(BumpPlot, Object.assign({}, plotProps, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 160,\n        columnNumber: 42\n      }\n    })), !isDataEmpty && /*#__PURE__*/React.createElement(StreamPlot, Object.assign({\n      offsetType: this.state.plotDetails.stream\n    }, plotProps, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 161,\n        columnNumber: 42\n      }\n    })), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"plot-full-button\",\n      \"data-tip\": !fullPlot && !isMobile && !isIPad13 ? i18n.PLOT_SETTINGS[lang] : '',\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 162,\n        columnNumber: 25\n      }\n    }, /*#__PURE__*/React.createElement(FullScreenIcon, {\n      size: fullPlot ? 30 : 20,\n      onClick: fullPlotToggle,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 166,\n        columnNumber: 29\n      }\n    })))));\n  }\n\n}","map":{"version":3,"sources":["/Users/jonchristie/Desktop/2020data/src/components/Plot.js"],"names":["React","Component","AiOutlineFullscreen","AiOutlineFullscreenExit","isMobile","isIPad13","PlotSelector","PlotNavBar","LinePlot","StreamPlot","BumpPlot","generatePlotData","getDataFromRegion","plotTypes","plotSpecificTypes","getSpecificPlotType","str","i18n","plotTheme","darkMode","fullMode","fontFamily","fontSize","textColor","grid","line","stroke","tooltip","container","background","color","Plot","state","height","plotDetails","stats","fatalityLine","stream","diseaseComparison","recoveryRate","movingAverage","shifted","plotSpecificType","updateHight","vh","Math","max","document","documentElement","clientHeight","window","innerHeight","vw","clientWidth","innerWidth","setState","onSelect","s","v","setSpecificPlotType","props","plotType","specificType","componentDidMount","addEventListener","componentWillUnmount","removeEventListener","componentDidUpdate","prevProps","prevState","data","currentRegion","currentRegionIsGlobal","length","GLOBAL_ZH","hasSubregions","Object","keys","handlePlotTypeChange","subregions","render","lang","fullPlot","fullTree","fullPlotToggle","fullDimensions","plotParameters","plotDataAll","plotData","isDataEmpty","includes","map","d","reduce","x","tickValues","FullScreenIcon","plotProps","width","NO_DATA","PLOT_SETTINGS"],"mappings":"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","sourcesContent":["import React, { Component } from 'react'\nimport { AiOutlineFullscreen, AiOutlineFullscreenExit } from 'react-icons/ai'\nimport { isMobile, isIPad13 } from 'react-device-detect'\nimport PlotSelector from './PlotSelector'\nimport PlotNavBar from './PlotNavBar'\nimport LinePlot from './LinePlot'\nimport StreamPlot from './StreamPlot'\nimport BumpPlot from './BumpPlot'\nimport { generatePlotData } from '../utils/plot_data'\nimport { getDataFromRegion } from '../utils/utils'\nimport { plotTypes, plotSpecificTypes, getSpecificPlotType } from '../utils/plot_types'\nimport * as str from '../utils/strings'\nimport i18n from '../data/i18n.yml'\n\nconst plotTheme = (darkMode, fullMode) => {\n    return {\n        fontFamily: 'Saira, sans-serif',\n        fontSize: fullMode ? 14 : 11,\n        textColor: darkMode ? 'var(--lighter-grey)' : 'black',\n        grid: {\n            line: {\n                stroke: darkMode ? 'var(--darkest-grey)' : 'var(--lighter-grey)'\n            }\n        },\n        tooltip: {\n            container: {\n                background: darkMode ? 'var(--darkest-grey)' : 'white',\n                color: darkMode ? 'var(--lighter-grey)' : 'black'\n            }\n        }\n    }\n}\n\nexport default class Plot extends Component {\n    state = {\n        height: 290,\n        plotDetails: {\n            stats: 'cumulative',\n            fatalityLine: 'rate',\n            stream: 'silhouette',\n            diseaseComparison: 'show',\n            recoveryRate: 'show',\n            movingAverage: '1d',\n            shifted: '100'\n        },\n        plotSpecificType: 'total'\n    }\n\n    componentDidMount() {\n        this.updateHight()\n        window.addEventListener('resize', this.updateHight)\n    }\n\n    componentWillUnmount() {\n        window.removeEventListener('resize', this.updateHight)\n    }\n\n    componentDidUpdate(prevProps, prevState) {\n        const { data, currentRegion } = this.props\n        const currentRegionIsGlobal = currentRegion.length === 1 && currentRegion[0] === str.GLOBAL_ZH\n        const hasSubregions = Object.keys(getDataFromRegion(data, currentRegion)).length > 4 || currentRegionIsGlobal\n\n        if (currentRegionIsGlobal && this.props.plotType === 'plot_one_vs_rest') {\n            this.props.handlePlotTypeChange('plot_basic')\n            this.setSpecificPlotType('plot_basic', this.state.plotDetails)\n        }\n\n        if (!hasSubregions && plotTypes[this.props.plotType].subregions) {\n            this.props.handlePlotTypeChange('plot_basic')\n            this.setSpecificPlotType('plot_basic', this.state.plotDetails)\n        }\n    }\n\n    updateHight = () => {\n        const vh = Math.max(document.documentElement.clientHeight, window.innerHeight || 0)\n        const vw = Math.max(document.documentElement.clientWidth, window.innerWidth || 0)\n\n        this.setState({\n            height: vh < 850 && vw >= 992 ? 240 : 290\n        })\n    }\n\n    onSelect = (s, v) => {\n        let state = {}\n        state.plotDetails = this.state.plotDetails\n        state.plotDetails[s] = v\n\n        this.setState(state)\n        this.setSpecificPlotType(this.props.plotType, state.plotDetails)\n    }\n\n    setSpecificPlotType = (plotType, plotDetails) => {\n        const specificType = getSpecificPlotType(plotType, plotDetails)\n\n        this.setState({ plotSpecificType: specificType })\n    }\n\n    render() {\n        const { plotType, data, lang, darkMode, fullPlot, fullTree, fullPlotToggle, fullDimensions } = this.props\n\n        if (data == null || fullTree) return <div />\n\n        const plotParameters = plotSpecificTypes[this.state.plotSpecificType]\n        const plotDataAll = generatePlotData({\n            ...this.props,\n            plotSpecificType: this.state.plotSpecificType,\n            plotDetails: this.state.plotDetails\n        })\n        const plotData = plotDataAll.plotData\n\n        const isDataEmpty = ![ 'plot_subregion_active_stream', 'plot_subregion_stream' ].includes(plotType)\n            ? plotData.map((d) => d.data.length).reduce((s, x) => s + x, 0) === 0\n            : plotData.map((d) => Object.keys(d).length).reduce((s, x) => s + x, 0) === 0\n\n        const tickValues = isDataEmpty ? 0 : plotDataAll.tickValues != null ? plotDataAll.tickValues : 5\n\n        const FullScreenIcon = fullPlot ? AiOutlineFullscreenExit : AiOutlineFullscreen\n\n        const plotProps = {\n            ...this.props,\n            plotParameters,\n            plotDataAll,\n            tickValues,\n            plotTheme: plotTheme(darkMode, fullPlot)\n        }\n\n        return (\n            <div\n                className=\"plot-wrap\"\n                style={{\n                    height: !fullPlot ? 'auto' : fullDimensions.height - 100,\n                    width: !fullPlot ? '100%' : fullDimensions.width + 100\n                }}\n            >\n                <PlotSelector\n                    {...this.props}\n                    {...this.state}\n                    currentPlotType={plotType}\n                    onPlotTypeChange={(plotType) => {\n                        this.setSpecificPlotType(plotType, this.state.plotDetails)\n                        this.props.handlePlotTypeChange(plotType)\n                    }}\n                />\n                <div className=\"plot-with-nav-bar\">\n                    <PlotNavBar {...this.props} {...this.state} onSelect={this.onSelect} />\n                    <div\n                        style={{\n                            height: !fullPlot ? this.state.height : fullDimensions.height - 125,\n                            width: !fullPlot ? '100%' : fullDimensions.width - 70\n                        }}\n                    >\n                        {isDataEmpty ? (\n                            <div className=\"plot-no-data\">\n                                <span>{i18n.NO_DATA[lang]}</span>\n                            </div>\n                        ) : (\n                            <div />\n                        )}\n                        {!isDataEmpty && <LinePlot {...plotProps} />}\n                        {!isDataEmpty && <BumpPlot {...plotProps} />}\n                        {!isDataEmpty && <StreamPlot offsetType={this.state.plotDetails.stream} {...plotProps} />}\n                        <div\n                            className=\"plot-full-button\"\n                            data-tip={!fullPlot && !isMobile && !isIPad13 ? i18n.PLOT_SETTINGS[lang] : ''}\n                        >\n                            <FullScreenIcon size={fullPlot ? 30 : 20} onClick={fullPlotToggle} />\n                        </div>\n                    </div>\n                </div>\n            </div>\n        )\n    }\n}\n"]},"metadata":{},"sourceType":"module"}