{"ast":null,"code":"var _jsxFileName = \"/Users/jonchristie/Desktop/2020data/src/components/MapNavBar.js\";\nimport React, { Component, Fragment } from 'react';\nimport { UncontrolledDropdown, DropdownToggle, DropdownMenu, DropdownItem } from 'reactstrap';\nimport { FiMap } from 'react-icons/fi';\nimport 'flag-icon-css/css/flag-icon.min.css';\nimport { metricText } from '../utils/utils';\nimport { mapText } from '../utils/map_text';\nimport * as str from '../utils/strings';\nimport { plotTypes } from '../utils/plot_types';\nexport default class MapNavBar extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      dropdownOpen: false,\n      height: -1\n    };\n\n    this.updateHeight = () => {\n      const height = window.innerHeight || document.documentElement.clientHeight || document.body.clientHeight;\n      this.setState({\n        height\n      });\n    };\n\n    this.mapToggle = map => {\n      if (map !== this.props.currentMap) {\n        this.props.mapToggle(map);\n\n        if (map === str.CHINA_MAP1 || map === str.CHINA_MAP2) {\n          if (this.props.currentMap !== str.CHINA_MAP1 && this.props.currentMap !== str.CHINA_MAP2) this.props.regionToggle([str.CHINA_ZH], false);\n        } else if (map === str.US_MAP || map === str.US_MAP2) {\n          if (this.props.currentMap !== str.US_MAP && this.props.currentMap !== str.US_MAP2) this.props.regionToggle([str.US_ZH], false);\n        } else if (map === str.ITALY_MAP || map === str.ITALY_MAP2) {\n          if (this.props.currentMap !== str.ITALY_MAP && this.props.currentMap !== str.ITALY_MAP2) this.props.regionToggle([str.ITALY_ZH], false);\n        } else if (map === str.HONGKONG_MAP) {\n          this.props.regionToggle([str.CHINA_ZH, str.HONGKONG_ZH], false);\n        } else if (map !== str.TRANSMISSION) {\n          this.props.regionToggle([mapText[map].regionName], false);\n        }\n      }\n\n      this.setState({\n        dropdownOpen: !this.state.dropdownOpen\n      });\n    };\n\n    this.metricToggle = event => {\n      const newMetric = event.target.getAttribute('value');\n      if (newMetric !== this.props.metric) this.props.metricToggle(newMetric);\n    };\n  }\n\n  componentDidMount() {\n    this.updateHeight();\n    window.addEventListener('resize', this.updateHeight);\n  }\n\n  componentWillUnmount() {\n    window.removeEventListener('resize', this.updateHeight);\n  }\n\n  render() {\n    const {\n      lang,\n      metric,\n      currentMap,\n      fullPlot,\n      fullTree,\n      plotType\n    } = this.props;\n    return /*#__PURE__*/React.createElement(\"div\", {\n      className: `map-nav-bar-wrap ${fullPlot && !plotTypes[plotType].metricChange ? 'grey-out' : ''}`,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 60,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(\"ul\", {\n      className: \"map-nav-bar\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 61,\n        columnNumber: 17\n      }\n    }, ['confirmedCount', 'deadCount', 'curedCount'].map(count => /*#__PURE__*/React.createElement(\"li\", {\n      key: `map-nav-${count}`,\n      className: count === metric ? 'current' : '',\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 63,\n        columnNumber: 25\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      value: count,\n      onClick: this.metricToggle,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 64,\n        columnNumber: 29\n      }\n    }, metricText[count][lang])))), !fullPlot && !fullTree && /*#__PURE__*/React.createElement(UncontrolledDropdown, {\n      className: \"map-toggle\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 73,\n        columnNumber: 21\n      }\n    }, /*#__PURE__*/React.createElement(DropdownToggle, {\n      className: \"map-toggle-button\",\n      tag: \"span\",\n      \"data-toggle\": \"dropdown\",\n      \"aria-expanded\": this.state.dropdownOpen,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 74,\n        columnNumber: 25\n      }\n    }, /*#__PURE__*/React.createElement(FiMap, {\n      size: 14,\n      style: {\n        marginRight: 10\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 80,\n        columnNumber: 29\n      }\n    }), /*#__PURE__*/React.createElement(\"span\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 81,\n        columnNumber: 29\n      }\n    }, mapText[currentMap].title[lang])), /*#__PURE__*/React.createElement(DropdownMenu, {\n      modifiers: {\n        setMaxHeight: {\n          enabled: true,\n          order: 890,\n          fn: data => {\n            return { ...data,\n              styles: { ...data.styles,\n                overflowY: 'auto',\n                maxHeight: this.state.height * 0.5\n              }\n            };\n          }\n        }\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 83,\n        columnNumber: 25\n      }\n    }, ['Global', 'Asia', 'Europe', 'North America', 'South America', 'Oceania', 'Africa', null].map(continent => Object.keys(mapText).filter(map => mapText[map].continent === continent || mapText[map].continent && mapText[map].continent['en'] === continent).map((map, idx) => {\n      return /*#__PURE__*/React.createElement(Fragment, {\n        key: `map-${idx}`,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 119,\n          columnNumber: 45\n        }\n      }, map === str.TRANSMISSION ? /*#__PURE__*/React.createElement(DropdownItem, {\n        divider: true,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 120,\n          columnNumber: 77\n        }\n      }) : /*#__PURE__*/React.createElement(\"div\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 120,\n          columnNumber: 104\n        }\n      }), idx === 0 && continent != null && continent !== 'Global' ? /*#__PURE__*/React.createElement(Fragment, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 122,\n          columnNumber: 53\n        }\n      }, /*#__PURE__*/React.createElement(DropdownItem, {\n        divider: true,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 123,\n          columnNumber: 57\n        }\n      }), /*#__PURE__*/React.createElement(DropdownItem, {\n        header: true,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 124,\n          columnNumber: 57\n        }\n      }, mapText[map].continent[lang])) : /*#__PURE__*/React.createElement(\"div\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 129,\n          columnNumber: 53\n        }\n      }), /*#__PURE__*/React.createElement(DropdownItem, {\n        className: currentMap === map ? 'current' : '',\n        onClick: () => this.mapToggle(map),\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 131,\n          columnNumber: 49\n        }\n      }, map !== str.TRANSMISSION && /*#__PURE__*/React.createElement(\"span\", {\n        className: `flag-icon ${mapText[map].flagCode ? 'flag-icon-' + mapText[map].flagCode : ''}`,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 136,\n          columnNumber: 57\n        }\n      }), mapText[map].title[lang]));\n    })))));\n  }\n\n}","map":{"version":3,"sources":["/Users/jonchristie/Desktop/2020data/src/components/MapNavBar.js"],"names":["React","Component","Fragment","UncontrolledDropdown","DropdownToggle","DropdownMenu","DropdownItem","FiMap","metricText","mapText","str","plotTypes","MapNavBar","state","dropdownOpen","height","updateHeight","window","innerHeight","document","documentElement","clientHeight","body","setState","mapToggle","map","props","currentMap","CHINA_MAP1","CHINA_MAP2","regionToggle","CHINA_ZH","US_MAP","US_MAP2","US_ZH","ITALY_MAP","ITALY_MAP2","ITALY_ZH","HONGKONG_MAP","HONGKONG_ZH","TRANSMISSION","regionName","metricToggle","event","newMetric","target","getAttribute","metric","componentDidMount","addEventListener","componentWillUnmount","removeEventListener","render","lang","fullPlot","fullTree","plotType","metricChange","count","marginRight","title","setMaxHeight","enabled","order","fn","data","styles","overflowY","maxHeight","continent","Object","keys","filter","idx","flagCode"],"mappings":"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","sourcesContent":["import React, { Component, Fragment } from 'react'\nimport { UncontrolledDropdown, DropdownToggle, DropdownMenu, DropdownItem } from 'reactstrap'\nimport { FiMap } from 'react-icons/fi'\nimport 'flag-icon-css/css/flag-icon.min.css'\nimport { metricText } from '../utils/utils'\nimport { mapText } from '../utils/map_text'\nimport * as str from '../utils/strings'\nimport { plotTypes } from '../utils/plot_types'\n\nexport default class MapNavBar extends Component {\n    state = {\n        dropdownOpen: false,\n        height: -1\n    }\n\n    componentDidMount() {\n        this.updateHeight()\n        window.addEventListener('resize', this.updateHeight)\n    }\n\n    componentWillUnmount() {\n        window.removeEventListener('resize', this.updateHeight)\n    }\n\n    updateHeight = () => {\n        const height = window.innerHeight || document.documentElement.clientHeight || document.body.clientHeight\n        this.setState({ height })\n    }\n\n    mapToggle = (map) => {\n        if (map !== this.props.currentMap) {\n            this.props.mapToggle(map)\n            if (map === str.CHINA_MAP1 || map === str.CHINA_MAP2) {\n                if (this.props.currentMap !== str.CHINA_MAP1 && this.props.currentMap !== str.CHINA_MAP2)\n                    this.props.regionToggle([ str.CHINA_ZH ], false)\n            } else if (map === str.US_MAP || map === str.US_MAP2) {\n                if (this.props.currentMap !== str.US_MAP && this.props.currentMap !== str.US_MAP2)\n                    this.props.regionToggle([ str.US_ZH ], false)\n            } else if (map === str.ITALY_MAP || map === str.ITALY_MAP2) {\n                if (this.props.currentMap !== str.ITALY_MAP && this.props.currentMap !== str.ITALY_MAP2)\n                    this.props.regionToggle([ str.ITALY_ZH ], false)\n            } else if (map === str.HONGKONG_MAP) {\n                this.props.regionToggle([ str.CHINA_ZH, str.HONGKONG_ZH ], false)\n            } else if (map !== str.TRANSMISSION) {\n                this.props.regionToggle([ mapText[map].regionName ], false)\n            }\n        }\n        this.setState({ dropdownOpen: !this.state.dropdownOpen })\n    }\n\n    metricToggle = (event) => {\n        const newMetric = event.target.getAttribute('value')\n        if (newMetric !== this.props.metric) this.props.metricToggle(newMetric)\n    }\n\n    render() {\n        const { lang, metric, currentMap, fullPlot, fullTree, plotType } = this.props\n\n        return (\n            <div className={`map-nav-bar-wrap ${fullPlot && !plotTypes[plotType].metricChange ? 'grey-out' : ''}`}>\n                <ul className=\"map-nav-bar\">\n                    {[ 'confirmedCount', 'deadCount', 'curedCount' ].map((count) => (\n                        <li key={`map-nav-${count}`} className={count === metric ? 'current' : ''}>\n                            <div value={count} onClick={this.metricToggle}>\n                                {metricText[count][lang]}\n                            </div>\n                        </li>\n                    ))}\n                </ul>\n\n                {!fullPlot &&\n                !fullTree && (\n                    <UncontrolledDropdown className=\"map-toggle\">\n                        <DropdownToggle\n                            className=\"map-toggle-button\"\n                            tag=\"span\"\n                            data-toggle=\"dropdown\"\n                            aria-expanded={this.state.dropdownOpen}\n                        >\n                            <FiMap size={14} style={{ marginRight: 10 }} />\n                            <span>{mapText[currentMap].title[lang]}</span>\n                        </DropdownToggle>\n                        <DropdownMenu\n                            modifiers={{\n                                setMaxHeight: {\n                                    enabled: true,\n                                    order: 890,\n                                    fn: (data) => {\n                                        return {\n                                            ...data,\n                                            styles: {\n                                                ...data.styles,\n                                                overflowY: 'auto',\n                                                maxHeight: this.state.height * 0.5\n                                            }\n                                        }\n                                    }\n                                }\n                            }}\n                        >\n                            {[\n                                'Global',\n                                'Asia',\n                                'Europe',\n                                'North America',\n                                'South America',\n                                'Oceania',\n                                'Africa',\n                                null\n                            ].map((continent) =>\n                                Object.keys(mapText)\n                                    .filter(\n                                        (map) =>\n                                            mapText[map].continent === continent ||\n                                            (mapText[map].continent && mapText[map].continent['en'] === continent)\n                                    )\n                                    .map((map, idx) => {\n                                        return (\n                                            <Fragment key={`map-${idx}`}>\n                                                {map === str.TRANSMISSION ? <DropdownItem divider /> : <div />}\n                                                {idx === 0 && continent != null && continent !== 'Global' ? (\n                                                    <Fragment>\n                                                        <DropdownItem divider />\n                                                        <DropdownItem header>\n                                                            {mapText[map].continent[lang]}\n                                                        </DropdownItem>\n                                                    </Fragment>\n                                                ) : (\n                                                    <div />\n                                                )}\n                                                <DropdownItem\n                                                    className={currentMap === map ? 'current' : ''}\n                                                    onClick={() => this.mapToggle(map)}\n                                                >\n                                                    {map !== str.TRANSMISSION && (\n                                                        <span\n                                                            className={`flag-icon ${mapText[map].flagCode\n                                                                ? 'flag-icon-' + mapText[map].flagCode\n                                                                : ''}`}\n                                                        />\n                                                    )}\n                                                    {mapText[map].title[lang]}\n                                                </DropdownItem>\n                                            </Fragment>\n                                        )\n                                    })\n                            )}\n                        </DropdownMenu>\n                    </UncontrolledDropdown>\n                )}\n            </div>\n        )\n    }\n}\n"]},"metadata":{},"sourceType":"module"}