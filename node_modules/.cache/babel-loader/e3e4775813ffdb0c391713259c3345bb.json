{"ast":null,"code":"import _objectSpread from\"/Users/jonchristie/Desktop/2020data/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread2\";import _classCallCheck from\"/Users/jonchristie/Desktop/2020data/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";import _createClass from\"/Users/jonchristie/Desktop/2020data/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";import _inherits from\"/Users/jonchristie/Desktop/2020data/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";import _createSuper from\"/Users/jonchristie/Desktop/2020data/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createSuper\";import React,{Component}from'react';import{AiOutlineFullscreen,AiOutlineFullscreenExit}from'react-icons/ai';import{isMobile,isIPad13}from'react-device-detect';import PlotSelector from'./PlotSelector';import PlotNavBar from'./PlotNavBar';import LinePlot from'./LinePlot';import StreamPlot from'./StreamPlot';import BumpPlot from'./BumpPlot';import{generatePlotData}from'../utils/plot_data';import{getDataFromRegion}from'../utils/utils';import{plotTypes,plotSpecificTypes,getSpecificPlotType}from'../utils/plot_types';import*as str from'../utils/strings';import i18n from'../data/i18n.yml';var plotTheme=function plotTheme(darkMode,fullMode){return{fontFamily:'Saira, sans-serif',fontSize:fullMode?14:11,textColor:darkMode?'var(--lighter-grey)':'black',grid:{line:{stroke:darkMode?'var(--darkest-grey)':'var(--lighter-grey)'}},tooltip:{container:{background:darkMode?'var(--darkest-grey)':'white',color:darkMode?'var(--lighter-grey)':'black'}}};};var Plot=/*#__PURE__*/function(_Component){_inherits(Plot,_Component);var _super=_createSuper(Plot);function Plot(){var _this;_classCallCheck(this,Plot);for(var _len=arguments.length,args=new Array(_len),_key=0;_key<_len;_key++){args[_key]=arguments[_key];}_this=_super.call.apply(_super,[this].concat(args));_this.state={height:290,plotDetails:{stats:'cumulative',fatalityLine:'rate',stream:'silhouette',diseaseComparison:'show',recoveryRate:'show',movingAverage:'1d',shifted:'100'},plotSpecificType:'total'};_this.updateHight=function(){var vh=Math.max(document.documentElement.clientHeight,window.innerHeight||0);var vw=Math.max(document.documentElement.clientWidth,window.innerWidth||0);_this.setState({height:vh<850&&vw>=992?240:290});};_this.onSelect=function(s,v){var state={};state.plotDetails=_this.state.plotDetails;state.plotDetails[s]=v;_this.setState(state);_this.setSpecificPlotType(_this.props.plotType,state.plotDetails);};_this.setSpecificPlotType=function(plotType,plotDetails){var specificType=getSpecificPlotType(plotType,plotDetails);_this.setState({plotSpecificType:specificType});};return _this;}_createClass(Plot,[{key:\"componentDidMount\",value:function componentDidMount(){this.updateHight();window.addEventListener('resize',this.updateHight);}},{key:\"componentWillUnmount\",value:function componentWillUnmount(){window.removeEventListener('resize',this.updateHight);}},{key:\"componentDidUpdate\",value:function componentDidUpdate(prevProps,prevState){var _this$props=this.props,data=_this$props.data,currentRegion=_this$props.currentRegion;var currentRegionIsGlobal=currentRegion.length===1&&currentRegion[0]===str.GLOBAL_ZH;var hasSubregions=Object.keys(getDataFromRegion(data,currentRegion)).length>4||currentRegionIsGlobal;if(currentRegionIsGlobal&&this.props.plotType==='plot_one_vs_rest'){this.props.handlePlotTypeChange('plot_basic');this.setSpecificPlotType('plot_basic',this.state.plotDetails);}if(!hasSubregions&&plotTypes[this.props.plotType].subregions){this.props.handlePlotTypeChange('plot_basic');this.setSpecificPlotType('plot_basic',this.state.plotDetails);}}},{key:\"render\",value:function render(){var _this2=this;var _this$props2=this.props,plotType=_this$props2.plotType,data=_this$props2.data,lang=_this$props2.lang,darkMode=_this$props2.darkMode,fullPlot=_this$props2.fullPlot,fullTree=_this$props2.fullTree,fullPlotToggle=_this$props2.fullPlotToggle,fullDimensions=_this$props2.fullDimensions;if(data==null||fullTree)return/*#__PURE__*/React.createElement(\"div\",null);var plotParameters=plotSpecificTypes[this.state.plotSpecificType];var plotDataAll=generatePlotData(_objectSpread(_objectSpread({},this.props),{},{plotSpecificType:this.state.plotSpecificType,plotDetails:this.state.plotDetails}));var plotData=plotDataAll.plotData;var isDataEmpty=!['plot_subregion_active_stream','plot_subregion_stream'].includes(plotType)?plotData.map(function(d){return d.data.length;}).reduce(function(s,x){return s+x;},0)===0:plotData.map(function(d){return Object.keys(d).length;}).reduce(function(s,x){return s+x;},0)===0;var tickValues=isDataEmpty?0:plotDataAll.tickValues!=null?plotDataAll.tickValues:5;var FullScreenIcon=fullPlot?AiOutlineFullscreenExit:AiOutlineFullscreen;var plotProps=_objectSpread(_objectSpread({},this.props),{},{plotParameters:plotParameters,plotDataAll:plotDataAll,tickValues:tickValues,plotTheme:plotTheme(darkMode,fullPlot)});return/*#__PURE__*/React.createElement(\"div\",{className:\"plot-wrap\",style:{height:!fullPlot?'auto':fullDimensions.height-100,width:!fullPlot?'100%':fullDimensions.width+100}},/*#__PURE__*/React.createElement(PlotSelector,Object.assign({},this.props,this.state,{currentPlotType:plotType,onPlotTypeChange:function onPlotTypeChange(plotType){_this2.setSpecificPlotType(plotType,_this2.state.plotDetails);_this2.props.handlePlotTypeChange(plotType);}})),/*#__PURE__*/React.createElement(\"div\",{className:\"plot-with-nav-bar\"},/*#__PURE__*/React.createElement(PlotNavBar,Object.assign({},this.props,this.state,{onSelect:this.onSelect})),/*#__PURE__*/React.createElement(\"div\",{style:{height:!fullPlot?this.state.height:fullDimensions.height-125,width:!fullPlot?'100%':fullDimensions.width-70}},isDataEmpty?/*#__PURE__*/React.createElement(\"div\",{className:\"plot-no-data\"},/*#__PURE__*/React.createElement(\"span\",null,i18n.NO_DATA[lang])):/*#__PURE__*/React.createElement(\"div\",null),!isDataEmpty&&/*#__PURE__*/React.createElement(LinePlot,plotProps),!isDataEmpty&&/*#__PURE__*/React.createElement(BumpPlot,plotProps),!isDataEmpty&&/*#__PURE__*/React.createElement(StreamPlot,Object.assign({offsetType:this.state.plotDetails.stream},plotProps)),/*#__PURE__*/React.createElement(\"div\",{className:\"plot-full-button\",\"data-tip\":!fullPlot&&!isMobile&&!isIPad13?i18n.PLOT_SETTINGS[lang]:''},/*#__PURE__*/React.createElement(FullScreenIcon,{size:fullPlot?30:20,onClick:fullPlotToggle})))));}}]);return Plot;}(Component);export{Plot as default};","map":{"version":3,"sources":["/Users/jonchristie/Desktop/2020data/src/components/Plot.js"],"names":["React","Component","AiOutlineFullscreen","AiOutlineFullscreenExit","isMobile","isIPad13","PlotSelector","PlotNavBar","LinePlot","StreamPlot","BumpPlot","generatePlotData","getDataFromRegion","plotTypes","plotSpecificTypes","getSpecificPlotType","str","i18n","plotTheme","darkMode","fullMode","fontFamily","fontSize","textColor","grid","line","stroke","tooltip","container","background","color","Plot","state","height","plotDetails","stats","fatalityLine","stream","diseaseComparison","recoveryRate","movingAverage","shifted","plotSpecificType","updateHight","vh","Math","max","document","documentElement","clientHeight","window","innerHeight","vw","clientWidth","innerWidth","setState","onSelect","s","v","setSpecificPlotType","props","plotType","specificType","addEventListener","removeEventListener","prevProps","prevState","data","currentRegion","currentRegionIsGlobal","length","GLOBAL_ZH","hasSubregions","Object","keys","handlePlotTypeChange","subregions","lang","fullPlot","fullTree","fullPlotToggle","fullDimensions","plotParameters","plotDataAll","plotData","isDataEmpty","includes","map","d","reduce","x","tickValues","FullScreenIcon","plotProps","width","NO_DATA","PLOT_SETTINGS"],"mappings":"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","sourcesContent":["import React, { Component } from 'react'\nimport { AiOutlineFullscreen, AiOutlineFullscreenExit } from 'react-icons/ai'\nimport { isMobile, isIPad13 } from 'react-device-detect'\nimport PlotSelector from './PlotSelector'\nimport PlotNavBar from './PlotNavBar'\nimport LinePlot from './LinePlot'\nimport StreamPlot from './StreamPlot'\nimport BumpPlot from './BumpPlot'\nimport { generatePlotData } from '../utils/plot_data'\nimport { getDataFromRegion } from '../utils/utils'\nimport { plotTypes, plotSpecificTypes, getSpecificPlotType } from '../utils/plot_types'\nimport * as str from '../utils/strings'\nimport i18n from '../data/i18n.yml'\n\nconst plotTheme = (darkMode, fullMode) => {\n    return {\n        fontFamily: 'Saira, sans-serif',\n        fontSize: fullMode ? 14 : 11,\n        textColor: darkMode ? 'var(--lighter-grey)' : 'black',\n        grid: {\n            line: {\n                stroke: darkMode ? 'var(--darkest-grey)' : 'var(--lighter-grey)'\n            }\n        },\n        tooltip: {\n            container: {\n                background: darkMode ? 'var(--darkest-grey)' : 'white',\n                color: darkMode ? 'var(--lighter-grey)' : 'black'\n            }\n        }\n    }\n}\n\nexport default class Plot extends Component {\n    state = {\n        height: 290,\n        plotDetails: {\n            stats: 'cumulative',\n            fatalityLine: 'rate',\n            stream: 'silhouette',\n            diseaseComparison: 'show',\n            recoveryRate: 'show',\n            movingAverage: '1d',\n            shifted: '100'\n        },\n        plotSpecificType: 'total'\n    }\n\n    componentDidMount() {\n        this.updateHight()\n        window.addEventListener('resize', this.updateHight)\n    }\n\n    componentWillUnmount() {\n        window.removeEventListener('resize', this.updateHight)\n    }\n\n    componentDidUpdate(prevProps, prevState) {\n        const { data, currentRegion } = this.props\n        const currentRegionIsGlobal = currentRegion.length === 1 && currentRegion[0] === str.GLOBAL_ZH\n        const hasSubregions = Object.keys(getDataFromRegion(data, currentRegion)).length > 4 || currentRegionIsGlobal\n\n        if (currentRegionIsGlobal && this.props.plotType === 'plot_one_vs_rest') {\n            this.props.handlePlotTypeChange('plot_basic')\n            this.setSpecificPlotType('plot_basic', this.state.plotDetails)\n        }\n\n        if (!hasSubregions && plotTypes[this.props.plotType].subregions) {\n            this.props.handlePlotTypeChange('plot_basic')\n            this.setSpecificPlotType('plot_basic', this.state.plotDetails)\n        }\n    }\n\n    updateHight = () => {\n        const vh = Math.max(document.documentElement.clientHeight, window.innerHeight || 0)\n        const vw = Math.max(document.documentElement.clientWidth, window.innerWidth || 0)\n\n        this.setState({\n            height: vh < 850 && vw >= 992 ? 240 : 290\n        })\n    }\n\n    onSelect = (s, v) => {\n        let state = {}\n        state.plotDetails = this.state.plotDetails\n        state.plotDetails[s] = v\n\n        this.setState(state)\n        this.setSpecificPlotType(this.props.plotType, state.plotDetails)\n    }\n\n    setSpecificPlotType = (plotType, plotDetails) => {\n        const specificType = getSpecificPlotType(plotType, plotDetails)\n\n        this.setState({ plotSpecificType: specificType })\n    }\n\n    render() {\n        const { plotType, data, lang, darkMode, fullPlot, fullTree, fullPlotToggle, fullDimensions } = this.props\n\n        if (data == null || fullTree) return <div />\n\n        const plotParameters = plotSpecificTypes[this.state.plotSpecificType]\n        const plotDataAll = generatePlotData({\n            ...this.props,\n            plotSpecificType: this.state.plotSpecificType,\n            plotDetails: this.state.plotDetails\n        })\n        const plotData = plotDataAll.plotData\n\n        const isDataEmpty = ![ 'plot_subregion_active_stream', 'plot_subregion_stream' ].includes(plotType)\n            ? plotData.map((d) => d.data.length).reduce((s, x) => s + x, 0) === 0\n            : plotData.map((d) => Object.keys(d).length).reduce((s, x) => s + x, 0) === 0\n\n        const tickValues = isDataEmpty ? 0 : plotDataAll.tickValues != null ? plotDataAll.tickValues : 5\n\n        const FullScreenIcon = fullPlot ? AiOutlineFullscreenExit : AiOutlineFullscreen\n\n        const plotProps = {\n            ...this.props,\n            plotParameters,\n            plotDataAll,\n            tickValues,\n            plotTheme: plotTheme(darkMode, fullPlot)\n        }\n\n        return (\n            <div\n                className=\"plot-wrap\"\n                style={{\n                    height: !fullPlot ? 'auto' : fullDimensions.height - 100,\n                    width: !fullPlot ? '100%' : fullDimensions.width + 100\n                }}\n            >\n                <PlotSelector\n                    {...this.props}\n                    {...this.state}\n                    currentPlotType={plotType}\n                    onPlotTypeChange={(plotType) => {\n                        this.setSpecificPlotType(plotType, this.state.plotDetails)\n                        this.props.handlePlotTypeChange(plotType)\n                    }}\n                />\n                <div className=\"plot-with-nav-bar\">\n                    <PlotNavBar {...this.props} {...this.state} onSelect={this.onSelect} />\n                    <div\n                        style={{\n                            height: !fullPlot ? this.state.height : fullDimensions.height - 125,\n                            width: !fullPlot ? '100%' : fullDimensions.width - 70\n                        }}\n                    >\n                        {isDataEmpty ? (\n                            <div className=\"plot-no-data\">\n                                <span>{i18n.NO_DATA[lang]}</span>\n                            </div>\n                        ) : (\n                            <div />\n                        )}\n                        {!isDataEmpty && <LinePlot {...plotProps} />}\n                        {!isDataEmpty && <BumpPlot {...plotProps} />}\n                        {!isDataEmpty && <StreamPlot offsetType={this.state.plotDetails.stream} {...plotProps} />}\n                        <div\n                            className=\"plot-full-button\"\n                            data-tip={!fullPlot && !isMobile && !isIPad13 ? i18n.PLOT_SETTINGS[lang] : ''}\n                        >\n                            <FullScreenIcon size={fullPlot ? 30 : 20} onClick={fullPlotToggle} />\n                        </div>\n                    </div>\n                </div>\n            </div>\n        )\n    }\n}\n"]},"metadata":{},"sourceType":"module"}