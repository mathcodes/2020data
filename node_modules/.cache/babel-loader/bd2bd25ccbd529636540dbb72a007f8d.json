{"ast":null,"code":"import _toConsumableArray from\"/Users/jonchristie/Downloads/covid19-master/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/toConsumableArray\";import _objectSpread from\"/Users/jonchristie/Downloads/covid19-master/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread2\";import _classCallCheck from\"/Users/jonchristie/Downloads/covid19-master/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";import _createClass from\"/Users/jonchristie/Downloads/covid19-master/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";import _inherits from\"/Users/jonchristie/Downloads/covid19-master/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";import _createSuper from\"/Users/jonchristie/Downloads/covid19-master/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createSuper\";import React,{Component}from'react';import{ResponsiveLine}from'@nivo/line';import{isMobile,isIPad13}from'react-device-detect';import{parseDate}from'../utils/utils';import*as str from'../utils/strings';import us_map from'../data/us_map.yml';var LinePlot=/*#__PURE__*/function(_Component){_inherits(LinePlot,_Component);var _super=_createSuper(LinePlot);function LinePlot(){_classCallCheck(this,LinePlot);return _super.apply(this,arguments);}_createClass(LinePlot,[{key:\"render\",value:function render(){var _this=this;var _this$props=this.props,currentRegion=_this$props.currentRegion,fullPlot=_this$props.fullPlot,darkMode=_this$props.darkMode,scale=_this$props.scale,lang=_this$props.lang,playing=_this$props.playing,tempDate=_this$props.tempDate,startDate=_this$props.startDate,endDate=_this$props.endDate,plotParameters=_this$props.plotParameters,plotDataAll=_this$props.plotDataAll,tickValues=_this$props.tickValues,plotTheme=_this$props.plotTheme,currentMap=_this$props.currentMap;if(plotParameters.type!=='line')return/*#__PURE__*/React.createElement(\"div\",null);return/*#__PURE__*/React.createElement(ResponsiveLine,{margin:_objectSpread({top:20,right:20,bottom:!fullPlot?60:80,left:50},plotParameters.margin),theme:plotTheme,animate:fullPlot||currentMap!==str.US_MAP2||currentMap===str.US_MAP2&&currentRegion.length>=2&&currentRegion[1]in us_map,data:plotDataAll.plotData,colors:function colors(d){return d.color;},xFormat:plotParameters.xFormat!=null?plotParameters.xFormat:'time:%Y-%m-%d',yFormat:plotParameters.yFormat,xScale:plotParameters.xScale!=null?plotParameters.xScale:!plotParameters.xLog?{type:'time',format:'%Y-%m-%d',precision:'day',useUTC:false}:{type:'log',min:plotDataAll.logTickMin,max:plotDataAll.logTickMax},yScale:plotParameters.yScale!=null?plotParameters.yScale:scale==='linear'||!plotParameters.log?{type:'linear',max:'auto',min:'auto'}:{type:'log',min:plotDataAll.logTickMin,max:plotDataAll.logTickMax},axisLeft:{orient:'left',// do not show ticks with non-integer values\nformat:plotParameters.yAxisFormat,tickSize:0,tickValues:plotParameters.yTickValues!=null?plotParameters.yTickValues:tickValues,legend:plotParameters.yLegend!=null?plotParameters.yLegend[lang]:'',legendOffset:plotParameters.yLegendOffset!=null?plotParameters.yLegendOffset:-40,legendPosition:'middle'},axisBottom:{orient:'bottom',format:Object(plotParameters.xAxisFormat)!==plotParameters.xAxisFormat?plotParameters.xAxisFormat:plotParameters.xAxisFormat[lang],tickValues:plotParameters.xTickValues!=null?plotParameters.xTickValues:!fullPlot?5:10,tickRotation:plotParameters.xTickRotation!=null?plotParameters.xTickRotation:!fullPlot?0:-30,legend:plotParameters.xLegend!=null?plotParameters.xLegend[lang]:'',legendOffset:40,legendPosition:'middle'},enableGridX:false,gridYValues:plotParameters.yTickValues!=null?plotParameters.yTickValues:tickValues,pointSize:plotParameters.pointSize!=null?plotParameters.pointSize:6,pointBorderWidth:plotParameters.pointBorderWidth,pointBorderColor:darkMode?'var(--primary-color-4)':'var(--primary-color-5)',useMesh:true,enableArea:false,enablePointLabel:plotParameters.enablePointLabel,pointLabel:plotParameters.pointLabel,pointLabelYOffset:plotParameters.pointLabelYOffset?plotParameters.pointLabelYOffset:-6,enableSlices:plotParameters.enableSlices!=null?plotParameters.enableSlices:'x',curve:'monotoneX',tooltip:plotParameters.tooltip,markers:plotParameters.hideMarkers?[]:!playing&&tempDate!==startDate&&tempDate!==endDate?[{axis:'x',value:parseDate(tempDate),lineStyle:{stroke:darkMode?'var(--primary-color-4)':'var(--primary-color-5)',strokeWidth:1,strokeDasharray:'6 6'}}]:[],legends:plotParameters.legends!=null?plotParameters.legends:[{anchor:'bottom',direction:'row',justify:false,translateX:0,translateY:!fullPlot?50:70,itemsSpacing:10,itemDirection:'left-to-right',itemWidth:plotParameters.legendItemWidth,itemHeight:20,itemOpacity:0.75,symbolSize:12,symbolShape:'circle',symbolBorderColor:'rgba(0, 0, 0, .5)',effects:[]}],onClick:function onClick(_ref){var serieId=_ref.serieId,data=_ref.data;if(isMobile||isIPad13)return;if(!plotParameters.subregions||serieId==null||data.noClick)return;_this.props.regionToggle(currentRegion.length===1&&currentRegion[0]===str.GLOBAL_ZH?[serieId]:[].concat(_toConsumableArray(currentRegion),[serieId]));}});}}]);return LinePlot;}(Component);export{LinePlot as default};","map":{"version":3,"sources":["/Users/jonchristie/Downloads/covid19-master/src/components/LinePlot.js"],"names":["React","Component","ResponsiveLine","isMobile","isIPad13","parseDate","str","us_map","LinePlot","props","currentRegion","fullPlot","darkMode","scale","lang","playing","tempDate","startDate","endDate","plotParameters","plotDataAll","tickValues","plotTheme","currentMap","type","top","right","bottom","left","margin","US_MAP2","length","plotData","d","color","xFormat","yFormat","xScale","xLog","format","precision","useUTC","min","logTickMin","max","logTickMax","yScale","log","orient","yAxisFormat","tickSize","yTickValues","legend","yLegend","legendOffset","yLegendOffset","legendPosition","Object","xAxisFormat","xTickValues","tickRotation","xTickRotation","xLegend","pointSize","pointBorderWidth","enablePointLabel","pointLabel","pointLabelYOffset","enableSlices","tooltip","hideMarkers","axis","value","lineStyle","stroke","strokeWidth","strokeDasharray","legends","anchor","direction","justify","translateX","translateY","itemsSpacing","itemDirection","itemWidth","legendItemWidth","itemHeight","itemOpacity","symbolSize","symbolShape","symbolBorderColor","effects","serieId","data","subregions","noClick","regionToggle","GLOBAL_ZH"],"mappings":"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","sourcesContent":["import React, { Component } from 'react'\nimport { ResponsiveLine } from '@nivo/line'\nimport { isMobile, isIPad13 } from 'react-device-detect'\nimport { parseDate } from '../utils/utils'\nimport * as str from '../utils/strings'\nimport us_map from '../data/us_map.yml'\n\nexport default class LinePlot extends Component {\n    render() {\n        const {\n            currentRegion,\n            fullPlot,\n            darkMode,\n            scale,\n            lang,\n            playing,\n            tempDate,\n            startDate,\n            endDate,\n            plotParameters,\n            plotDataAll,\n            tickValues,\n            plotTheme,\n            currentMap\n        } = this.props\n\n        if (plotParameters.type !== 'line') return <div />\n\n        return (\n            <ResponsiveLine\n                margin={{\n                    top: 20,\n                    right: 20,\n                    bottom: !fullPlot ? 60 : 80,\n                    left: 50,\n                    ...plotParameters.margin\n                }}\n                theme={plotTheme}\n                animate={\n                    fullPlot ||\n                    currentMap !== str.US_MAP2 ||\n                    (currentMap === str.US_MAP2 && currentRegion.length >= 2 && currentRegion[1] in us_map)\n                }\n                data={plotDataAll.plotData}\n                colors={(d) => d.color}\n                xFormat={plotParameters.xFormat != null ? plotParameters.xFormat : 'time:%Y-%m-%d'}\n                yFormat={plotParameters.yFormat}\n                xScale={\n                    plotParameters.xScale != null ? (\n                        plotParameters.xScale\n                    ) : !plotParameters.xLog ? (\n                        {\n                            type: 'time',\n                            format: '%Y-%m-%d',\n                            precision: 'day',\n                            useUTC: false\n                        }\n                    ) : (\n                        {\n                            type: 'log',\n                            min: plotDataAll.logTickMin,\n                            max: plotDataAll.logTickMax\n                        }\n                    )\n                }\n                yScale={\n                    plotParameters.yScale != null ? (\n                        plotParameters.yScale\n                    ) : scale === 'linear' || !plotParameters.log ? (\n                        {\n                            type: 'linear',\n                            max: 'auto',\n                            min: 'auto'\n                        }\n                    ) : (\n                        {\n                            type: 'log',\n                            min: plotDataAll.logTickMin,\n                            max: plotDataAll.logTickMax\n                        }\n                    )\n                }\n                axisLeft={{\n                    orient: 'left',\n                    // do not show ticks with non-integer values\n                    format: plotParameters.yAxisFormat,\n                    tickSize: 0,\n                    tickValues: plotParameters.yTickValues != null ? plotParameters.yTickValues : tickValues,\n                    legend: plotParameters.yLegend != null ? plotParameters.yLegend[lang] : '',\n                    legendOffset: plotParameters.yLegendOffset != null ? plotParameters.yLegendOffset : -40,\n                    legendPosition: 'middle'\n                }}\n                axisBottom={{\n                    orient: 'bottom',\n                    format:\n                        Object(plotParameters.xAxisFormat) !== plotParameters.xAxisFormat\n                            ? plotParameters.xAxisFormat\n                            : plotParameters.xAxisFormat[lang],\n                    tickValues: plotParameters.xTickValues != null ? plotParameters.xTickValues : !fullPlot ? 5 : 10,\n                    tickRotation:\n                        plotParameters.xTickRotation != null ? plotParameters.xTickRotation : !fullPlot ? 0 : -30,\n                    legend: plotParameters.xLegend != null ? plotParameters.xLegend[lang] : '',\n                    legendOffset: 40,\n                    legendPosition: 'middle'\n                }}\n                enableGridX={false}\n                gridYValues={plotParameters.yTickValues != null ? plotParameters.yTickValues : tickValues}\n                pointSize={plotParameters.pointSize != null ? plotParameters.pointSize : 6}\n                pointBorderWidth={plotParameters.pointBorderWidth}\n                pointBorderColor={darkMode ? 'var(--primary-color-4)' : 'var(--primary-color-5)'}\n                useMesh={true}\n                enableArea={false}\n                enablePointLabel={plotParameters.enablePointLabel}\n                pointLabel={plotParameters.pointLabel}\n                pointLabelYOffset={plotParameters.pointLabelYOffset ? plotParameters.pointLabelYOffset : -6}\n                enableSlices={plotParameters.enableSlices != null ? plotParameters.enableSlices : 'x'}\n                curve={'monotoneX'}\n                tooltip={plotParameters.tooltip}\n                markers={\n                    plotParameters.hideMarkers ? (\n                        []\n                    ) : !playing && tempDate !== startDate && tempDate !== endDate ? (\n                        [\n                            {\n                                axis: 'x',\n                                value: parseDate(tempDate),\n                                lineStyle: {\n                                    stroke: darkMode ? 'var(--primary-color-4)' : 'var(--primary-color-5)',\n                                    strokeWidth: 1,\n                                    strokeDasharray: '6 6'\n                                }\n                            }\n                        ]\n                    ) : (\n                        []\n                    )\n                }\n                legends={\n                    plotParameters.legends != null ? (\n                        plotParameters.legends\n                    ) : (\n                        [\n                            {\n                                anchor: 'bottom',\n                                direction: 'row',\n                                justify: false,\n                                translateX: 0,\n                                translateY: !fullPlot ? 50 : 70,\n                                itemsSpacing: 10,\n                                itemDirection: 'left-to-right',\n                                itemWidth: plotParameters.legendItemWidth,\n                                itemHeight: 20,\n                                itemOpacity: 0.75,\n                                symbolSize: 12,\n                                symbolShape: 'circle',\n                                symbolBorderColor: 'rgba(0, 0, 0, .5)',\n                                effects: []\n                            }\n                        ]\n                    )\n                }\n                onClick={({ serieId, data }) => {\n                    if (isMobile || isIPad13) return\n                    if (!plotParameters.subregions || serieId == null || data.noClick) return\n                    this.props.regionToggle(\n                        currentRegion.length === 1 && currentRegion[0] === str.GLOBAL_ZH\n                            ? [ serieId ]\n                            : [ ...currentRegion, serieId ]\n                    )\n                }}\n            />\n        )\n    }\n}\n"]},"metadata":{},"sourceType":"module"}